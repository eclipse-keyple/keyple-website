[{"authors":null,"categories":null,"content":"\nKeyple is composed of multiple components, each designed to support a specific level of integration. These components are released under different open-source licenses, depending on their intended usage and level of contribution expected from the community.\nLIBRARIES All Keyple libraries are published under the Eclipse Public License 2.0 (EPL), offering strong copyleft protection.\nAny modification of a Keyple library by the community must be re-shared with the Eclipse Keyple project.\nAPIs All Keyples APIs are released under the MIT license, to offer maximum permissibility for the design of Keyple extensions.\nA Keyple extension can be defined with any open or closed license.\nEXAMPLES To facilitate user handling of Keyple middleware, the project offers a multitude of implementation examples published under the permissive Eclipse Distribution License 1.0 (equivalent to 3-Clause BSD License).\nUsers are free to draw inspiration from the examples to create their own solutions without obligation to contribute back.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1747213887,"objectID":"055d231ac2bb9ed3f37d68357db7fc2a","permalink":"https://keyple.org/community/licenses/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/licenses/","section":"community","summary":"License according to Keyple component type","tags":null,"title":"Project licenses","type":"book"},{"authors":null,"categories":null,"content":"\nThis section lists the components that can be used to develop ticketing applications.\nComponents map General presentation of the dependencies between the different Keyple components.\nConfiguration wizard Online tool to generate the dependencies section of Gradle or Maven configuration files.\nDependency check Online tool to check the compatibility of Keyple components according to their internal API versions.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"b0a222737f36239a23065660b3f97db1","permalink":"https://keyple.org/components/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/overview/","section":"components","summary":"This section lists the components that can be used to develop ticketing applications.\nComponents map General presentation of the dependencies between the different Keyple components.\nConfiguration wizard Online tool to generate the dependencies section of Gradle or Maven configuration files.","tags":null,"title":"Components overview","type":"book"},{"authors":null,"categories":null,"content":" The documentation of the version 1.0 of Keyple (deprecated) is accessible here. About this documentation This documentation is constantly evolving according to the feedback from its readers. Do not hesitate to open a ticket or to join our mailing list with questions and/or any topic you think deserves clarification or seems confusing.\nKey concepts Understand the concepts behind Keyple.\nArchitecture Overall presentation of the Keyple architecture.\nKeypop API Keyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1706607522,"objectID":"eb30d82554c77b0237e41395248a1dd2","permalink":"https://keyple.org/learn/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/overview/","section":"learn","summary":"The documentation of the version 1.0 of Keyple (deprecated) is accessible here. About this documentation This documentation is constantly evolving according to the feedback from its readers. Do not hesitate to open a ticket or to join our mailing list with questions and/or any topic you think deserves clarification or seems confusing.","tags":null,"title":"Overview","type":"book"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1741266156,"objectID":"55ff783a5d5e54ae291e334ea2a692e3","permalink":"https://keyple.org/user-guides/non-keyple-client/back-to-user-guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/back-to-user-guides/","section":"user-guides","summary":"Back to user guides","tags":null,"title":"Back To User Guides","type":"book"},{"authors":null,"categories":null,"content":"\nJava This quick start describes how to create a ready-to-execute Java command-line application that runs a simple transaction based on a Calypso portable object involving two smart card readers.\nAndroid This guide describes how to start a ticketing application using Keyple and Android NFC plugin to read the content of a Calypso card.\nC++ This quick start describes how to create a ready-to-execute C++ command-line application that runs a simple transaction based on a Calypso portable object involving two smart card readers.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"b9987730d48c11973f6b3d2d4115f434","permalink":"https://keyple.org/learn/build-your-first-app/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/build-your-first-app/","section":"learn","summary":"Java This quick start describes how to create a ready-to-execute Java command-line application that runs a simple transaction based on a Calypso portable object involving two smart card readers.","tags":null,"title":"Build your first app","type":"book"},{"authors":null,"categories":null,"content":"\nTypes of contributions Thanks for your interest in the Eclipse Keyple® project.\nThere are several ways to contribute to the project:\nPropose a fix for a problem that is already known or that you have identified. In this case you will have to notify the issue in the repository where the problem appeared and reference the issue in all the other repositories affected by the fix. Propose the creation of a new component. In this case you will first have to create an issue in the repository https://github.com/eclipse-keyple/keyple to justify the need and request the creation of a new repository, wait for the issue to be resolved by the decision of the committers, and then create an issue in the new repository signifying the start of development of the new component. Eclipse Contributor Agreement Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).\nhttp://www.eclipse.org/legal/ECA.php Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.\nFor more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#contributing\nContributing via fork Check if there is already a GitHub issue for what you want to work on or create one. Announce in the comments section that you want to work on the issue. Also describe the solution you want to implement. To improve the chances for your contribution to be accepted, you’ll want to wait for the feedback of the committers. Fork the repository. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes using the -s flag in order to add a Signed-off-by footer as mentioned above and use the same email address you are using for your GitHub account.\nUse commits messages that respect the commits message conventions. Push your changes to your forked repository. Submit a pull request referencing the related issue(s). After submitting, do not use your branch for any other development, otherwise further changes that you make will be visible in the PR. Contributing as a project committer Check if there is already a GitHub issue for what you want to work on or create one. Assign the issue to yourself. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes. Use commits messages that respect the commits message conventions. Push the branch into the repository. Submit a pull request and ask somebody who is familiar with the code you modified to review it. If the reviewer approves and all checks are OK, merge using squash \u0026amp; commit method. Commits message conventions In order to ensure good readability of the commit history, it is necessary to have consistency in the structure of the commit messages.\nTherefore, all contributors to the project are asked to respect the structure of the commits messages as described in the guide Conventional Commits 1.0.0:\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; [optional body] \u0026lt;footer(s)\u0026gt; Furthermore, it is requested to indicate in the footer section the associated issue(s) that will be closed (Closes #xxx, closes #yyy, etc...). This will automatically close the associated issue(s) when the pull request is validated (see GitHub Docs for more details).\nIt is also required to indicate possible references to other associated issues (Refs: #aaa, #bbbb, repository_owner/other_repository_name#ccc, etc...).\nHere is fictive example:\nfeat(observation): allow asynchronous notification of reader events Add a public method in the observable reader to enable asynchronous notifications. Closes #34, closes #38 Refs: #12, eclipse/keyple#54 ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1747140294,"objectID":"03b6ed671df847a7fe95d07d922cdb1a","permalink":"https://keyple.org/community/contributing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/contributing/","section":"community","summary":"Find out how to contribute to the Keyple project and how it can benefit your organization.","tags":null,"title":"How to contribute to Eclipse Keyple® project","type":"book"},{"authors":null,"categories":null,"content":" A “non-Keyple client” refers to a client application developed in a language other than Java, Kotlin, or C++, and therefore unable to directly integrate the core libraries of the Keyple ecosystem.\nThis application is installed on a terminal equipped with a card reader. However, due to its technological environment, it cannot locally use Keyple’s core components to access the card or perform ticketing procedures. It must therefore rely on a remote Keyple-based component (e.g., through a server API) to carry out these operations.\nOverview This guide is designed for developers of non-Keyple client applications embedded in smart card processing terminals, who need to delegate all or part of the management of the smart card ticketing transaction to a Keyple-based server application.\nThis use case corresponds to the Reader Client Side usage mode of the Keyple Distributed solution. Keyple on server side only Operating mode The client is the initiator of the application processing following a card event (card insertion/removal). He can hand over to the server whenever he wants to perform a remote ticketing service on a card present in one of his local readers.\nThere are two ways for a non-Keyple client application to communicate with a server based on the Keyple middleware:\nManual implementation of the Keyple JSON specifications Using the Keyple interop multiplatform libraries Manual implementation You can implement the communication logic manually by following the official Keyple JSON specifications:\nManual implementation Specification Description Server JSON API Describes the workflow and the JSON format of data exchanged between terminal and server during a remote card transaction, as well as the corresponding business rules. Selection JSON Specification Describes how to implement early card selection on the terminal before requesting the server to continue the card transaction, as well as the JSON format of the involved data. This approach ensures maximum flexibility and autonomy for integrators. However, it requires full ownership of the implementation, including the business logic defined in the Selection JSON Specification and the Server JSON API. It also involves managing JSON (de)serialization of the corresponding data structures and implementing the card reader access layer.\nKeyple interop libraries To simplify development and ensure compliance with the specifications, you can integrate the following ready-to-use Keyple interop multiplatform libraries into your application:\nKeyple interop multiplatform libraries Keyple Interop Library Platform Description JSON API Client Windows, Linux, macOS, Android, iOS A Kotlin multiplatform client library that fully implements the Keyple Server JSON API and Selection JSON Specification. It enables direct interaction with a Keyple-based server over HTTP. Local Reader NFC Mobile Android, iOS A Kotlin multiplatform adapter that provides access to mobile NFC readers. It allows smart card operations to be performed locally and used in conjunction with the JSON API Client library. This second option greatly reduces implementation effort and ensures compatibility with the evolving Keyple ecosystem.\nWorkflow overview The following sequence diagram shows the overall interaction flow between a client application and Keyple’s interop libraries:\nKeyple interop libraries workflow Workflow details Retrieve an export of the card selection scenario from the server using your preferred method. This scenario will be processed when a card is detected. For more details, refer to Keyple’s Import/Export Scenario feature.\nImplementing early card selection is strongly recommended for non-Keyple clients as it increases performance by reducing the number of network exchanges, as the selection scenario can be processed autonomously by the terminal as soon as a card is presented.The scenario should be retrieved by the customer well before a card is presented, for example during installation, updating or application startup. Build an instance of KeypleTerminal, providing a LocalReader implementation to access the card reader, a SyncEndpointClient implementation to access the server over HTTP, and possibly a card selection scenario export to be processed when a card is detected.\nThe Keyple Interop Local Reader NFC Mobile Library provides the MultiplatformNfcReader class as a LocalReader implementation for NFC mobiles, but you can provide other implementations depending on your context.The implementation of the SyncEndpointClient remains your responsibility, as it is specific to the context of the client application.\nIn a context with several server instances, a mechanism must be implemented to ensure that all messages associated to a functional transaction are routed to the same server instance.\nThe client network endpoint can use the value of the sessionId field contained in the MessageDto object transmitted by KeypleTerminal to identify transactions. This value is generated for each new …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1756737424,"objectID":"4b5296d26dd74116047124a6565360ce","permalink":"https://keyple.org/user-guides/non-keyple-client/content/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/content/","section":"user-guides","summary":"How to connect a non-Keyple-based client application to a Keyple-based server application.","tags":null,"title":"Non-Keyple Client User Guide","type":"book"},{"authors":null,"categories":null,"content":"Since October 2021 (start of the 2.x.y branches of the Keyple Service and Calypso libraries), the project has been split into a multitude of API and library components, hosted in dedicated repositories and versioned separately with their own lifecycles. Dependencies between APIs are limited, and libraries have almost no dependencies between them: this architecture means that upgrades and corrections can be proposed on a frequent basis (an average of 80 component versions per year between 2021 and 2025.\nAny correction or minor component evolution is guaranteed to have no impact on applications or extensions. A major evolution may require adaptations on a limited perimeter: as indicated in the dedicated migration guides. In November 2023 (start of the 3.x.y branches of the Keyple Service and Calypso libraries), the terminal APIs are hosted within the Eclipse Keypop open source project. Since then:\nnew feature additions are regularly integrated into the 3.x.y branches via minor evolutions. but the older 2.x.y branches continue to be actively maintained with multiple patches (static scope of functionality). Patches are no longer offered for the very first Keyple implementations: 0.7 to 1.0 (July 2019 to December 2020): migration to a more recent version of Keyple is recommended.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1749847606,"objectID":"4d9c50b47ea76e19e9046771d2b0fc05","permalink":"https://keyple.org/community/maintenance/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/maintenance/","section":"community","summary":"Evolution and maintenance service.","tags":null,"title":"Support and long-term maintenance","type":"book"},{"authors":null,"categories":null,"content":"Current work Java implementation supply a Calypso security extension library to manage the Calypso OpenSAM security module C++ implementation Ongoing updates to the C++ port of the latest versions 3.x of the Keyple Core and Keyple Calypso Prime Extended libraries (based on Keypop APIs). In the future, C++ libraries will be added to develop a Keyple Distributed client. Long-term study to provide a Hoplink extension (based on a high-level API on top of the Calypso Card API). looking to migrate the Java implementation in Kotlin Multiplatform in order to handle iOS \u0026amp; some native target for ticketing application based on a generic code compliant with Java environment. Evolutions log Major improvements in Keyple after the version 2.0.0 Availability Date Description Java C++ 2025/05 Interoperability libraries for Keyple Distributed Service (Keyple dependency-free client application connected to a Keyple Distributed server): 2 Kotlin MultiPlatform libraries that can be compiled for any environment, artifacts for the Java runtime environment and native artifacts for Windows, Linux, macOS, Android \u0026amp; iOS systems. library for managing the JSON Keyple Distributed protocol libraries for interfacing a local reader of a device: NFC reader on Android or iOS mobile, or PC/SC reader on PC. 2024/04 - Support of Calypso Prime PKI Capability to manage a simple asymmetric authentication of a Calypso card without involving a SAM (REV3.3 Prime PKI based on ECC) 2023/11 in progress (scheduled Q2/2025) Adoption of the Eclipse Keypop API The Keyple middleware is enhanced by the Eclipse Keypop project with new UML-compliant interfaces and APIs. The Keyple Calypso Card library can be extended with other libraries to handle SAM security features or PKI cryptography. 2023/04 not yet supportedclient side planned for the future Specification of the JSON objects used by Keyple Distributed It facilitates the implementation of non-Keyple based clients communicating with a Keyple Distributed server e.g. the smart card readers of a terminal without Keyple software can be remotely controlled by a Keyple service. 2022/12 in progress (scheduled Q2/2025) Support of Calypso Prime Extended Capability to operate a Calypso secure session in confidential mode and to support intermediate authentications 2022/06 2022/11 SAM operation improvements Definition of an API to operate standalone SAM transaction Support of the PSO data signature feature: signature generation \u0026amp; verification. Possibility to operate a signature operation through the Card Transaction or a SAM Transaction. 2022/02 2022/08 Support of the full card command set of Calypso Prime Regular For the Get Data command, addition of the mode \u0026#39;EF list\u0026#39; \u0026amp; \u0026#39;traceability\u0026#39;, Binary files\u0026#39; access for read, write, \u0026amp; update, Read Record Multiple, Search Record Multiple, Increase Multiple \u0026amp; Decrease Multiple Pre-personalization : possibility to personalized keyset with Change Key Global evolutions of Keyple until version 2.0.0 (obsolete) Until the version 2.0.0 of Keyple, the components of Keyple Java or Keyple C++ were released at the same time with the same version number. The porting in C++ of Keyple Java is based on the same Object-Oriented Model. The Keyple C++ implementation provides the same core \u0026amp; Calypso feature, but the support of the distributed module isn’t part of the scope, and for reader integration, only the PC/SC reader is provided.\nRelease Java C++ Description 2.0.0 2021/10 2022/07 Calypso terminal compliance The Keyple Service component implements the Reader API 1.0 and Card API 1.0 standardized for the reader layer of Calypso terminals. The implementation is compliant with the reader layer requirements for Calypso terminals The Calypso card extension library in version 2.0.0 follows also the Calypso layer requirements defined for Calypso terminals, it implements the Calypso API 1.0. Removal of dependencies between Keyple components (Core, Calypso extension, and specific plugins): all components are released with their own version number and could evolve separately. Until the version 1.0.0, the source code of all the Keyple Java components was hosted in a single repository: https://github.com/eclipse-keyple/keyple-java. It was the same for Keyple C++ components hosted in https://github.com/eclipse-keyple/keyple-cpp. For the version 1.0.0 and below, there were strong dependencies between the Keyple components which had all to be released in the same version number. To facilitate the evolution and the maintenance, the version 2.0.0 proposes a full reorganization of the code. All the components are split in different repositories in order to allow them to evolve independently. The public interfaces are also separated to the specific implementations: the repositories are dedicated to host API or library implementation. The Keyple Java components are managed through 16 repositories. The API for plugin implementation and for distributed architecture configuration have been simplified 1.0.0 …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1747140294,"objectID":"98d6f058a353aa178a1b39cefa20d88f","permalink":"https://keyple.org/community/roadmap/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/roadmap/","section":"community","summary":"Overview of past and future Keyple Releases.","tags":null,"title":"Project roadmap","type":"book"},{"authors":null,"categories":null,"content":"\nThe Server JSON API describes the workflow and the JSON format of data exchanged between terminal and server during a remote card transaction, as well as the corresponding business rules.\nPlease note that this guide does not specify the data transport layer on the network, which remains the responsibility of the user. Workflow The Keyple remote transaction involves four types of messages exchanged between the terminal and the server:\nMessage Direction Description Execute Remote Service To server Allows the terminal to request the server to start a remote ticketing transaction. Command From server Requests the terminal to process specific services with the card or the terminal’s reader. Response To server Allows the terminal to send to the server the responses to the services it has performed. End Remote Service From server Tells the terminal that the remote ticketing transaction is complete. On its own initiative (e.g. following the detection of a card), the terminal sends to the server an “Execute Remote Service” message to request it to start a card transaction. At this point, the terminal has the ability to tell the server which business service to run and also to provide the result of an already processed card selection scenario (e.g. ProcessedCardSelectionScenarioJsonString) and/or additional custom input data.\nAs long as the transaction is not completed, the terminal receives from the server “Command” messages containing the actions to be performed with the card or the terminal’s reader. The responses are sent to the server in “Response” messages.\nWhen the transaction is complete, the terminal receives from the server a final “End Remote Service” message which optionally contains custom transaction output data.\nThe diagram below illustrates the messages exchange flow:\nKeyple Server JSON API - Workflow Message format The following table indicates the global JSON format of each message:\nMessage Direction JSON Description Execute Remote Service To server MessageDto An object. Command From server [ MessageDto ] An array containing a single object. Response To server MessageDto An object. End Remote Service From server [ MessageDto ] An array containing a single object. JSON specification Version 2.1 Version 2.0 Version 1.0 ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1743005307,"objectID":"fdaacebe642369edd17f83be3810a8b2","permalink":"https://keyple.org/user-guides/non-keyple-client/server-json-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/server-json-api/","section":"user-guides","summary":"The Server JSON API describes the workflow and the JSON format of data exchanged between terminal and server during a remote card transaction, as well as the corresponding business rules.","tags":null,"title":"Server JSON API (for non-Keyple client)","type":"book"},{"authors":null,"categories":null,"content":"\nStandalone application How to develop an end-user standalone application.\nDistributed application How to develop an end-user application using network communications.\nNon-Keyple client How to connect a non-Keyple-based client application to a Keyple-based server application using simple JSON block exchanges.\nCalypso application How to develop an end-user application using the Calypso card extension add-on.\nCard resource service How to develop an end-user application using the Card Resource Service.\nHow to upgrade Keyple How to upgrade an existing Keyple application using an earlier version.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"e7d87905ab55747c5273b4de23662147","permalink":"https://keyple.org/learn/user-guide/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/","section":"learn","summary":"Standalone application How to develop an end-user standalone application.\nDistributed application How to develop an end-user application using network communications.\nNon-Keyple client How to connect a non-Keyple-based client application to a Keyple-based server application using simple JSON block exchanges.","tags":null,"title":"User guides","type":"book"},{"authors":null,"categories":null,"content":"\nThis page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keyple components repositories. Date Component 2025-09-10Keyple Card Calypso Crypto Pki Java Lib0.2.3Changed Removed explicit use of the BouncyCastle (\u0026#34;BC\u0026#34;) provider when selecting key factories and signature algorithms.\nThe provider is now chosen automatically by the JVM/Android runtime.\nThis change improves compatibility with Android (API 28+) where KeyFactory.RSA and similar algorithms are no longer available through the BC provider. 2025-09-10Keyple Card Calypso Java Lib3.1.9Fixed Corrected inconsistent initialization of sfi and recordNumber in CommandOpenSecureSession, ensuring they are always properly set when configuring read mode. Harmonized debug log message formatting for consistency. Changed Migrated the CI pipeline from Jenkins to GitHub Actions. 2025-07-21Keyple Card Calypso Crypto Pki Java Lib0.2.2Fixed Fixed a NoSuchMethodError at runtime to ensure full compatibility with Java 8 JREs. Changed Migrated the CI pipeline from Jenkins to GitHub Actions. 2025-07-16Keyple Interop Localreader Nfcmobile Kmp Lib0.1.6This is the initial release. 2025-07-16Keyple Interop Jsonapi Client Kmp Lib0.1.6This is the initial release. 2025-07-08Keyple Plugin Android Nfc Java Lib3.1.0Added Added keyple-plugin-storagecard-java-api:1.0.0 dependency to enable storage card support. Changed Migrated the CI pipeline from Jenkins to GitHub Actions. 2025-07-08Keyple Plugin Storagecard Java Api1.0.0This is the initial release. 2025-06-27Keyple Plugin Pcsc Java Lib2.5.2Fixed Corrected regex for ISO card identification. Changed Migrated the CI pipeline from Jenkins to GitHub Actions. 2025-05-07Keyple Plugin Pcsc Java Lib2.5.1Fixed Fixed card disconnection when checking card presence. 2025-04-22Keyple Plugin Pcsc Java Lib2.5.0Added Introduced new enum PcscCardCommunicationProtocol that unifies contact and contactless protocol handling: ISO_14443_4: For all ISO 14443-4 compliant cards (Type A and Type B) INNOVATRON_B_PRIME: For Calypso devices using B Prime protocol MIFARE_ULTRALIGHT: For NXP MIFARE Ultralight and UltralightC technologies ST25_SRT512: For STMicroelectronics ST25 memory tags ISO_7816_3: For contact cards using ISO 7816-3 protocol Implemented precise ATR pattern rules aligned with PC/SC Part 3 standards Added comprehensive documentation with references to PC/SC specifications Enhanced PcscReader.DisconnectionMode enum with additional modes: UNPOWER: Powers off the card completely (corresponds to PC/SC SCARD_UNPOWER_CARD) EJECT: Ejects the card if supported by the reader (corresponds to PC/SC SCARD_EJECT_CARD) Deprecated Marked PcscSupportedContactlessProtocol as deprecated, to be replaced by PcscCardCommunicationProtocol Marked PcscSupportedContactProtocol as deprecated, to be replaced by PcscCardCommunicationProtocol Changed Updated security provider from jnasmartcardio to jnasmartcardio/cna version 0.3.0-CNA 2025-04-18Keyple Plugin Java Api2.3.2Changed Switched license from EPL 2.0 to MIT (issue [#16]). The license switch has been authorized through a restructuring review supervised by the « Eclipse Management Organization » team https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/908#note_3394156. 2025-04-18Keyple Distributed Remote Java Api3.1.1Changed Switched license from EPL 2.0 to MIT (issue [#11]). The license switch has been authorized through a restructuring review supervised by the « Eclipse Management Organization » team https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/908#note_3394156. 2025-04-18Keyple Distributed Local Java Api2.2.1Changed Switched license from EPL 2.0 to MIT (issue [#10]). The license switch has been authorized through a restructuring review supervised by the « Eclipse Management Organization » team https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/908#note_3394156. 2025-04-18Keyple Common Java Api2.0.2Changed Switched license from EPL 2.0 to MIT (issue [#10]). The license switch has been authorized through a restructuring review supervised by the « Eclipse Management Organization » team https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/908#note_3394156. 2025-04-17Keyple Card Calypso Cpp Lib2.2.5.5⚠️ Security Fix\nSecurity Fix length check Full Changelog: https://github.com/eclipse-keyple/keyple-card-calypso-cpp-lib/compare/2.2.5.4...2.2.5.5\n2025-04-11Keyple Card Calypso Java Lib3.1.8⚠️ Security Fix\nSecurity Fix length check 2025-04-11Keyple Card Calypso Java Lib2.3.15⚠️ Security Fix\nSecurity Fix length check 2025-03-29Keyple Card Calypso Cpp Lib2.2.5.4⚠️ Security Fix\nSecurity restrict some methods from being used in secure session Full Changelog: https://github.com/eclipse-keyple/keyple-card-calypso-cpp-lib/compare/2.2.5.3...2.2.5.4\n2025-03-26Keyple Card Calypso Java Lib2.3.14⚠️ Security Fix\nSecurity Restrict methods prepareGetData, prepareReadRecord, prepareReadRecordsPartially and prepareSearchRecords from …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1747140294,"objectID":"9df4882bff6799b05e0bb341234f8f66","permalink":"https://keyple.org/community/changelog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/changelog/","section":"community","summary":"This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keyple components repositories.","tags":null,"title":"Changelog","type":"book"},{"authors":null,"categories":null,"content":"\nReader plugin add-on How to develop an add-on to handle a specific hardware device.\nCard extension add-on How to develop an add-on to manage a specific type of card.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"02ddd4e5ae16d28c8c0832714a09c315","permalink":"https://keyple.org/learn/developer-guide/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/developer-guide/","section":"learn","summary":"Reader plugin add-on How to develop an add-on to handle a specific hardware device.\nCard extension add-on How to develop an add-on to manage a specific type of card.","tags":null,"title":"Developer guides","type":"book"},{"authors":null,"categories":null,"content":"\nThe Selection JSON Specification describes how to implement early card selection on the terminal before requesting the server to continue the card transaction, as well as the JSON format of the involved data.\nImplementing early card selection is strongly recommended for non-Keyple clients as it increases performance by reducing the number of network exchanges, as the selection scenario can be processed autonomously by the terminal as soon as a card is presented. Workflow This specification is based on Keyple’s “Import/Export Scenario” functionality, which enables to import/export prepared and processed card selection scenarios, and therefore follows the same workflow.\nThe early card selection involves two JSON strings exchanged between the terminal and the server:\nJSON Direction Description CardSelectionScenarioJsonString From server A JSON string containing the exported card selection scenario. ProcessedCardSelectionScenarioJsonString To server A JSON string containing the result of the processed card selection scenario. On its own initiative (e.g. at startup), the terminal requests the server to export the card selection scenario to be processed when a card is detected. The server returns a JSON string CardSelectionScenarioJsonString containing the scenario.\nLater, when a card is detected, the terminal processes the scenario on the card.\nThen, it generates a JSON string ProcessedCardSelectionScenarioJsonString containing the result of the processed scenario, and sends it to the server using the Server JSON API to continue the transaction.\nThe diagram below illustrates the workflow:\nKeyple Selection JSON Specification - Workflow Selection processing The primary objective of selection step is to establish a logical communication channel with a card.\nTo enable processing of different card profiles, Keyple offers the creation of selection scenarios with integrated selection cases. The scenario is provided by the server, and it involves checking whether the card is compatible with at least one of the selection cases. The selection cases are processed successively, in the order in which they are defined.\nThere are several options for executing the scenario:\nthe process stops at the first selection case where the card matches, or all selection cases are systematically processed. the physical channel can be kept open or closed at the end of each selection case. A card selection case incorporates various independent filters that can be applied individually or in combination to determine if a detected card is suitable for performing a transaction. While some cards can be selected based on communication protocol or response data from the power-on operation, most of the cards require a selection through Application Identifier (AID) using the ISO7816-4 “Select Application” APDU command.\nThe structure outlined below allows for defining selection scenarios that combine these three types of filters:\nbased on the communication protocol, based on the response data from the power on stage, based on the Application Identifier (AID). When filtering by AID, the “Select Application” APDU command is sent to the card in accordance with the ISO7816-4 standard. Additional parameters, also defined by the standard, can be set to specify the type of operation (FileOccurrence) and the type of output (FileControlInformation).\nEach filter is optional, and if none are defined, the selection is considered successful as soon as the card is detected. However, when a filter is specified, it becomes a prerequisite for the card selection.\nIn addition to card selection, a selection scenario can include a list of APDUs that are to be transmitted to the card as soon as it becomes “selected”.\nThe terminal must iterate over each selection cases of the scenario, determine which type of filter to apply and apply it (e.g. protocol, power-on data, AID).\nIf all the defined filters are satisfied, the terminal must send any additional APDUs.\nSelection result processing The JSON string ProcessedCardSelectionScenarioJsonString resulting from the processed card selection scenario should be transmitted to the server when calling the “Execute Remote Service” message of the Server JSON API.\nThis data can be included in either the initialCardContent or inputData field.\nIn both cases, it must be encapsulated within an object recognized by the server. JSON specification Version 1.0 ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1743512756,"objectID":"8c92695831586392780025f9ae6a78ba","permalink":"https://keyple.org/user-guides/non-keyple-client/selection-json-specification/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/selection-json-specification/","section":"user-guides","summary":"The Selection JSON Specification describes how to implement early card selection on the terminal before requesting the server to continue the card transaction, as well as the JSON format of the involved data.","tags":null,"title":"Selection JSON Specification (for non-Keyple client)","type":"book"},{"authors":null,"categories":null,"content":"\nJava examples Code example involving the Keyple Java implementation.\nC++ examples Code example involving the Keyple C++ implementation.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"59bba2c5280cc7c518a9e2f11a712a2e","permalink":"https://keyple.org/learn/code-samples/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/code-samples/","section":"learn","summary":"Java examples Code example involving the Keyple Java implementation.\nC++ examples Code example involving the Keyple C++ implementation.","tags":null,"title":"Code samples","type":"book"},{"authors":null,"categories":null,"content":"\nThis section contains information for those who wish to understand the internal mechanics of Keyple components.\nCore services In-depth technical information about Keyple core services.\nCalypso card extension In-depth technical information about Keyple Calypso card extension add-on.\nBuild and CI Learn how the Keyple components are built, tested and published.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"2f079642f9e7c75852287e7d9a819f25","permalink":"https://keyple.org/learn/keyple-in-depth/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/keyple-in-depth/","section":"learn","summary":"This section contains information for those who wish to understand the internal mechanics of Keyple components.\nCore services In-depth technical information about Keyple core services.\nCalypso card extension In-depth technical information about Keyple Calypso card extension add-on.","tags":null,"title":"Keyple in depth","type":"book"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1715854461,"objectID":"acbb0af87776e437ea6a0d992d1ee09d","permalink":"https://keyple.org/learn/archives/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/archives/","section":"learn","summary":" ","tags":null,"title":"Archives","type":"book"},{"authors":null,"categories":null,"content":"\nCNA Terminal API Keyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"490283de5a5bf096fb45d0ad94f28abd","permalink":"https://keyple.org/components/standards-compliance/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standards-compliance/","section":"components","summary":"CNA Terminal API Keyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.","tags":null,"title":"Standards compliance","type":"book"},{"authors":null,"categories":null,"content":"\nCommon API Public API which defines the elements shared between all Keyple libraries.\nDistributed Local API Internal API dedicated to the development of custom local services components of the Keyple distributed solution.\nDistributed Remote API Internal API dedicated to the development of custom remote plugins components of the Keyple distributed solution.\nPlugin API Internal API dedicated to the development of custom reader plugins components.\nPlugin Storage Card API Internal API dedicated to the development of custom reader plugins components.\nService Main library containing the implementation of the core Keyple components and services.\nService Resource Add-on library providing profile-based card resource allocation mechanism.\nUtil Utility classes for Keyple components.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"e8dda256de6eff7434443fd43c6dbcaa","permalink":"https://keyple.org/components/core/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/","section":"components","summary":"Common API Public API which defines the elements shared between all Keyple libraries.\nDistributed Local API Internal API dedicated to the development of custom local services components of the Keyple distributed solution.","tags":null,"title":"Keyple core components","type":"book"},{"authors":null,"categories":null,"content":" Version 0.9 of the documentation is no longer actively maintained. The site that you are currently viewing is an archived snapshot. For up-to-date documentation, see the latest version. To add an extension or a plugin made a Pull request contributions on GitHub. Core Version 0.9 of the documentation is no longer actively maintained. The site that you are currently viewing is an archived snapshot. For up-to-date documentation, see the latest version. 0.9.0 Keyple project Download GitHub Changelogs Overview The Keyple Core C++ component contains all the fundamental requires components of the Keyple solution.\nExtensions Version 0.9 of the documentation is no longer actively maintained. The site that you are currently viewing is an archived snapshot. For up-to-date documentation, see the latest version. To add an extension made a Pull request contributions on GitHub.\nReader plugins Version 0.9 of the documentation is no longer actively maintained. The site that you are currently viewing is an archived snapshot. For up-to-date documentation, see the latest version. To add a plugin made a Pull request contributions on GitHub.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1706607522,"objectID":"0fbfe299df22553cbee587900b51ddf2","permalink":"https://keyple.org/archives/components-cpp-0.9/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/archives/components-cpp-0.9/","section":"archives","summary":"Version 0.9 of the documentation is no longer actively maintained. The site that you are currently viewing is an archived snapshot. For up-to-date documentation, see the latest version. To add an extension or a plugin made a Pull request contributions on GitHub.","tags":null,"title":"== C++ 0.x components ==","type":"book"},{"authors":null,"categories":null,"content":"\nLocal Part of the Keyple Distributed solution which contains all the local services.\nNetwork Part of the Keyple Distributed solution which contains the common network elements used by Local and Remote components.\nRemote Part of the Keyple Distributed solution which contains all the remote plugins.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"a8cc556eb8287c4d16b4f50083f202a0","permalink":"https://keyple.org/components/distributed/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/distributed/","section":"components","summary":"Local Part of the Keyple Distributed solution which contains all the local services.\nNetwork Part of the Keyple Distributed solution which contains the common network elements used by Local and Remote components.","tags":null,"title":"Keyple distributed systems components","type":"book"},{"authors":null,"categories":null,"content":" You can create a new card extension add-on for a not yet supported card technology by following the dedicated developer guide. Calypso Card Add-on to manage Calypso® cards.\nCalypso Legacy SAM Add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc…).\nCalypso PKI Add-on to enable Calypso® PKI card transactions.\nGeneric Add-on to manage cards with low-level API.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"edf0ee9a8c9a2d0d9bfe3aaf7cb41ea0","permalink":"https://keyple.org/components/card-extensions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/card-extensions/","section":"components","summary":"You can create a new card extension add-on for a not yet supported card technology by following the dedicated developer guide. Calypso Card Add-on to manage Calypso® cards.\nCalypso Legacy SAM Add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc…).","tags":null,"title":"Keyple card extensions components","type":"book"},{"authors":null,"categories":null,"content":" Standard reader plugins are based on universally recognized technologies such as PC/SC or Android NFC. They are not specifically tied to any particular brand of device.\nYou can create a new reader plugin add-on for a not yet supported hardware by following the dedicated developer guide.\nAndroid NFC Add-on to manage Android NFC readers.\nAndroid OMAPI Add-on to manage Android OMAPI readers.\nCard Resource Add-on to manage readers provided by the Card Resource Service.\nPC/SC Add-on to manage PC/SC readers.\nStub Add-on to manage virtual readers and cards.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"d2367347f47563fceb865fde98a46946","permalink":"https://keyple.org/components/standard-reader-plugins/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/","section":"components","summary":"Standard reader plugins are based on universally recognized technologies such as PC/SC or Android NFC. They are not specifically tied to any particular brand of device.\nYou can create a new reader plugin add-on for a not yet supported hardware by following the dedicated developer guide.","tags":null,"title":"Standard reader plugins components","type":"book"},{"authors":null,"categories":null,"content":"\nJSON API Client A multiplatform client library implementing the Keyple Server JSON API and Selection JSON Specification to enable non-Keyple applications to interact with a Keyple server over HTTP.\nLocal Reader NFC Mobile A multiplatform adapter providing a LocalReader SPI implementation to allow non-Keyple mobile applications to control their local NFC smart card reader.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748012651,"objectID":"87c90809652264d12c52c6bf9d9ed217","permalink":"https://keyple.org/components/interop-components/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/interop-components/","section":"components","summary":"JSON API Client A multiplatform client library implementing the Keyple Server JSON API and Selection JSON Specification to enable non-Keyple applications to interact with a Keyple server over HTTP.","tags":null,"title":"Keyple interop components","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1632232396,"objectID":"c92fea6497d0ce287423f258060e124b","permalink":"https://keyple.org/learn/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/","section":"learn","summary":"","tags":null,"title":"","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1741266156,"objectID":"b421dbe0ba65d482eff6cda706d04550","permalink":"https://keyple.org/user-guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/","section":"user-guides","summary":"","tags":null,"title":"","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1741266156,"objectID":"5bb241c8b872d7b56177075648555046","permalink":"https://keyple.org/user-guides/non-keyple-client/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/","section":"user-guides","summary":"","tags":null,"title":"","type":"book"},{"authors":null,"categories":null,"content":"\nLicenses License according to Keyple component type\nContributing Find out how to contribute to the Keyple project and how it can benefit your organization.\nMaintenance Evolution and maintenance service.\nRoadmap Overview of past and future Keyple Releases.\nChangelog This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keyple components repositories.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1703263968,"objectID":"460964d71a5606848132aa51ae04f454","permalink":"https://keyple.org/community/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/","section":"community","summary":"Licenses License according to Keyple component type\nContributing Find out how to contribute to the Keyple project and how it can benefit your organization.\nMaintenance Evolution and maintenance service.","tags":null,"title":"Community","type":"book"},{"authors":null,"categories":null,"content":"\nThis section lists the components that can be used to develop ticketing applications.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1701251637,"objectID":"f2cc89de14efe57a34868f513043e50e","permalink":"https://keyple.org/components/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/","section":"components","summary":"This section lists the components that can be used to develop ticketing applications.","tags":null,"title":"Keyple components","type":"book"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1715854461,"objectID":"42a01f4713c21815befff53fcf9d5a4f","permalink":"https://keyple.org/suppliers/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/suppliers/","section":"suppliers","summary":" ","tags":null,"title":"Suppliers","type":"book"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1718891050,"objectID":"ecab3e7b7b6c1c15cef66cd84562f7f4","permalink":"https://keyple.org/testimonials/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/testimonials/","section":"testimonials","summary":" ","tags":null,"title":"Testimonials","type":"book"},{"authors":null,"categories":null,"content":"\nOverview This quick start describes how to create a ready-to-execute Java command-line application that runs a simple transaction based on a Calypso Card involving two smart card readers.\nThe demonstration application created for this quick start requires:\na Calypso Card (contactless smart card, NFC mobile phone with a Calypso applet or application), a Calypso SAM (Secure Access Module). We will use three main components of Keyple:\nKeyple Service Java Library which is the base component to which all the others refer, Keyple Card Calypso add-on to handle the commands sent to the Calypso card and the Calypso SAM, Keyple Plugin PC/SC add-on to provide the ability to manage PC/SC readers. In this guide Gradle is used as build automation tool, but it is easy to transpose these explanations to another tool such as Maven for example.\nSee here for the configuration of the dependencies.\nThe example can run on any machine: Linux, Windows and macOS. If not installed in your machine, you will need to download :\nJava 1.6+ Gradle We recommend that you use a Java IDE like Eclipse or Intellij IDEA to create your new Gradle project.\nCreate a Gradle-based empty project Create a new Java project and add the following statements to your build.gradle file to import the Keyple components into your project:\nplugins { id \u0026#39;java\u0026#39; } repositories { mavenCentral() } dependencies { // Import Keypop APIs implementation \u0026#39;org.eclipse.keypop:keypop-reader-java-api:2.0.1\u0026#39; implementation \u0026#39;org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2\u0026#39; // Import Keyple components implementation \u0026#39;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-service-java-lib:3.3.5\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.9\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.5.1\u0026#39; } If necessary, also create the usual tree in which the Java code of this guide will be placed, namely the folders: \\src\\main\\java\nLet’s code Now let’s see step by step how to create in one single class the elements that allow a certified reading of data through a Calypso secure session.\nIn a real ticketing application, the organization of the code would probably be different, but the point here is to show how Keyple makes it possible to perform very simply operations that normally require a quantity of code and knowledge that far exceeds what is implemented here.\nYou can either progressively copy each of the small portions of code that follow or copy the whole class at the bottom of this page.\nCreate the class skeleton Copy the source code below in a new Java Class named DemoCardAuthentication.\nimport org.eclipse.keyple.card.calypso.CalypsoExtensionService; import org.eclipse.keyple.card.calypso.crypto.legacysam.LegacySamExtensionService; import org.eclipse.keyple.core.service.Plugin; import org.eclipse.keyple.core.service.SmartCardService; import org.eclipse.keyple.core.service.SmartCardServiceProvider; import org.eclipse.keyple.plugin.pcsc.PcscPluginFactoryBuilder; import org.eclipse.keyple.plugin.pcsc.PcscReader; import org.eclipse.keypop.calypso.card.CalypsoCardApiFactory; import org.eclipse.keypop.calypso.card.WriteAccessLevel; import org.eclipse.keypop.calypso.card.card.CalypsoCard; import org.eclipse.keypop.calypso.card.card.CalypsoCardSelectionExtension; import org.eclipse.keypop.calypso.card.transaction.ChannelControl; import org.eclipse.keypop.calypso.card.transaction.SymmetricCryptoSecuritySetting; import org.eclipse.keypop.calypso.crypto.legacysam.LegacySamApiFactory; import org.eclipse.keypop.calypso.crypto.legacysam.sam.LegacySam; import org.eclipse.keypop.reader.CardReader; import org.eclipse.keypop.reader.ReaderApiFactory; import org.eclipse.keypop.reader.selection.*; public class DemoCardAuthentication { // The names of the readers must be adapted to the actual configuration. private static final String CARD_READER_NAME = \u0026#34;ASK LoGO 0\u0026#34;; private static final String SAM_READER_NAME = \u0026#34;Identive CLOUD 2700 R Smart Card Reader 0\u0026#34;; private static final String AID = \u0026#34;315449432E49434131\u0026#34;; // Keyple test kit profile 1, Application 2 private static final int RECORD_NUMBER_1 = 1; private static final byte SFI_ENVIRONMENT_AND_HOLDER = (byte) 0x07; public static void main(String[] args) { // ... } } Retrieve the main services and factories The SmartCardService is used to register the plugins and check the extensions. The ReaderApiFactory creates the classes needed to manage the card selection.\n// Get the instance of the SmartCardService SmartCardService smartCardService = SmartCardServiceProvider.getService(); // Get the ReaderApiFactory ReaderApiFactory readerApiFactory = smartCardService.getReaderApiFactory(); Set up the PC/SC plugin The first step to use Keyple is to initialize the plugin and smart card readers.\nIn this snippet the PC/SC plugin is registered to the SmartCardService.\nTwo readers needs to be connected to the local machine. …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1757497550,"objectID":"c1ed76ce001dc59ac73c503c92f61022","permalink":"https://keyple.org/learn/build-your-first-app/java-app/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/build-your-first-app/java-app/","section":"learn","summary":"This quick start describes how to create a ready-to-execute Java command-line application that runs a simple transaction based on a Calypso portable object involving two smart card readers.","tags":null,"title":"Build your first Java application","type":"book"},{"authors":null,"categories":null,"content":"\nThis page describes the core elements of Keyple, i.e. the concepts and APIs that are used to build any application implementing Keyple.\nIt is essential for the future user of Keyple to be familiar with what is said in this chapter.\nReader Keyple’s primary goal being to interact with smart cards (or smartphones) held by individuals, it is logical to put the Reader at the top of Keyple’s concepts.\nIndeed, it is through the reader interfaces that all interactions with the smart cards will take place, either directly via the Keyple Service or using a card extension (such as Keyple Calypso card extension add-on for example).\nThese interfaces provide the means to\nidentify the underlying physical reader, manage communication protocols, detect the presence and communicate with smart cards. The reader concept also applies to the hardware interfaces used to communicate with security elements such as SAMs (Secure Access Modules), which are sometimes integrated into devices and the virtual interfaces represented by the remote implementations.\nTo define the interface between an application and a reader, Keyple relies on the Keypop Reader API based on the standard Terminal API specifications proposed by Calypso Networks Association and thus inherits an existing modeling effort.\nAnother benefit of using this terminal API is the ability to certify the functioning of a Keyple terminal via the associated certification process.\nThis certification provides a guarantee that the terminal will function as expected.\nPlugin In Keyple terminology, a plugin is an add-on that allows the management of readers of a certain type. The plugin is responsible for informing the application about the availability of readers. The readers of the same plugin are usually hardware linked to the same physical interface.\nDepending on its profile, an application may use different types of plugins to communicate with the different elements it needs (card, SAM).\nCard extension A card extension is an add-on that provides high-level access to the features of a particular card technology.\nTwo card extensions are provided natively by the Keyple project:\na generic card extension providing basic means to communicate with a card, a Calypso card extension providing high-level access to Calypso card features. It includes a Secure Session based transaction manager involving Calypso cards and SAMs. Smart card service This is the main service of Keyple that concentrates the knowledge of active plugins and readers and provides card selection managers.\nAt startup, a Keyple application must register the add-ons (plugins and card extensions) it uses.\nObservation The concept of observation applies to certain types of readers and plugins.\nIt consists in monitoring changes such as reader connection/disconnection or card insertion/removal and informing the observing application through a dedicated interface.\nNot all plugins and readers are observable and for those which are, the observation is optional.\nSelection The Keyple selection concept is derived from the application selection defined by the ISO7816-4 standard.\nIt supplements it by managing cards that do not have the standard command using identification mechanisms based on power-on data and communication protocol, and also by allowing the execution of commands immediately following application selection or detection.\nThis principle optimizes the processing by allowing the application to elaborate advanced card discovery requests.\nSeveral targets can be defined by the application according to the different customer cards expected within a selection scenario.\nThe selection scenario principle consists in providing a set of selection cases corresponding to the expected cards and receiving a selection result containing not only the card identification but also the result of all additional commands that the application will have attached.\nThe Keyple card selection process is generic, allowing the management of cards of different types or technologies within the same application.\nSmart card The Keyple smart card is an object representation of the physical card.\nIt is built by the specific card extension used (e.g. Keyple Calypso) and is provided to the user by the card selection service.\nProtocol At the time of selection, Keyple offers the possibility to distinguish cards by their communication protocol.\nIn order to associate a type of protocol (or card technology), Keyple proposes the concept of configurable reader with a method allowing to associate a protocol identifier known by the reader (name of the physical protocol) and another one known by the application (name of the logical protocol).\nA configurable reader plugin is responsible for providing a means of identifying the protocol and names each protocol it supports.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715001188,"objectID":"f15b055c274c840753dd4baf098df1cd","permalink":"https://keyple.org/learn/overview/key-concepts/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/overview/key-concepts/","section":"learn","summary":"Understand the concepts behind Keyple.","tags":null,"title":"The Keyple key concepts","type":"book"},{"authors":null,"categories":null,"content":"\nOverview This guide is intended to help developers who want to create a Keyple reader plugin add-on for a specific device.\nOperating mode Learn the plugin architecture concepts Select the predefined features that meet your need Define specific features (optional) Implement the solution Plugin architecture A Keyple reader plugin consists of three objects, a plugin factory, a plugin and a reader, which meet the following interface specifications:\nCommon API: public contract containing only generic types common to all plugins. Plugin API: private contract based on two types of interfaces: API (Application Programming Interface): interface implemented by Keyple Service and directly usable by the plugin code. SPI (Service Provider Interface): interface to be implemented by the plugin and directly used by Keyple Service. Plugin Storage Card API (optional): private contract that may be involved when interactions with storage cards are required, in order to rely on an APDU interpreter. It is also based on two types of interfaces: API (Application Programming Interface): interface implemented by the plugin and directly usable by the APDU interpreter, allowing the interpreter to call back into the plugin to handle specific behaviors required during storage card interactions. SPI (Service Provider Interface): interface to be implemented by the APDU interpreter and directly usable by the plugin, allowing the plugin to invoke interpreter functions for storage card operations. The component diagram below illustrates the internal API/SPI links between the plugin and Keyple Service, as well as the public APIs exposed to the application:\nSelect predefined features The diagram below helps you to determine exactly which interfaces to implement according to the characteristics of the reader: The XxxPluginFactory, XxxPlugin and XxxReader interfaces must be created. They are specific to the plugin Xxx to be created but can remain empty if there is no specific feature. Define specific features Depending on the characteristics of the reader, it may be necessary to add in the specific APIs configuration methods appropriate to the technical context.\nThese features can be exposed at three levels:\nIn the plugin factory (XxxPluginFactory interface), for the initial configuration of the plugin (e.g. set custom plugin name). In the plugin (XxxPlugin interface), for dynamic configurations that can be applied to all the readers (e.g. put the readers in sleep mode).\nThe API will then be directly accessible from the application through the getExtension(...) method of the plugin registered with Keyple Service. In the reader (XxxReader interface), for dynamic configurations specific to each reader (e.g. activate/deactivate a LED).\nThe API will then be directly accessible from the application through the getReaderExtension(...) method of the reader provided by the plugin registered with Keyple Service. Implement the solution It is recommended to hide the internal Keyple interfaces of the Plugin API from the application. For this purpose, it is suggested to respect the following programming pattern based on the use of:\npublic interfaces, private interfaces adapters (package visibility) accessible from a public provider/builder. It is possible to use other alternatives to the factory provider depending on the need. For example, if the plugin factory needs to expose specific configuration methods, it is recommended to use the builder pattern instead of the provider pattern in order to get a properly initialized factory. Thus, the factory does not expose any method. API Keyple Common API Keyple Plugin API Keyple Plugin Storage Card API Download Java components ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1756737424,"objectID":"25e4a51c408d2c72488dc9bce481ce98","permalink":"https://keyple.org/learn/developer-guide/reader-plugin-add-on/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/developer-guide/reader-plugin-add-on/","section":"learn","summary":"How to develop an add-on to handle a specific hardware device.","tags":null,"title":"Reader Plugin Add-on Developer Guide","type":"book"},{"authors":null,"categories":null,"content":"\nOverview A standalone application is an application that runs in a device in contact with the end user.\nIt has at least one local smart card reader and manages itself the interaction with the user.\nThe diagram below illustrates the organization of a standalone application based on Keyple: Operating mode If you are new to Keyple, read the key concepts page and familiarize yourself with the fundamentals behind Keyple. Access to the smart card service Set up a plugin Set up a reader Select a card Perform a transaction The smart card service As part of Keyple Service component, the smart card service is the main service of Keyple. Its role is to centralize the add-on resources and to manage their life cycle.\nThe service is accessible by calling the SmartCardServiceProvider.getService() static method.\nSmartCardService smartCardService = SmartCardServiceProvider.getService(); Set up a plugin The Keyple application developer will choose the reader plugins he needs according to the equipment on which the Keyple application will run.\nFor example, if the environment is PC-based, the PC/SC plugin will probably, but not necessarily, be chosen. For an Andoid terminal environment, the plugin could be the standard Android NFC plugin or one of the plugins available from the industrial partners of the project.\nFor a complete list of available plugins, please see the standard reader plugins or one of our partners reader plugins.\nA new plugin can also be created if there is no plugin for the intended hardware. Access to a plugin To access a plugin at the application level, it must first be registered with the smart card service via the registerPlugin(...) method. It will be necessary to provide an implementation of the KeyplePluginExtensionFactory interface. This factory is provided by the API of the used plugin.\nDepending on the capabilities of the hardware, the plugin factory may or may not offer specific configuration options. Please refer to the API of the plugin component you are considering to see what is appropriate for your application.\nThe registration provides in return an implementation of one of the Plugin, ObservablePlugin or PoolPlugin interfaces depending on the type of target plugin.\nA plugin is identified by a unique name in the system so that it can be retrieved at any time from the smart card service. // Here is for example the registration of the PC/SC plugin Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build()); Configure a plugin Some plugin types may offer specific options.\nStatic options are usually directly exposed by the plugin factory API while dynamic options are exposed by the plugin extension API.\nTo access the plugin extension it is necessary to call the getExtension(...) method on the registered Plugin by specifying the expected class of the extension which must extends the KeyplePluginExtension interface. After that, the dedicated methods are available from the resulting object.\n// Here is a snippet showing the usage of the extension of the Stub plugin plugin .getExtension(StubPlugin.class) .unplugReader(\u0026#34;READER_1\u0026#34;); Monitor a plugin The plugin monitoring only applies to hardware environments in which the readers are removable. Moreover, only plugins of type ObservablePlugin can be monitored. The observation of reader connections and disconnections is achieved through a background task managed by Keyple Service.\nTo enable these observation mechanisms, it is imperative to provide:\na plugin observer implementing the PluginObserverSpi interface to be notified of plugin events, an exception handler implementing the PluginObservationExceptionHandlerSpi interface to be notified of errors that may occur during the monitoring or events notifications. These two interfaces are available in the org.eclipse.keyple.core.service.spi package of the Keyple Service component.\nHere is an example of a plugin observer class including an exception handler:\nclass PluginObserver implements PluginObserverSpi, PluginObservationExceptionHandlerSpi { @Override public void onPluginEvent(PluginEvent event) { switch (event.getEventType()) { case READER_CONNECTED: // here the processing to be done when a reader is connected ... break; case READER_DISCONNECTED: // here the processing to be done when a reader is disconnected ... break; default: break; } } @Override public void onPluginObservationError(String pluginName, Throwable e) { // handle here the plugin exceptions raised while observing the readers ... } } In order to access the dedicated setters, the plugin has to be cast to ObservablePlugin.\nSince adding an observer will cause the Keyple Service to check for the presence of an exception handler, the definition of the exception handler must be done first.\nPluginObserver pluginObserver = new PluginObserver(); ((ObservablePlugin) plugin).setPluginObservationExceptionHandler(pluginObserver); ((ObservablePlugin) plugin).addObserver(pluginObserver); Note that the monitoring thread …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748333675,"objectID":"e77ca063ee6572d6bf15d5656980094d","permalink":"https://keyple.org/learn/user-guide/standalone-application/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/standalone-application/","section":"learn","summary":"How to develop an end-user standalone application.","tags":null,"title":"Standalone Application User Guide","type":"book"},{"authors":null,"categories":null,"content":"\nOverview The development of an Android application based on Keyple follows the same principles as those exposed in the Java part.\nHowever, this guide points out the specificities of this environment based on the Android NFC application example provided in the keyple-java-example repository.\nWe recommend that Android application developers clone this example to better understand how Keyple works on Android.\nThe application available in the example repository requires:\na retail Device with NFC powered by android.nfc library (integrated into standard Android SDK), Android OS 19+, a Calypso card (contactless smart card, NFC mobile phone with a Calypso applet or application). It uses three main components of Keyple:\nKeyple Service Java Library which is the base component to which all the others refer, Keyple Card Generic add-on to handle the commands sent to the Calypso card, Keyple Plugin Android NFC add-on to provide the ability to drive the NFC reader. Gradle is used as build automation tool, but it is easy to transpose these explanations to another tool such as Maven for example.\nProject setup The dependencies to be imported into the project are accessible with the configuration wizard.\nDepending on the nature of the hardware resources required, it is necessary to declare certain permissions in the project manifest file. In the case of the Android NFC example, access to NFC functions is declared as follows: \u0026lt;manifest xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; ... \u0026lt;uses-permission android:name=\u0026#34;android.permission.NFC\u0026#34; /\u0026gt; \u0026lt;uses-feature android:name=\u0026#34;android.hardware.nfc\u0026#34; android:required=\u0026#34;true\u0026#34; /\u0026gt; ... \u0026lt;application ...\u0026gt; ... \u0026lt;activity ... \u0026gt; ... \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.nfc.action.TECH_DISCOVERED\u0026#34; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;meta-data android:name=\u0026#34;android.nfc.action.TECH_DISCOVERED\u0026#34; android:resource=\u0026#34;@xml/tech_list\u0026#34; /\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;/application\u0026gt; \u0026lt;/manifest\u0026gt; You will have to adapt this section according to the reader plugin used.\nFocus on Keyple specific code ... class MainActivity : AppCompatActivity(), CardReaderObserverSpi, CardReaderObservationExceptionHandlerSpi { private lateinit var reader: ObservableCardReader private lateinit var cardSelectionManager: CardSelectionManager private val readerApiFactory: ReaderApiFactory = SmartCardServiceProvider.getService().readerApiFactory private var calypsoExtensionService = CalypsoExtensionService.getInstance() private val calypsoCardApiFactory: CalypsoCardApiFactory = calypsoExtensionService.getCalypsoCardApiFactory() override fun onCreate(savedInstanceState: Bundle?) { ... // Retrieve the NFC reader val plugin = SmartCardServiceProvider.getService() .registerPlugin(AndroidNfcPluginFactoryProvider.provideFactory(AndroidNfcConfig(this))) reader = plugin.getReader(AndroidNfcConstants.READER_NAME) as ObservableCardReader reader.setReaderObservationExceptionHandler(this) reader.addObserver(this) (reader as ConfigurableCardReader).activateProtocol( AndroidNfcSupportedProtocols.ISO_14443_4.name, \u0026#34;ISODEP\u0026#34;) ... // Configure the card selection cardSelectionManager = readerApiFactory.createCardSelectionManager() // Create a generic ISO selector val cardSelector = readerApiFactory.createIsoCardSelector().filterByDfName(CalypsoConstants.KEYPLE_KIT_AID) // Create a specific Calypso card selection extension val calypsoCardSelectionExtension = calypsoCardApiFactory.createCalypsoCardSelectionExtension().acceptInvalidatedCard() cardSelectionManager.prepareSelection(cardSelector, calypsoCardSelectionExtension) ... // Start the card detection cardSelectionManager.scheduleCardSelectionScenario( reader, ObservableCardReader.NotificationMode.ALWAYS) reader.startCardDetection(ObservableCardReader.DetectionMode.REPEATING) ... } override fun onDestroy() { ... SmartCardServiceProvider.getService().unregisterPlugin(AndroidNfcConstants.PLUGIN_NAME) } override fun onReaderEvent(readerEvent: CardReaderEvent?) { CoroutineScope(Dispatchers.Main).launch { readerEvent?.let { event -\u0026gt; when (event.type) { CardReaderEvent.Type.CARD_INSERTED -\u0026gt; { // handle card inserted event ... reader.finalizeCardProcessing() } CardReaderEvent.Type.CARD_MATCHED -\u0026gt; { // handle card matched event ... reader.finalizeCardProcessing() } CardReaderEvent.Type.CARD_REMOVED -\u0026gt; { // handle card removed event ... } else -\u0026gt; { // Handle other event types if necessary } } } ... } } override fun onReaderObservationError(contextInfo: String?, readerName: String?, e: Throwable?) { // Handle the error ... } } FAQ How to fix “More than one file was found with OS independent path ‘META-INF/NOTICE.md’”. Add lines below to your :app build.gradle file\nandroid { packagingOptions { exclude \u0026#39;META-INF/NOTICE.md\u0026#39; } } ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1739205929,"objectID":"3809efcf55808c5f84377d047bfb6fb4","permalink":"https://keyple.org/learn/build-your-first-app/android-app/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/build-your-first-app/android-app/","section":"learn","summary":"This guide describes how to start a ticketing application using Keyple and Android NFC plugin to read the content of a Calypso card.","tags":null,"title":"Build your first Android application","type":"book"},{"authors":null,"categories":null,"content":"\nKeyple is designed to operate exchanges with secure data media such as smart cards, tags or smartphones.\nKeyple is as much as possible agnostic towards the secured media as towards the hardware allowing to communicate with them.\nIn order to achieve these objectives Keyple consists of a central core to which can be attached add-ons providing solutions to the specific needs of the targeted application. The core provides the basic services for registering add-ons and also provides generic interfaces independent of card and reader technologies.\nAdd-ons are organized into four categories:\nCard extensions, offering high-level interfaces for managing exchanges between an application and a particular card technology. Reader plugins, which interface with the hardware through unified APIs. Distributed libraries to manage readers remotely. Additional services such as the dynamic allocation of card resources. The diagram below shows an overview of the Keyple layers:\nKeyple architecture layers overview ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1706617429,"objectID":"e451adcae425bf2919440a472b6744d6","permalink":"https://keyple.org/learn/overview/architecture/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/overview/architecture/","section":"learn","summary":"Overall presentation of the Keyple architecture.","tags":null,"title":"Architecture","type":"book"},{"authors":null,"categories":null,"content":"\nOverview This guide is intended to help developers who want to create a Keyple card extension add-on for a specific card technology.\nOperating mode Learn the card extension architecture concepts Take note of the minimal requirements Define the card commands Implement the solution Card extension architecture A Keyple card extension contains a set of objects which meet the following three interface specifications:\nCommon API: public contract including a generic type common to all card extensions. Keypop Reader API: public contract provided by the Eclipse Keypop project including two specific interfaces to be implemented by the card extension and required by the card selection manager. Keypop Card API: private contract provided by the Eclipse Keypop project based on two types of interfaces: API (Application Programming Interface): interface implemented by Keyple Service and directly usable by the card extension code. SPI (Service Provider Interface): interface to be implemented by the card extension and directly used by Keyple Service. The component diagram below illustrates the internal API/SPI links between the card extension and Keyple Service, as well as the public APIs exposed to the application: Minimal requirements The table below lists the objects that must be created and indicates the interfaces to be implemented for each of them:\nObject Common API Keypop Reader API Keypop Card API Card extension service KeypleCardExtension Card selection parser CardSelectionExtension CardSelectionExtensionSpi Smart card object SmartCard or IsoSmartCard SmartCardSpi Card selection request DTO CardSelectionRequestSpi Card request DTO CardRequestSpi APDU request DTO ApduRequestSpi In the case where the smart card object has fields of type interface, it will then be necessary to define for each of them and recursively a JSON deserializer and register it during the service initialization with the method JsonUtil.registerTypeAdapter(...) provided by the Keyple Util library.\nThis will allow the transport of this object through the network when using the Keyple Distributed solution.\nDefine the card commands The card extension takes part in the communication with the card in two ways:\nimplicitly, when the card is being selected, which is done directly by the application via the Keyple Service selection manager; explicitly, when the card has been selected, on request of the application, by direct use of the APIs exposed by the Card API. For explicit communication, the card extension must require the application to provide a reference to a CardReader of the Reader API. This can then be cast internally to a ProxyReaderApi of the Card API through which it will be possible to transmit card commands.\nEach card extension is free to define the APIs it considers relevant to perform card transactions.\nImplement the solution It is recommended to hide the internal interfaces of the Keypop Card API from the application. For this purpose, it is suggested to respect the following programming pattern based on the use of:\npublic interfaces, private interfaces adapters (package visibility) not accessible from a public service. API Keyple Common API Keypop Reader API Keypop Card API Download Java components ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1756737424,"objectID":"b7677d71ff4e99ab19423e5f98a625d9","permalink":"https://keyple.org/learn/developer-guide/card-extension-add-on/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/developer-guide/card-extension-add-on/","section":"learn","summary":"How to develop an add-on to manage a specific type of card.","tags":null,"title":"Card Extension Add-on Developer Guide","type":"book"},{"authors":null,"categories":null,"content":"\nOverview Keyple provides the Keyple Distributed solution which allows an application to communicate with a smart card reader interfaced with another host.\nIn this way, you can manage transactions seamlessly within a distributed architecture.\nThe Keyple Distributed solution can be deployed in two ways:\nboth client and server embed Keyple middleware, only the server embeds Keyple middleware, the client has its own libraries to communicate with its card reader. The diagram below illustrates the first way, the use of the Keyple Distributed components when both client and server embed Keyple middleware (note that the card reader can be either client-side or server-side):\nKeyple on both client and server sides The diagram below illustrates the second way, the architecture with a client not running Keyple but connected to a Keyple-based server:\nKeyple on server side only User guides How to build a full Keyple distributed application How to make a non-Keyple client interact with a Keyple-based server application Full Keyple distributed application Steps:\nIn pre-requisite, read Standalone Application User Guide to understand the main concepts of Keyple in a standalone application. Learn main terms and concepts of the Keyple Distributed solution. Find your usage mode. This will help you to determine exactly which library and API to use. Import into your project the libraries specified by your usage mode. Implement the transport layer adapted to your network configuration. Implement your ticketing services as specified in the associated usage mode. Concepts Here are the main concepts to keep in mind before continuing to read this user guide:\nConcept Description Remote Lib This is the keyple-distributed-remote-java-lib library.\nIt must be imported and used by the application installed on the host not having local access to the smart card reader and that wishes to interact with the reader remotely. Local Lib This is the keyple-distributed-local-java-lib library.\nIt must be imported and used by the application installed on the host having local access to the smart card reader but wishes to delegate all or part of the ticketing processing to a remote application. Network Lib This is the keyple-distributed-network-java-lib library.\nIt must always be imported because it contains the network elements used by Remote Lib and Local Lib. Remote Plugin Part of the Remote Lib, this is a Keyple reader plugin extension which provides only Remote Readers to the application. It manages data exchanges with the Local Service. This reader plugin extension must be registered to the smart card service like any Keyple reader plugin. Remote Reader Part of the Remote Lib, this is a Keyple reader extension which has some specificities:\n- each remote reader is connected to a local reader;\n- any command sent by the application to a remote reader will be forwarded to the associated local reader;\n- in some cases only, an event occurring on a local reader or plugin will be automatically forwarded to the associated remote reader or plugin. Local Service Part of the Local Lib, this is a Keyple distributed local service extension which ensures data exchange between the Remote Plugin and local plugins and readers. It must be registered to the smart card service. Factory Remote Plugin and Local Service each have a specific factory class to initialize them. Node Remote Plugin and Local Service each are bind to a specific internal node which is responsible for the interfacing with the Network Endpoint. Network Endpoint At the user’s charge, this component ensures the network exchanges between the Remote Plugin and Local Service nodes. The diagram below illustrates the main functional concepts through a standard use case:\nConcepts - Main use case The second diagram below illustrates an arbitrary more complex possible use case with several hardware readers connected to different hosts.\nThese could be for example a ticketing reloading service, where the business logic would be on the host without local readers, with thin clients on A \u0026amp; B hosts communicating locally with the cards.\nIn this use case, the Keyple Distributed solution is use for card communication.\nConcepts - One remote plugin connected to many local services Here is another example, but this time it illustrates several remote plugins connected to the same local service.\nThese could be for example ticketing terminals with transaction logic, which communicate locally with cards, but which do not have SAM, and which use a SAM server with hardware reader.\nIn this use case, the Keyple Distributed solution is use for SAM communication.\nConcepts - Many remote plugins connected to one local service Usage modes The Keyple Distributed solution offers two different usage modes, each one having a specific API designed on a Client-Server model:\nUsage mode Description Reader Client Side Allows a server application to interact with a smart card reader available on a client (e.g. Card reader). Reader Server …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748012651,"objectID":"8a904b9f9936e7ea56be3cfe5bc9e243","permalink":"https://keyple.org/learn/user-guide/distributed-application/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/distributed-application/","section":"learn","summary":"How to develop an end-user application using network communications.","tags":null,"title":"Distributed Application User Guide","type":"book"},{"authors":null,"categories":null,"content":" This page is still under construction and may contain inaccurate information. Overview This quick start describes how to create a ready-to-execute command-line application that runs a simple transaction based on a Calypso Card involving two smart card readers.\nThe demonstration application created for this quick start requires:\na Calypso Card (contactless smart card, NFC mobile phone with a Calypso applet or application), a Calypso SAM (Secure Access Module). We will use three main components of Keyple:\nKeyple Service C++ Library which is the base component to which all the others refer, Keyple Card Calypso C++ Library add-on to handle the commands sent to the Calypso card and the Calypso SAM, Keyple Plugin PC/SC C++ Library add-on to provide the ability to manage PC/SC readers. Prerequisites\nHere are the prerequisites to build the keyple components (dynamic libraries):\nG++ 6 and higher, MSVC++ 14 (other compilers untested) CMake libpcsclite1 and libpcsclite-dev packages installed (Linux) to build the PC/SC plugin In this guide, the Keyple components and application are build under Linux using CMake as build automation tool.\nCreate the build environment The building of all the necessary components is facilitated by a dedicated “meta-project” allowing to get all the components and dependencies in a single step.\nGit checkout the meta project into a directory of you local disk, then enter the created directory and execute the following commands:\nmkdir build cd build cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain/gcc-linux.cmake .. make gcc-linux may be replaced by one of the build configurations available here. Let’s code Now let’s see step by step how to create in one single class the elements that allow a certified reading of data through a Calypso secure session.\nIn a real ticketing application, the organization of the code would probably be different, but the point here is to show how Keyple makes it possible to perform very simply operations that normally require a quantity of code and knowledge that far exceeds what is implemented here.\nYou can either progressively copy each of the small portions of code that follow or copy the whole class at the bottom of this page.\nCreate a directory dedicated to the application cd .. mkdir app cd app We assume here that the current directory was the previously created build directory.\nCreate a file named CMakeLists.txt with the following content: SET(CALYPSONET_CALYPSO_DIR \u0026#34;../../calypsonet-terminal-calypso-cpp-api\u0026#34;) SET(CALYPSONET_CARD_DIR \u0026#34;../../calypsonet-terminal-card-cpp-api\u0026#34;) SET(CALYPSONET_READER_DIR \u0026#34;../../calypsonet-terminal-reader-cpp-api\u0026#34;) SET(KEYPLE_CALYPSO_DIR \u0026#34;../../keyple-card-calypso-cpp-lib\u0026#34;) SET(KEYPLE_COMMON_DIR \u0026#34;../../keyple-common-cpp-api\u0026#34;) SET(KEYPLE_PLUGIN_DIR \u0026#34;../../keyple-plugin-cpp-api\u0026#34;) SET(KEYPLE_PCSC_DIR \u0026#34;../../keyple-plugin-pcsc-cpp-lib\u0026#34;) SET(KEYPLE_SERVICE_DIR \u0026#34;../../keyple-service-cpp-lib\u0026#34;) SET(KEYPLE_UTIL_DIR \u0026#34;../../keyple-util-cpp-lib\u0026#34;) SET(KEYPLE_CALYPSO_LIB \u0026#34;keyplecardcalypsocpplib\u0026#34;) SET(KEYPLE_PCSC_LIB \u0026#34;keyplepluginpcsccpplib\u0026#34;) SET(KEYPLE_SERVICE_LIB \u0026#34;keypleservicecpplib\u0026#34;) SET(KEYPLE_UTIL_LIB \u0026#34;keypleutilcpplib\u0026#34;) INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/src/main/common ${CMAKE_CURRENT_SOURCE_DIR}/src/main/spi ${CALYPSONET_CALYPSO_DIR}/src/main ${CALYPSONET_CALYPSO_DIR}/src/main/card ${CALYPSONET_CALYPSO_DIR}/src/main/sam ${CALYPSONET_CALYPSO_DIR}/src/main/transaction ${CALYPSONET_CARD_DIR}/src/main ${CALYPSONET_CARD_DIR}/src/main/spi ${CALYPSONET_READER_DIR}/src/main ${CALYPSONET_READER_DIR}/src/main/selection ${CALYPSONET_READER_DIR}/src/main/selection/spi ${CALYPSONET_READER_DIR}/src/main/spi ${KEYPLE_CALYPSO_DIR}/src/main ${KEYPLE_CARD_DIR}/src/main ${KEYPLE_COMMON_DIR}/src/main ${KEYPLE_PCSC_DIR}/src/main ${KEYPLE_PLUGIN_DIR}/src/main ${KEYPLE_PLUGIN_DIR}/src/main/spi ${KEYPLE_PLUGIN_DIR}/src/main/spi/reader ${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/ ${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/insertion ${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/processing ${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/removal ${KEYPLE_RESOURCE_DIR}/src/main ${KEYPLE_RESOURCE_DIR}/src/main/spi ${KEYPLE_SERVICE_DIR}/src/main ${KEYPLE_SERVICE_DIR}/src/main/cpp ${KEYPLE_SERVICE_DIR}/src/main/spi ${KEYPLE_STUB_DIR}/src/main ${KEYPLE_UTIL_DIR}/src/main ${KEYPLE_UTIL_DIR}/src/main/cpp ${KEYPLE_UTIL_DIR}/src/main/cpp/exception ${KEYPLE_UTIL_DIR}/src/main/protocol ) IF(APPLE OR UNIX) SET(THREAD_LIB pthread) ELSE() ENDIF(APPLE OR UNIX) SET(USECASE1 UseCase1_ExplicitSelectionAid) SET(USECASE1_STUB ${USECASE1}_Stub) ADD_EXECUTABLE(${USECASE1_STUB} ${CMAKE_CURRENT_SOURCE_DIR}/src/main/common/CalypsoConstants.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/main/common/StubSmartCardFactory.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/main/${USECASE1}/Main_ExplicitSelectionAid_Stub.cpp) TARGET_LINK_LIBRARIES(${USECASE1_STUB} ${KEYPLE_CARD_LIB} ${KEYPLE_STUB_LIB} ${KEYPLE_SERVICE_LIB} …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"8c80269a49e13a1d6fb880d95fc68e9b","permalink":"https://keyple.org/learn/build-your-first-app/cpp-app/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/build-your-first-app/cpp-app/","section":"learn","summary":"This quick start describes how to create a ready-to-execute C++ command-line application that runs a simple transaction based on a Calypso portable object involving two smart card readers.","tags":null,"title":"Build your first C++ application","type":"book"},{"authors":null,"categories":null,"content":"\nKeyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.\nThis compliance allows Keyple to obtain certifications from the Calypso Networks Association. It is a guarantee of reliability and reproducibility of the processes implemented on a variety of devices.\nThe open source Eclipse Keypop project exposes the Terminal API specifications in the form of Java and C++ interfaces, and Keyple is based on these interfaces.\nKeyple also defines additional public interface for plugin integration, remote reader management, etc.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715001188,"objectID":"df368e51c06d2a3ea923c6d8c901a27a","permalink":"https://keyple.org/learn/overview/keypop-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/overview/keypop-api/","section":"learn","summary":"Keyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.","tags":null,"title":"Keypop API","type":"book"},{"authors":null,"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748012651,"objectID":"bcbe29d1ab6efcc193cd1f3bc01f23fd","permalink":"https://keyple.org/learn/user-guide/non-keyple-client/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/non-keyple-client/","section":"learn","summary":"How to connect a non-Keyple-based client application to a Keyple-based server application using simple JSON block exchanges.","tags":null,"title":"Non-Keyple Client User Guide","type":"book"},{"authors":null,"categories":null,"content":"\nOverview Keyple provides a card extension add-on dedicated to the Calypso® card technology.\nThis component allows operating commands with a Calypso card and to manage a secure Calypso transaction in a simple way. It completely hides the details of APDU orders that are sent to Calypso cards and SAMs, which are usually tedious operations.\nThe main features are:\nsupport for different card revisions; object mapping of card data structures; complete management of the secure session with SAMs; PIN code management; Stored Value operations management; card invalidation / rehabilitation. The diagram below illustrates the organization of a Calypso application based on Keyple: Operating mode Pre-requisites:\nHave a global view of Calypso product concepts (cards, SAM, security principles) Have read the Standalone Application User Guide to understand the main concepts of Keyple in a standalone application Access to the Calypso card extension service Select a card Set up the security settings (optional) Operate a card transaction The Calypso extension service As part of the Calypso card extension add-on, the Calypso extension service is the provider of the API implementations.\nThe service is accessible by calling the CalypsoExtensionService.getInstance() static method.\nCalypsoExtensionService calypsoExtensionService = CalypsoExtensionService.getInstance(); During initialization, it is recommended to check the extension with the smart card service to ensure the compatibility of the different libraries involved.\nIn case of incompatibility a warning will be produced in the log file.\nsmartCardService.checkCardExtension(calypsoExtensionService); Select a card In order to perform a transaction it is necessary to have selected the card first.\nTo do this, you must create a selection case for a selection scenario by calling the createCardSelection() method.\nIn addition to the filtering capabilities offered by Keyple Service, the Calypso Selection API allows you to add commands that will be sent to the card after a successful selection (the details of these features are described in the API documentation).\nThe resulting IsoSmartCard can be cast to a CalypsoCard object which concentrate all known information about the card being processed. Its content is dynamically updated during the transaction. The application will use it to get the data necessary for its business logic.\n// Create a card selection manager. CardSelectionManager cardSelectionManager = smartCardService.getReaderApiFactory().createCardSelectionManager(); // Create a card selection using the Calypso card extension. cardSelectionManager.prepareSelection( smartCardService.getReaderApiFactory() .createIsoCardSelector() .filterByDfName(AID), calypsoExtensionService.getCalypsoCardApiFactory() .createCalypsoCardSelectionExtension()); // Actual card communication: process the card selection. CardSelectionResult cardSelectionResult = cardSelectionManager.processCardSelectionScenario(cardReader); // Get the SmartCard resulting of the selection. CalypsoCard calypsoCard = (CalypsoCard) cardSelectionResult.getActiveSmartCard(); // Check the selection result. if (calypsoCard == null) { throw new IllegalStateException(\u0026#34;The card selection failed.\u0026#34;); } Set up security settings The security settings must be initialized only for secure transactions. The API offers several types of settings such as choosing the SAM to use, enabling various modes, specifying keys for legacy cards, etc… (see the API documentation for more information).\nIf the card transaction is to be secured using a symmetrical key cryptographic module (such as a SAM), it will be necessary to initialize a SymmetricSecuritySetting, associated with an implementation of the cryptographic module to be used (e.g. Calypso Crypto Legacy SAM Lib).\nThe SAM must first be selected via the Calypso Crypto Legacy SAM Lib.\nIn the case of the Card Resource Service, you have to create a profile extension, specifying the previously built selection case, and then associate it to a dedicated profile in the service (see the Card Resource Service User Guide).\nThe following snippet shows the selection of the SAM and the initialization of the security settings: // Create a SAM selection manager. CardSelectionManager samSelectionManager = readerApiFactory.createCardSelectionManager(); // Create a card selector without filer CardSelector\u0026lt;IsoCardSelector\u0026gt; cardSelector = readerApiFactory.createIsoCardSelector(); // Retrieve the Legacy SAM API factory LegacySamApiFactory legacySamApiFactory = LegacySamExtensionService.getInstance().getLegacySamApiFactory(); // Create a SAM selection using the Calypso Legacy SAM card extension. samSelectionManager.prepareSelection( cardSelector, legacySamApiFactory.createLegacySamSelectionExtension()); // SAM communication: run the selection scenario. CardSelectionResult samSelectionResult = samSelectionManager.processCardSelectionScenario(reader); // Check the selection result. if …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1742484070,"objectID":"1d609d9f8b83fb8096714c6553c2e185","permalink":"https://keyple.org/learn/user-guide/calypso-application/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/calypso-application/","section":"learn","summary":"How to develop an end-user application using the Calypso card extension add-on.","tags":null,"title":"Calypso Application User Guide","type":"book"},{"authors":null,"categories":null,"content":"\nOverview An application that performs secure transactions on smart cards may need to dynamically allocate a card resource dedicated to the current transaction to manage the security of the transaction (e.g. SAM or HSM).\nTo meet this need, Keyple proposes the Service Resource component which provides a service that supports dynamic card resource allocation, using a profile-based filtering mechanism.\nFeatures card resource locking during use; automatic monitoring of observable plugins and readers; customizable profile-based filtering mechanism (specific plugins list, reader name using regular expression, reader group name for pool plugins, specific card selection); specific reader configuration capability; allocation priority management; two allocation modes (blocking, non-blocking); multiple allocation strategies (first available card resource, cyclic, random); configurable allocation timeout; failure management. Operating mode Access to the service Access to the configurator Register plugins and/or pool plugins to be used Define profiles for card resource filtering Set the allocation mode (optional) Apply the configuration Start the service Allocate a resource Use the resource Release the used resource Access to the service Call the CardResourceServiceProvider.getService() static method to access the service.\nCardResourceService cardResourceService = CardResourceServiceProvider.getService(); Configure the service Access to the configurator Call the getConfigurator() method on the service to get a new instance of the service configurator. It is built on the fluent pattern, and it guides you through the various steps to be specified during the configuration process.\ncardResourceService.getConfigurator()... Register plugins If you plan to use plugins of type Plugin or ObservablePlugin in the card resource service, you must specify the global ordered list of plugins to be used when searching for a card resource.\nThis is the default list that will be applied for profiles that have not explicitly specified another list.\nPlease note that the order in which plugins are added is important.\nTo add one or more plugins, you need to create a new instance of the PluginsConfigurator class and provide it to the configurator using the withPlugins(...) method.\nIt is possible to configure the following:\nspecify the global allocation strategy to all added plugins; specify the global usage timeout of a resource; activate independently plugin by plugin the monitoring of the plugin and/or its readers in order to allow the service to automatically update the list of resources. In this case you will have to provide a handler to be informed in case of error or crash of the observation thread. For each plugin added, you will need to provide an implementation of the ReaderConfiguratorSpi interface to automatically configure new readers or those already connected.\n.withPlugins( PluginsConfigurator.builder() .withAllocationStrategy(...) .withUsageTimeout(...) .addPluginWithMonitoring(...) .addPlugin(...) .addPluginWithMonitoring(...) .build()) Register pool plugins If you plan to use plugins of type PoolPlugin in the card resource service, you must specify the global ordered list of pool plugins to be used when searching for a card resource.\nThis is the default list that will be applied for profiles that have not explicitly specified another list.\nPlease note that the order in which plugins are added is important. If you use both plugins and pool plugins in your configuration, it is possible to specify if pool plugins should be taken into account first or not during the resource allocation process.\nTo add one or more pool plugins, you need to create a new instance of the PoolPluginsConfigurator class and provide it to the configurator using the withPoolPlugins(...) method.\n.withPoolPlugins( PoolPluginsConfigurator.builder() .usePoolFirst() .addPoolPlugin(...) .addPoolPlugin(...) .build()) Define profiles A profile defines a set of filters which will be used when enumerating the available resources. The profile identifiers will be used when allocating a resource.\nTo add profiles, you must create a new instance of the CardResourceProfileConfigurator class for each profile and provide them to the configurator using the withCardResourceProfiles(...) method.\nIt is possible to configure the following:\noverride the global plugin list to use; set reader name filter using a regex value; set reader group reference filter in case of pool plugins. You also need to provide an implementation of the CardResourceProfileExtension interface in order to be able to customize the filtering if needed and to return to the service an implementation of the SmartCard interface when a compatible card is found. The SmartCard found will be returned to the user by the allocation process.\n.withCardResourceProfiles( CardResourceProfileConfigurator.builder(RESOURCE_A, yourCardResourceProfileExtensionA) .withReaderNameRegex(READER_NAME_REGEX_A) .build(), …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"90cca05980b207aa4a4b326e816d455c","permalink":"https://keyple.org/learn/user-guide/card-resource-service/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/card-resource-service/","section":"learn","summary":"How to develop an end-user application using the Card Resource Service.","tags":null,"title":"Card Resource Service User Guide","type":"book"},{"authors":null,"categories":null,"content":"\nThis guide is intended to help a user of a previous version of Keyple Java to upgrade his application to a new version of the library.\nUpgrade from:\n2.+ to 3.+ 1.+ to 2.+ Upgrade from “2.+” to “3.+” This major release follows the adoption of Keypop APIs in place of CNA Terminal APIs.\nWe recommend that you follow the steps below in the order suggested:\nUpdate the project dependencies management Perform a global text search \u0026amp; replace across the entire project Apply the changes to the card/SAM selection manager Apply the changes to the card transaction manager Apply the changes to the signatures management (PSO or basic) during card transactions Apply the changes to the SAM resource service All deprecated methods have been removed. If your project contains such methods, please check the changelogs for replacement methods. Dependencies management Replace the legacy Keyple dependencies with the latest versions. To do this, use the configuration wizard to correctly import the new artifacts into your project.\nRenaming Search and replace (in “case-sensitive” and “whole-word” mode) in the following order the following strings when present:\norg.calypsonet.terminal.calypso =\u0026gt; org.eclipse.keypop.calypso.card org.calypsonet.terminal =\u0026gt; org.eclipse.keypop card.sam =\u0026gt; crypto.legacysam.sam Reader =\u0026gt; CardReader ObservableReader =\u0026gt; ObservableCardReader ReaderEvent =\u0026gt; CardReaderEvent CalypsoSam =\u0026gt; LegacySam CardSelection =\u0026gt; CardSelectionExtension CalypsoApiProperties =\u0026gt; CalypsoCardApiProperties SamIOException =\u0026gt; CryptoIOException CalypsoCardSelection =\u0026gt; CalypsoCardSelectionExtension GenericCardSelection =\u0026gt; GenericCardSelectionExtension CardSecuritySetting =\u0026gt; SymmetricCryptoSecuritySetting createCardSecuritySetting =\u0026gt; createSymmetricCryptoSecuritySetting processCommands(true) =\u0026gt; processCommands(ChannelControl.CLOSE_AFTER) processCommands(false) =\u0026gt; processCommands(ChannelControl.KEEP_OPEN) processApdusToByteArrays(true) =\u0026gt; processApdusToByteArrays(ChannelControl.CLOSE_AFTER) processApdusToByteArrays(false) =\u0026gt; processApdusToByteArrays(ChannelControl.KEEP_OPEN) processApdusToHexStrings(true) =\u0026gt; processApdusToHexStrings(ChannelControl.CLOSE_AFTER) processApdusToHexStrings(false) =\u0026gt; processApdusToHexStrings(ChannelControl.KEEP_OPEN) createCardSelectionManager() =\u0026gt; getReaderApiFactory().createCardSelectionManager() createCardSelection() =\u0026gt; Calypso card extension: getCalypsoCardApiFactory().createCalypsoCardSelectionExtension() Generic card extension: createGenericCardSelectionExtension() createCardTransactionWithoutSecurity =\u0026gt; getCalypsoCardApiFactory().createFreeTransactionManager createSearchCommandData =\u0026gt; getCalypsoCardApiFactory().createSearchCommandData prepareComputeSignature =\u0026gt; getCryptoExtension(CardTransactionLegacySamExtension.class).prepareComputeSignature prepareVerifySignature =\u0026gt; getCryptoExtension(CardTransactionLegacySamExtension.class).prepareVerifySignature Card selection Prepare a Calypso card selection case 2.+ CalypsoCardSelection calypsoCardSelection = CalypsoExtensionService.getInstance().createCardSelection() .filterByDfName(...) .setFileOccurrence(...) .setFileControlInformation(...); cardSelectionManager.prepareSelection(calypsoCardSelection); 3.+ IsoCardSelector isoCardSelector = SmartCardServiceProvider.getService().getReaderApiFactory().createIsoCardSelector() .filterByDfName(...) .setFileOccurrence(...) .setFileControlInformation(...); CalypsoCardSelectionExtension calypsoCardSelectionExtension = CalypsoExtensionService.getInstance().getCalypsoCardApiFactory().createCalypsoCardSelectionExtension(); cardSelectionManager.prepareSelection(isoCardSelector, calypsoCardSelectionExtension); Prepare a Calypso SAM selection case 2.+ CalypsoSamSelection CalypsoSamSelection = CalypsoExtensionService.getInstance().createSamSelection() .filterByProductType(productType) .filterBySerialNumber(serialNumber); cardSelectionManager.prepareSelection(CalypsoSamSelection); 3.+ String powerOnDataFilter = LegacySamUtil.buildPowerOnDataFilter(productType, serialNumber); BasicCardSelector basicCardSelector = SmartCardServiceProvider.getService().getReaderApiFactory().createBasicCardSelector() .filterByPowerOnData(powerOnDataFilter); LegacySamSelectionExtension legacySamSelectionExtension = LegacySamExtensionService.getInstance().getLegacySamApiFactory().createLegacySamSelectionExtension(); cardSelectionManager.prepareSelection(basicCardSelector, legacySamSelectionExtension); Prepare a Generic card selection case 2.+ GenericCardSelection genericCardSelection = GenericExtensionService.getInstance().createCardSelection() .filterByDfName(...) .setFileOccurrence(...) .setFileControlInformation(...); cardSelectionManager.prepareSelection(genericCardSelection); 3.+ IsoCardSelector isoCardSelector = SmartCardServiceProvider.getService().getReaderApiFactory().createIsoCardSelector() .filterByDfName(...) .setFileOccurrence(...) .setFileControlInformation(...); GenericCardSelectionExtension genericCardSelectionExtension = …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"56853d0e63919fb1c6a457bbb88c848f","permalink":"https://keyple.org/learn/user-guide/migration-guide/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/user-guide/migration-guide/","section":"learn","summary":"How to upgrade an existing Keyple application using an earlier version.","tags":null,"title":"Upgrade from an earlier version of Keyple","type":"book"},{"authors":null,"categories":null,"content":"\nKeyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.\nThis compliance allows Keyple to obtain certifications from the Calypso Networks Association. It is a guarantee of reliability and reproducibility of the processes implemented on a variety of devices.\nThe open source Eclipse Keypop project exposes the Terminal API specifications in the form of Java and C++ interfaces, and Keyple is based on these interfaces.\nReader \u0026amp; Card APIs These two APIs standardize the way that a reader and a card interact. They are generic and apply to all card and reader technologies.\nThe Reader API must be used by developers of applications and card extensions, while the Card API must be used only by developers of card extensions.\nKeypop Reader API Keypop Card API Calypso APIs These high-level APIs standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc…).\nThese APIs should be used by developers of Calypso applications.\nKeypop Calypso Card API Keypop Calypso Crypto Legacy SAM API ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715001188,"objectID":"c38f3b7102ac1f03f7bacf3f514ea265","permalink":"https://keyple.org/components/standards-compliance/cna-terminal-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standards-compliance/cna-terminal-api/","section":"components","summary":"Keyple is compliant with the Terminal API specifications provided by the Calypso Networks Association that standardize how to manage cards, readers, reader events and card selection.","tags":null,"title":"CNA Terminal API","type":"book"},{"authors":null,"categories":null,"content":"\nThe dependencies between the Keyple components are shown in the diagram below:\nKey points:\nEach component has its own life cycle. There are two types of Keyple components: APIs and libraries. Some APIs are provided by the Eclipse Keypop open source project. APIs contain only interfaces. Libraries contain interfaces and their implementation. Some APIs are public while others are internal. All libraries are public. All libraries and public APIs can be used by the developer of the application. The internal APIs are intended for the developer of Keyple add-ons only (e.g. custom reader plugin, custom card extension or custom distributed solution). ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715001188,"objectID":"09cd9168c902ec3b1858eec4f6ea67fc","permalink":"https://keyple.org/components/overview/components-map/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/overview/components-map/","section":"components","summary":"General presentation of the dependencies between the different Keyple components.","tags":null,"title":"Components map","type":"book"},{"authors":null,"categories":null,"content":"\nInternal adapters (release) Service Card resource service Distributed Internal adapters (snapshot) Service Card resource service Distributed ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1703263968,"objectID":"1edfec56e9f96cf03cac91e0ce7dac73","permalink":"https://keyple.org/learn/keyple-in-depth/core-services/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/keyple-in-depth/core-services/","section":"learn","summary":"In-depth technical information about Keyple core services.","tags":null,"title":"Core services","type":"book"},{"authors":null,"categories":null,"content":"\nhttps://github.com/eclipse-keyple/keyple-java-example\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1706607522,"objectID":"798a1de4fc742cd845609bac031b4cc5","permalink":"https://keyple.org/learn/code-samples/java-example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/code-samples/java-example/","section":"learn","summary":"Code example involving the Keyple Java implementation.","tags":null,"title":"Java examples","type":"book"},{"authors":null,"categories":null,"content":"Coming from a rather closed technical environment, ticketing for transport is essentially based on proprietary solutions provided by manufacturers. However, in order for the concept of Mobility as a Service to become a reality, and at a reasonable cost, the ecosystem should, as far as possible, rely on open standards, APIs and middlewares as well as Open Source technologies. This openness has already been a reality for several years in the field of passenger information and has enabled the explosion of rich and high-quality applications, thanks in particular to Open Data. Today, Eclipse Keyple is paving the way for ticketing to follow the same path, by making available for free the first fully Open Source API.\nEclipse Keyple® accelerates the integration and development of ticketing applications by enabling multimodal transport services, public transport operators and event organizers to implement ticketing and access control systems based on a common, open and modular base.\nEclipse Keyple® works with Keyple’s extensions. The first available extension allows you to benefit from Calypso®’s main features of reliability, security and interoperability.\nEclipse Keyple® transforms complex contactless ticketing, transportation and event access systems into a simple integration to manage terminal readers and portals that use smart cards and mobile applications to enter and exit.\nAs an open source technology, Eclipse Keyple® offers uniformity of structure but does not lock you into a specific ticketing system. Plugins and extensions are being created, or may be created by developers, to allow ticket processing integrating technologies other than Calypso®, based on several programming languages.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"282cad7c0a4930ebfdb0d9b1b88c4a4b","permalink":"https://keyple.org/what-is-keyple/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/what-is-keyple/overview/","section":"what-is-keyple","summary":"Coming from a rather closed technical environment, ticketing for transport is essentially based on proprietary solutions provided by manufacturers. However, in order for the concept of Mobility as a Service to become a reality, and at a reasonable cost, the ecosystem should, as far as possible, rely on open standards, APIs and middlewares as well as Open Source technologies.","tags":null,"title":"Overview","type":"what-is-keyple"},{"authors":null,"categories":null,"content":"\nhttps://github.com/eclipse-keyple/keyple-cpp-example\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1706607522,"objectID":"b4c46eaf0a628558eab6c5b632c95f75","permalink":"https://keyple.org/learn/code-samples/cpp-example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/code-samples/cpp-example/","section":"learn","summary":"Code example involving the Keyple C++ implementation.","tags":null,"title":"C++ examples","type":"book"},{"authors":null,"categories":null,"content":"\nThe diagram below illustrates the sequence of exchanges and the grouping of APDU commands during a secure Calypso transaction:\nCalypso secure transaction ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1703263968,"objectID":"0746f13c4ba34c4d25ab11b2767c4086","permalink":"https://keyple.org/learn/keyple-in-depth/calypso-card-extension/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/keyple-in-depth/calypso-card-extension/","section":"learn","summary":"In-depth technical information about Keyple Calypso card extension add-on.","tags":null,"title":"Calypso card extension","type":"book"},{"authors":null,"categories":null,"content":"\nThis online tool generates for you the dependencies section of Gradle or Maven configuration files. Choose your project profile and copy/paste the generated result into your project dependency manager.\nWhat type of Keyple component are you working on?\nAn application A specific reader plugin add-on A specific card extension add-on An alternate distributed solution add-on Keyple Interop libraries used in non-Keyple client applications are outside the scope of this configuration wizard’s services. Application Which card extension do you want to use?\nGeneric (with low-level API) Calypso Card Calypso Legacy SAM (required for secure card transactions) Calypso PKI (required for PKI card transactions) Storage Card Which reader plugin do you want to use?\nAndroid NFC Android OMAPI Card Resource PC/SC Stub (simulated reader) In case of a distributed system, on which side is your application located?\nOn the device having local access to the smart card reader On the device not having local access to the smart card reader Do you need additional services?\nService for dynamic card resource allocation (e.g. for HSM or pool of readers) Gradle Kotlin Gradle Groovy Maven Copy Reader plugin add-on Do you need additional features? Storage cards support Gradle Kotlin Gradle Groovy Maven Copy Card extension add-on Do you need additional services? Service for dynamic card resource allocation (e.g. HSM or pool of readers) Gradle Kotlin Gradle Groovy Maven Copy Distributed solution add-on For the “Local Service” component: Gradle Kotlin Gradle Groovy Maven Copy // Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) implementation(\u0026#34;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#34;) implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-local-java-api:2.2.1\u0026#34;) implementation(\u0026#34;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#34;) // End Keyple configuration // Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) implementation \u0026#39;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-distributed-local-java-api:2.2.1\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#39; // End Keyple configuration \u0026lt;!-- Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-common-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-local-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-util-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- End Keyple configuration --\u0026gt; For the “Remote Plugin” component: Gradle Kotlin Gradle Groovy Maven Copy // Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) implementation(\u0026#34;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#34;) implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-remote-java-api:3.1.1\u0026#34;) implementation(\u0026#34;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#34;) // End Keyple configuration // Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) implementation \u0026#39;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-distributed-remote-java-api:3.1.1\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#39; // End Keyple configuration \u0026lt;!-- Begin Keyple configuration (generated by \u0026#39;https://keyple.org/components/overview/configuration-wizard/\u0026#39;) --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-common-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-remote-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-util-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- End Keyple configuration --\u0026gt; implementation \u0026#39;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-service-java-lib:3.3.5\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.9\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-crypto-pki-java-lib:0.2.3\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-card-generic-java-lib:3.1.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-distributed-local-java-lib:2.5.2\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1\u0026#39; implementation \u0026#39;org.eclipse.keyple:keyple-distributed-remote-java-lib:2.5.1\u0026#39; implementation …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1757335435,"objectID":"f3141abed2b98189af41cb3e98cd4f58","permalink":"https://keyple.org/components/overview/configuration-wizard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/overview/configuration-wizard/","section":"components","summary":"Online tool to generate the dependencies section of Gradle or Maven configuration files.","tags":null,"title":"Configuration wizard","type":"book"},{"authors":null,"categories":null,"content":"Eclipse Keyple® is an Eclipse open source project currently leaded by Calypso Networks Association, which has been the leader in contactless electronic ticketing transportation standards since 2003.\nFree, easy-to-use and flexible Built by developers, for developers Tailored to public entities requirements Interoperable with any smart card reader solution (standard/proprietary, local/remote) Open source libraries in Java and C++ Audit and certification Compatible with any terminal architecture (mobile, embedded, server) Developer-friendly, up-to-date documentation, code samples and how-to guides Permanent compliance to the latest Calypso® release Options for creating add-on features that incorporate Calypso’s advanced security together with non-Calypso smart cards for ticketing and payment Accredited and hosted by the Eclipse foundation Exchange platform between providers and transport authorities Help desk-Separate maintenance for software and equipment Online and offline trainings available that will help you get the most of Keyple Active on GitHub and within the Eclipse community ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715778400,"objectID":"b82f355f36579dc4f39c8ec384a1fc74","permalink":"https://keyple.org/what-is-keyple/why-trust/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/what-is-keyple/why-trust/","section":"what-is-keyple","summary":"Eclipse Keyple® is an Eclipse open source project currently leaded by Calypso Networks Association, which has been the leader in contactless electronic ticketing transportation standards since 2003.\nFree, easy-to-use and flexible Built by developers, for developers Tailored to public entities requirements Interoperable with any smart card reader solution (standard/proprietary, local/remote) Open source libraries in Java and C++ Audit and certification Compatible with any terminal architecture (mobile, embedded, server) Developer-friendly, up-to-date documentation, code samples and how-to guides Permanent compliance to the latest Calypso® release Options for creating add-on features that incorporate Calypso’s advanced security together with non-Calypso smart cards for ticketing and payment Accredited and hosted by the Eclipse foundation Exchange platform between providers and transport authorities Help desk-Separate maintenance for software and equipment Online and offline trainings available that will help you get the most of Keyple Active on GitHub and within the Eclipse community ","tags":null,"title":"Why trust Eclipse Keyple®?","type":"what-is-keyple"},{"authors":null,"categories":null,"content":"\nBuild automation tool Keyple uses Gradle.\nVersioning rules Keyple components are versioned according to Semantic Versioning 2.0.0 which is based on the three numbers X.Y.Z\nFor API components (i.e. artifacts suffixed with -api), the incrementation of Z indicates only a documentation update. Continuous integration Keyple continuous integration is based on GitHub Actions and uses the reusable workflows defined in the dedicated Keyple Actions repository.\nThe CI automates the following tasks:\nverify the validity of the version; verify the code formatting using spotless; build the code; execute unit tests; sign and publish artifacts to Maven Central Repository; publish the API documentation to the unified Keyple’s documentation GitHub pages; publish the code quality report to SonarCloud. Snapshot publication A new snapshot version (suffixed with -SNAPSHOT) is automatically built and published each time a commit is pushed to the main branch.\nThis allows developers to use the latest development state of Keyple without waiting for an official release. The published SNAPSHOT artifacts are available from the Eclipse Maven Snapshots repository.\nThe component version defined in gradle.properties must contain the -SNAPSHOT suffix. Release publication A new release version is automatically built and published whenever a GitHub release is created.\nThe generated artifact is based on the commit referenced by the newly created tag, ensuring full traceability between the source code and the published artifacts.\nThe GitHub release tag name must strictly match the version declared in the gradle.properties file (without the -SNAPSHOT suffix).\nFor example, if the component version in gradle.properties is 2.5.0-SNAPSHOT, the GitHub release tag must be 2.5.0.\nIntegration tests Integration tests are defined in an independent GitHub repository: keyple-integration-java-test\nRelease procedure Create a branch dedicated to the current release. Check gradle.properties file: Check the consistency of the version (do not remove -SNAPSHOT suffix). Check build.gradle.kts file: Use only released dependencies. Upgrade Keyple dependencies to their latest released versions. Update CHANGELOG.md file: Verify the consistency of the Unreleased section. Move content of Unreleased section to a new “release” section. Update bottom links. Build and test the component locally. Commit the modified files. Push and create a pull request to merge the branch into main. Await the success of the build by the CI on source branch. Squash and merge the pull request. Await the success of the snapshot publication by the CI on main branch. Create a release on GitHub: Set tag x.y.z Set release name x.y.z Set the content by copying/pasting the content of the current release description in the CHANGELOG.md file without the bottom links. Await the success of the release publication by the CI on main branch. Check the availability of the release on the Maven Repository. This step may take from 10 minutes to 2 hours. Update this website: Update version in params.yaml file. Update table content of dependency-check.md file. Update others elements if needed (user guides, developer guides, etc…). Commit and push the modifications. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1756802701,"objectID":"9ec9badc2611e8c72b4bce5aa2987b02","permalink":"https://keyple.org/learn/keyple-in-depth/build-and-ci/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/learn/keyple-in-depth/build-and-ci/","section":"learn","summary":"Learn how the Keyple components are built, tested and published.","tags":null,"title":"Build process and continuous integration","type":"book"},{"authors":null,"categories":null,"content":"\nThis online tool helps you to check the compatibility of Keyple components according to their API versions.\nSelect the targeted versions of the APIs to show the associated compliant libraries versions (internal APIs are marked with an asterisk *):\nKeypop APIs Core APIs Core libraries Distributed systems libraries Interop libraries Card extensions libraries Standard reader plugins libraries Reader\nAPI Card\nAPI* Calypso Card\nAPI Calypso Crypto Symmetric\nAPI* Calypso Legacy SAM\nAPI Calypso Crypto Asymmetric\nAPI* Common\nAPI Distributed Local\nAPI* Distributed Remote\nAPI* Plugin\nAPI* Plugin Storage Card\nAPI* Util\nLib Service\nLib Service Resource\nLib Local\nLib Network\nLib Remote\nLib JSON API Client\nLib Local Reader NFC Mobile\nLib Calypso Card\nLib Calypso Legacy SAM\nLib Calypso PKI\nLib Generic\nLib Android NFC\nLib Android OMAPI\nLib Card Resource\nLib PC/SC\nLib Stub\nLib Components previously based on the Calypsonet Terminal API Calypso Networks Association APIs Core APIs Core libraries Distributed systems libraries Card extensions libraries Standard reader plugins libraries Reader\nAPI Card\nAPI* Calypso Card\nAPI Calypso Legacy SAM\nAPI Common\nAPI Distributed Local\nAPI* Distributed Remote\nAPI* Plugin\nAPI* Util\nLib Service\nLib Service Resource\nLib Local\nLib Network\nLib Remote\nLib Calypso Card\nLib Calypso Legacy SAM\nLib Generic\nLib Android NFC\nLib Android OMAPI\nLib Card Resource\nLib PC/SC\nLib Stub\nLib 1.3.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.3.+ 2.3.0...2.3.1 2.3.3...2.3.6 2.1.0...2.1.1 2.2.0 2.2.0 2.2.0...2.2.1 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.1.0 2.0.0...2.0.1 1.0.0...1.0.1 2.0.0...2.2.0 2.0.0...2.2.0 1.3.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.2.+ 2.3.0...2.3.1 2.3.2...2.3.4 2.1.0...2.1.1 2.2.0 2.2.0 2.2.0...2.2.1 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.1.0 2.0.0...2.0.1 1.0.0...1.0.1 2.0.0...2.1.2 2.0.0...2.2.0 1.3.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.1.+ 2.3.0...2.3.1 2.3.0...2.3.4 2.1.0...2.1.1 2.2.0 2.2.0 2.2.0...2.2.1 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 1.0.0...1.0.1 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.1.+ 2.3.0...2.3.1 2.2.0...2.2.1 2.1.0...2.1.1 2.2.0 2.2.0 2.2.0...2.2.1 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 1.0.0...1.0.1 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.4 2.0.0...2.0.2 2.2.0 2.2.0 2.2.0...2.2.1 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.8.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.3 2.0.0...2.0.2 2.0.0 2.0.0 2.1.0 2.3.4...2.3.15 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.7.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.3 2.0.0...2.0.2 2.0.0 2.0.0 2.1.0 2.3.3 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.6.+ 0.2.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.3 2.0.0...2.0.2 2.0.0 2.0.0 2.1.0 2.3.2 0.3.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.6.+ 0.1.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.3 2.0.0...2.0.2 2.0.0 2.0.0 2.1.0 2.3.2 0.1.0...0.2.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.5.+ 0.1.+ 2.0.+ 2.0.+ 2.1.+ 2.0.+ 2.3.0...2.3.1 2.1.3 2.0.0...2.0.2 2.0.0 2.0.0 2.1.0 2.3.1 0.1.0...0.2.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.2.+ 1.0.+ 1.5.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.3.0...2.3.1 2.1.2 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.3.1 0.1.0...0.2.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.1.+ 1.0.+ 1.5.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.3.0...2.3.1 2.1.1 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.3.1 0.1.0...0.2.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.1.+ 1.0.+ 1.4.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.3.0...2.3.1 2.1.1 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.2.4...2.3.0 0.1.0...0.2.0 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.1.+ 1.0.+ 1.4.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.1.0...2.2.0 2.1.1 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.2.3 - 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.0.+ 1.0.+ 1.3.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.1.0...2.2.0 2.0.0...2.1.0 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.2.0...2.2.2 - 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.0.+ 1.0.+ 1.2.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.1.0...2.2.0 2.0.0...2.1.0 2.0.0...2.0.2 2.0.0 2.0.0 2.0.0 2.2.0...2.2.1 - 2.0.0...2.0.2 2.0.0...2.0.1 2.0.0...2.0.1 - 2.0.0...2.1.2 2.0.0...2.1.0 1.0.+ 1.0.+ 1.1.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.0.0 2.0.0...2.0.1 2.0.0...2.0.1 2.0.0 2.0.0 2.0.0 2.1.0 - 2.0.0...2.0.2 2.0.0 2.0.0 - 2.0.0 2.0.0 1.0.+ 1.0.+ 1.0.+ 0.1.+ 2.0.+ 2.0.+ 2.0.+ 2.0.+ 2.0.0 2.0.0...2.0.1 2.0.0...2.0.1 2.0.0 2.0.0 2.0.0 2.0.0...2.0.3 - 2.0.0...2.0.2 2.0.0 2.0.0 - 2.0.0 2.0.0 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1757335435,"objectID":"6cc4daa52e019030fd3d2890d372e765","permalink":"https://keyple.org/components/overview/dependency-check/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/overview/dependency-check/","section":"components","summary":"Online tool to check the compatibility of Keyple components according to their internal API versions.","tags":null,"title":"Dependency check","type":"book"},{"authors":null,"categories":null,"content":"Whether you are a transport authority or operator, a mobility provider, a system integrator, an event manager, a mobility aggregator or a multi-mobility startup, Eclipse Keyple® allows you to:\nReduce your costs and accelerate your developments. Facilitate the integration of new services or technologies. Use libraries to enable instant payments, remote top-ups, event and multimodal transport integrations, connection to park-and-ride services, and more. Easily create applications or services compatible with existing card-centric or server-centric systems. Benefit from a more diverse and easily collaborative network that encourages coopetition in a multimodal market: compete where you can, collaborate when necessary to create integrated mobility customer journeys. Harness the flexibility to introduce modern, mobile and new architecture systems while maintaining integrations to legacy infrastructure. Ensure the sustainability and future-proofing of your ticketing system, as Keyple is compatible with any smart card reader and SIO-enabled terminal. Unchain from vendor lock in, black box and single provider systems to an open solution with access to multiple suppliers. Enable partnerships with multimodal transport, building facilities including parking, tourism operators and events to offer seamless, single ticketing across the end customer’s journey. With Keyple Calypso extension:\nHave easy access to a highly secure and interoperable standard, Calypso®. Quickly build new apps and integrations that conform to the Calypso® standard and other ticketing schemas. Easily migrate from an existing, closed ticketing schemes to Calypso®, a high-end open ticketing, certified solution. Easily integrate with public transport providers that are using the Calypso® standard, today used in major cities around the world in over 25 countries. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633942038,"objectID":"619e8d908db818972b80664557c05715","permalink":"https://keyple.org/what-is-keyple/who-is-it-for/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/what-is-keyple/who-is-it-for/","section":"what-is-keyple","summary":"Whether you are a transport authority or operator, a mobility provider, a system integrator, an event manager, a mobility aggregator or a multi-mobility startup, Eclipse Keyple® allows you to:\nReduce your costs and accelerate your developments.","tags":null,"title":"Who is it for?","type":"what-is-keyple"},{"authors":null,"categories":null,"content":"Calypso® is a set of specifications describing a fast and secure off-line contactless transaction, between a portable object and a terminal. It has been created for public transport ticketing at the end of the 1990s by some European public transport operators or authority (RATP and SNCF in Paris and all France, STIB in Brussels, OTLIS in Lisbon, ACTV in Venice, Konstanz in Germany), in order to create an open, interoperable and secure standard independent from industrials to ensure a real competition.\nToday Calypso® represents 20% of the world market of contactless smart ticketing in more than 25 countries and over 170 cities globally. It brings to his user a guarantee of security and interoperability which relies on a total compliance with existing standards (ISO 14443, ISO 7816-4, Global Platform). The Calypso® standard is managed by the Calypso Networks Association (CNA), which is led by transports operators and public authorities in order to ensure openness and independence from industrials in confront of other proprietary schemes.\nDiscover more about Calypso® here : https://calypsonet.org/solutions-overview/\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633942038,"objectID":"891b6c07aee52d1deb466963c0da5e9a","permalink":"https://keyple.org/what-is-keyple/what-is-calypso/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/what-is-keyple/what-is-calypso/","section":"what-is-keyple","summary":"Calypso® is a set of specifications describing a fast and secure off-line contactless transaction, between a portable object and a terminal. It has been created for public transport ticketing at the end of the 1990s by some European public transport operators or authority (RATP and SNCF in Paris and all France, STIB in Brussels, OTLIS in Lisbon, ACTV in Venice, Konstanz in Germany), in order to create an open, interoperable and secure standard independent from industrials to ensure a real competition.","tags":null,"title":"What is Calypso®?","type":"what-is-keyple"},{"authors":null,"categories":null,"content":"The goal of Eclipse Keyple® is to allow developers to easily implement fast and secure off-line contactless transactions (using NFC cards, mobile phones, …) based on ticket processing integrating technologies other than Calypso® the Calypso standard.\nMore specifically, Keyple is a set of open source libraries that will initially be available in Java and C++, designed on the same mutual Object-Oriented Model compatible with any terminal architecture: mobile, embedded or server and Interoperable with any smart card reader solution: standard or proprietary, local or remote.\nTo fully understand how Keyple works, it is important to discern two main components of contactless ticketing technology:\nSmart Card Readers: Readers are situated at the entrance and exit of events, venues and transport sites. For example, a smart card reader could be a terminal, a portable scanning laser gun, or a swipe tablet area that is embedded into a door, vehicle or gate. Code is written for a terminal to set the parameters for allowing cards or apps to transmit ticketing information data. Sometimes in a distributed architecture system design, the code for the reader is not on the terminal, but in a cloud environment, so the reader sends the data to cloud-based architecture. Ticketing application: This is behind-the-scenes code that is able to take the data from the smart card reader and, in milliseconds real-time, analyze the balance of the ticket, confirm the permissions for entry, and update the data on the ticket (for example, to confirm that the ticket holder can enter the gate or vehicle, and then to deduct the cost of the journey and calculate the new balance). According to this scheme, Keyple defines two layers:\nSmart Card readers are integrated through plugins implementing the SE Proxy API which manages the communications with a smart card through any type of contactless or contact reader (local, remote, standard, proprietary…) Ticketing applications relies on a high-level Calypso® processing API to manage Calypso® commands \u0026amp; security features. This API uses the SE Proxy API to communicate with the reader Keyple comes with dedicated plugins that integrate directly with smart card readers that have been built on standard software interfaces including PC/SC, Android NFC reader, and Android OMAPI.\nIn cases where there is a distributed architecture design, Keyple includes a Remote API plugin so that a smart card terminal can be operated remotely, as if it were local to the terminal, and ensures that robust security and speed is not sacrificed in a cloud-based system.\nThe Calypso Processing API is also available as a Keyple extension. This component carries out the terminal processing element of ticketing technology. Access to Calypso’s security features are automatically managed by the Keyple extension.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633942038,"objectID":"bf786b8ea9088ea228a979a08534bfca","permalink":"https://keyple.org/what-is-keyple/main-features/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/what-is-keyple/main-features/","section":"what-is-keyple","summary":"Keyple makes contactless ticketing accessible.","tags":null,"title":"Keyple's main features","type":"what-is-keyple"},{"authors":null,"categories":null,"content":" This API is compliant with the following Keyple server side components:\nKeyple Service Library version 3.3.0+ Keyple Distributed Network Library version 2.5.0+ Keyple Distributed Remote Library version 2.5.0+ Changelog This minor version optimizes transaction time by reducing the number of network exchanges. A new field has been added to the “Execute Remote Service” message sent to the server, and the “Reader Type” command received from the server has been removed.\nMessageDto The diagram below shows the format of the MessageDto object but the detailed content will be described in the sections associated with each message type:\nKeyple Distributed JSON API - MessageDto The value of the action property determines the message type. Execute Remote Service The purpose of this message, sent to the server, is to initiate the server-controlled card transaction.\nBy using the identification properties provided by the terminal in its subsequent responses, the server ensures consistent and accurate data flow management throughout the entire system.\nFollowing the transmission of this message, the server will return a “Command” message, containing the first action to be performed with the card or the terminal’s reader, or an “End Remote Service” message to terminate the transaction.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\nKeyple Distributed JSON API - “Execute Remote Service” class diagram MessageDto apiLevel Number\nConstant value: 3 sessionId String\nThe session identifier. It shall be unique per card transaction. action String\nConstant value: “EXECUTE_REMOTE_SERVICE” clientNodeId String\nThe terminal identifier. It shall be unique per server. serverNodeId String (n/a)\nNull or absent. localReaderName String\nThe identifier of the local reader used to perform the card transaction. It shall be unique per terminal. remoteReaderName String (n/a)\nNull or absent. body String\nA JSON string containing a ExecuteRemoteServiceBody JSON object. ExecuteRemoteServiceBody coreApiLevel Number\nConstant value: 2 serviceId String\nThe identifier of the business service to be executed by the server. It’s a naming convention between the client and the server. isReaderContactless Boolean\nSet to true if the reader is in contactless mode, false otherwise. inputData Object (optional)\nAn optional object containing additional data to be provided to the remote business service, as for example the ProcessedCardSelectionScenarioJsonString containing the result of an already processed card selection scenario. The content of this property is a convention between the client and the server. initialCardContent Object (optional)\nAn optional object containing the ProcessedCardSelectionScenarioJsonString containing the result of an already processed card selection scenario. The content of this property is a convention between the client and the server. initialCardContentClassName String (required only if initialCardContent is set)\nConstant value: “java.util.Properties” Example { \u0026#34;apiLevel\u0026#34;: 2, \u0026#34;sessionId\u0026#34;: \u0026#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;EXECUTE_REMOTE_SERVICE\u0026#34;, \u0026#34;clientNodeId\u0026#34;: \u0026#34;ca21fd3c-a055-4be5-aad1-c61af3528371\u0026#34;, \u0026#34;localReaderName\u0026#34;: \u0026#34;READER_1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;coreApiLevel\\\u0026#34;:2,\\\u0026#34;serviceId\\\u0026#34;:\\\u0026#34;AUTHENTICATE_CARD\\\u0026#34;,\\\u0026#34;isReaderContactless\\\u0026#34;:true,\\\u0026#34;inputData\\\u0026#34;:{\\\u0026#34;userId\\\u0026#34;:\\\u0026#34;7b13592c-0d21-429b-80d2-3dc565338ea3\\\u0026#34;},\\\u0026#34;initialCardContent\\\u0026#34;:{\\\u0026#34;processedCardSelectionScenarioJsonString\\\u0026#34;:\\\u0026#34;[{\\\\\\\u0026#34;hasMatched\\\\\\\u0026#34;:false,\\\\\\\u0026#34;powerOnData\\\\\\\u0026#34;:\\\\\\\u0026#34;1234\\\\\\\u0026#34;,\\\\\\\u0026#34;selectApplicationResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;6400\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;6400\\\\\\\u0026#34;},\\\\\\\u0026#34;cardResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apduResponses\\\\\\\u0026#34;:[],\\\\\\\u0026#34;isLogicalChannelOpen\\\\\\\u0026#34;:false}},{\\\\\\\u0026#34;hasMatched\\\\\\\u0026#34;:true,\\\\\\\u0026#34;powerOnData\\\\\\\u0026#34;:\\\\\\\u0026#34;1234\\\\\\\u0026#34;,\\\\\\\u0026#34;selectApplicationResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;6F238409315449432E49434131A516BF0C13C708000000001122334453070A3C20051410019000\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;9000\\\\\\\u0026#34;},\\\\\\\u0026#34;cardResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apduResponses\\\\\\\u0026#34;:[{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;ABCD9000\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;9000\\\\\\\u0026#34;}],\\\\\\\u0026#34;isLogicalChannelOpen\\\\\\\u0026#34;:true}}]\\\u0026#34;},\\\u0026#34;initialCardContentClassName\\\u0026#34;:\\\u0026#34;java.util.Properties\\\u0026#34;}\u0026#34; } Command The purpose of this message, received from the server, is to ask the terminal to perform a specific service with the card or the terminal’s reader.\nThere are three types of services potentially requested by the server:\nService Description Card Presence Indicates if a card is present in the reader. Card Selection Establish a logical communication channel with a card and, if required, perform additional APDU exchanges with it. Card Commands Perform APDU exchanges with the selected card. Following the reception of this message, the terminal will send to the server a “Response” message containing the response of the operation.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\nKeyple Distributed …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743512756,"objectID":"e1ed649fb29ac6098ce16887d5d113d8","permalink":"https://keyple.org/user-guides/non-keyple-client/server-json-api/2-1/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/server-json-api/2-1/","section":"user-guides","summary":" ","tags":null,"title":"Server JSON API v2.1","type":"book"},{"authors":null,"categories":null,"content":" This API is compliant with the following Keyple server side components:\nKeyple Service Library version 3.0.0+ Keyple Distributed Network Library version 2.3.0+ Keyple Distributed Remote Library version 2.3.0+ Changelog This major release follows the restructuring of the CardSelector object.\nMessageDto The diagram below shows the format of the MessageDto object but the detailed content will be described in the sections associated with each message type:\nKeyple Distributed JSON API - MessageDto The value of the action property determines the message type. Execute Remote Service The purpose of this message, sent to the server, is to initiate the server-controlled card transaction.\nBy using the identification properties provided by the terminal in its subsequent responses, the server ensures consistent and accurate data flow management throughout the entire system.\nFollowing the transmission of this message, the server will return a “Command” message, containing the first action to be performed with the card or the terminal’s reader, or an “End Remote Service” message to terminate the transaction.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\nKeyple Distributed JSON API - “Execute Remote Service” class diagram MessageDto apiLevel Number\nConstant value: 2 sessionId String\nThe session identifier. It shall be unique per card transaction. action String\nConstant value: “EXECUTE_REMOTE_SERVICE” clientNodeId String\nThe terminal identifier. It shall be unique per server. serverNodeId String (n/a)\nNull or absent. localReaderName String\nThe identifier of the local reader used to perform the card transaction. It shall be unique per terminal. remoteReaderName String (n/a)\nNull or absent. body String\nA JSON string containing a ExecuteRemoteServiceBody JSON object. ExecuteRemoteServiceBody coreApiLevel Number\nConstant value: 2 serviceId String\nThe identifier of the business service to be executed by the server. It’s a naming convention between the client and the server. inputData Object (optional)\nAn optional object containing additional data to be provided to the remote business service, as for example the ProcessedCardSelectionScenarioJsonString containing the result of an already processed card selection scenario. The content of this property is a convention between the client and the server. initialCardContent Object (optional)\nAn optional object containing the ProcessedCardSelectionScenarioJsonString containing the result of an already processed card selection scenario. The content of this property is a convention between the client and the server. initialCardContentClassName String (required only if initialCardContent is set)\nConstant value: “java.util.Properties” Example { \u0026#34;apiLevel\u0026#34;: 2, \u0026#34;sessionId\u0026#34;: \u0026#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;EXECUTE_REMOTE_SERVICE\u0026#34;, \u0026#34;clientNodeId\u0026#34;: \u0026#34;ca21fd3c-a055-4be5-aad1-c61af3528371\u0026#34;, \u0026#34;localReaderName\u0026#34;: \u0026#34;READER_1\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;coreApiLevel\\\u0026#34;:2,\\\u0026#34;serviceId\\\u0026#34;:\\\u0026#34;AUTHENTICATE_CARD\\\u0026#34;,\\\u0026#34;inputData\\\u0026#34;:{\\\u0026#34;userId\\\u0026#34;:\\\u0026#34;7b13592c-0d21-429b-80d2-3dc565338ea3\\\u0026#34;},\\\u0026#34;initialCardContent\\\u0026#34;:{\\\u0026#34;processedCardSelectionScenarioJsonString\\\u0026#34;:\\\u0026#34;[{\\\\\\\u0026#34;hasMatched\\\\\\\u0026#34;:false,\\\\\\\u0026#34;powerOnData\\\\\\\u0026#34;:\\\\\\\u0026#34;1234\\\\\\\u0026#34;,\\\\\\\u0026#34;selectApplicationResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;6400\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;6400\\\\\\\u0026#34;},\\\\\\\u0026#34;cardResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apduResponses\\\\\\\u0026#34;:[],\\\\\\\u0026#34;isLogicalChannelOpen\\\\\\\u0026#34;:false}},{\\\\\\\u0026#34;hasMatched\\\\\\\u0026#34;:true,\\\\\\\u0026#34;powerOnData\\\\\\\u0026#34;:\\\\\\\u0026#34;1234\\\\\\\u0026#34;,\\\\\\\u0026#34;selectApplicationResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;6F238409315449432E49434131A516BF0C13C708000000001122334453070A3C20051410019000\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;9000\\\\\\\u0026#34;},\\\\\\\u0026#34;cardResponse\\\\\\\u0026#34;:{\\\\\\\u0026#34;apduResponses\\\\\\\u0026#34;:[{\\\\\\\u0026#34;apdu\\\\\\\u0026#34;:\\\\\\\u0026#34;ABCD9000\\\\\\\u0026#34;,\\\\\\\u0026#34;statusWord\\\\\\\u0026#34;:\\\\\\\u0026#34;9000\\\\\\\u0026#34;}],\\\\\\\u0026#34;isLogicalChannelOpen\\\\\\\u0026#34;:true}}]\\\u0026#34;},\\\u0026#34;initialCardContentClassName\\\u0026#34;:\\\u0026#34;java.util.Properties\\\u0026#34;}\u0026#34; } Command The purpose of this message, received from the server, is to ask the terminal to perform a specific service with the card or the terminal’s reader.\nThere are four types of service potentially requested by the server:\nService Description Reader Type Indicates if the reader is in contact or contactless mode. Card Presence Indicates if a card is present in the reader. Card Selection Establish a logical communication channel with a card and, if required, perform additional APDU exchanges with it. Card Commands Perform APDU exchanges with the selected card. Following the reception of this message, the terminal will send to the server a “Response” message containing the response of the operation.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\nKeyple Distributed JSON API - “Command” class diagram The value of the service property determines the service to be performed. The MessageDto is contained in a single-element array! Reader Type This service allows the server to know if the reader is in …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743512756,"objectID":"54b9ba862b71867c8b72f9c83c216f55","permalink":"https://keyple.org/user-guides/non-keyple-client/server-json-api/2-0/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/server-json-api/2-0/","section":"user-guides","summary":" ","tags":null,"title":"Server JSON API v2.0","type":"book"},{"authors":null,"categories":null,"content":" This specification is compliant with the following Keyple server side components:\nKeyple Service Library version 3.0.0+ Card selection scenario The JSON string CardSelectionScenarioJsonString contains a JSON object CardSelectionScenario containing the card selection scenario to be processed when a card is detected.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\n“CardSelectionScenario” class diagram CardSelectionScenario multiSelectionProcessing String\nCan have one of the following values:\n- “FIRST_MATCH”: the selection process stops as soon as a selection case is successful.\n- “PROCESS_ALL”: the selection process performs all the selection cases provided (the logical channel is closed at the end of the selection case). channelControl String\nCan have one of the following values:\n- “KEEP_OPEN”: leaves the physical channel open.\n- “CLOSE_AFTER”: terminates communication with the card. cardSelectors CardSelector [ ]\nA non-empty array. defaultCardSelections DefaultCardSelection [ ]\nA non-empty array containing the same number of elements as cardSelectors. Please note that additional properties are present, but are useless for a non-Keyple client and are therefore to be ignored! CardSelector logicalProtocolName String (optional)\nAn optional “logical” name of the targeted card protocol. powerOnDataRegex String (optional)\nAn optional regex to use to filter the power-on data. aid String (optional)\nAn optional Application Identifier (AID) as an hexadecimal string to be sent with ISO7816-4 “Select Application”. fileOccurrence String\nCan have one of the following values:\n\u0026#34;FIRST\u0026#34;, “LAST”, “NEXT” or “PREVIOUS” according to the ISO7816-4 standard (only relevant when AID is set). fileControlInformation String\nCan have one of the following values:\n\u0026#34;FCI\u0026#34;, “FCP”, “FMD” or “NO_RESPONSE” according to the ISO7816-4 standard (only relevant when AID is set). DefaultCardSelection CardSelectionRequest CardSelectionRequest CardSelectionRequest cardRequest CardRequest (optional)\nAn optional object containing a list of APDU requests to be sent after a successful card selection. successfulSelectionStatusWords String [ ]\nA non-empty array of 2-byte hexadecimal strings containing the status word of the “Select Application” APDU command to be considered successful (only relevant when AID is set). CardRequest apduRequests ApduRequest [ ]\nA non-empty array of APDU requests. stopOnUnsuccessfulStatusWord Boolean\nSet to true if the transmission of the APDUs should be interrupted as soon as the status word of a response does not belong to the associated list of successful status words, false otherwise. ApduRequest apdu String\nAn hexadecimal string containing the APDU to transmit to the card. successfulStatusWords String [ ]\nA non-empty array of 2-byte hexadecimal strings containing the status word to be considered successful. info String (optional)\nAn optional textual information about the command. Example CardSelectionScenarioJsonString \u0026#34;{\\\u0026#34;multiSelectionProcessing\\\u0026#34;:\\\u0026#34;FIRST_MATCH\\\u0026#34;,\\\u0026#34;channelControl\\\u0026#34;:\\\u0026#34;KEEP_OPEN\\\u0026#34;,\\\u0026#34;cardSelectors\\\u0026#34;:[{\\\u0026#34;logicalProtocolName\\\u0026#34;:\\\u0026#34;CALYPSO_CARD_PROTOCOL\\\u0026#34;,\\\u0026#34;powerOnDataRegex\\\u0026#34;:\\\u0026#34;.*\\\u0026#34;,\\\u0026#34;aid\\\u0026#34;:\\\u0026#34;1122334455\\\u0026#34;,\\\u0026#34;fileOccurrence\\\u0026#34;:\\\u0026#34;FIRST\\\u0026#34;,\\\u0026#34;fileControlInformation\\\u0026#34;:\\\u0026#34;FCI\\\u0026#34;},{\\\u0026#34;logicalProtocolName\\\u0026#34;:\\\u0026#34;GENERIC_CARD_PROTOCOL\\\u0026#34;,\\\u0026#34;powerOnDataRegex\\\u0026#34;:\\\u0026#34;.*\\\u0026#34;,\\\u0026#34;aid\\\u0026#34;:\\\u0026#34;1122334455\\\u0026#34;,\\\u0026#34;fileOccurrence\\\u0026#34;:\\\u0026#34;FIRST\\\u0026#34;,\\\u0026#34;fileControlInformation\\\u0026#34;:\\\u0026#34;FCI\\\u0026#34;}],\\\u0026#34;defaultCardSelections\\\u0026#34;:[{\\\u0026#34;cardSelectionRequest\\\u0026#34;:{\\\u0026#34;cardRequest\\\u0026#34;:{\\\u0026#34;apduRequests\\\u0026#34;:[{\\\u0026#34;apdu\\\u0026#34;:\\\u0026#34;00B2020C00\\\u0026#34;,\\\u0026#34;successfulStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;],\\\u0026#34;info\\\u0026#34;:\\\u0026#34;Read Records - sfi: 01h, rec: 2, read mode: ONE_RECORD, expected length: 0\\\u0026#34;},{\\\u0026#34;apdu\\\u0026#34;:\\\u0026#34;00B081000A\\\u0026#34;,\\\u0026#34;successfulStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;],\\\u0026#34;info\\\u0026#34;:\\\u0026#34;Read Binary - sfi: 01h, offset: 0, length: 10\\\u0026#34;},{\\\u0026#34;apdu\\\u0026#34;:\\\u0026#34;00B2010C03\\\u0026#34;,\\\u0026#34;successfulStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;],\\\u0026#34;info\\\u0026#34;:\\\u0026#34;Read Records - sfi: 01h, rec: 1, read mode: ONE_RECORD, expected length: 3\\\u0026#34;},{\\\u0026#34;apdu\\\u0026#34;:\\\u0026#34;008A0302010000\\\u0026#34;,\\\u0026#34;successfulStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;],\\\u0026#34;info\\\u0026#34;:\\\u0026#34;Open Secure Session - key index: 3, sfi: 00h, rec: 0 - pre-open\\\u0026#34;}],\\\u0026#34;stopOnUnsuccessfulStatusWord\\\u0026#34;:false},\\\u0026#34;successfulSelectionStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;,\\\u0026#34;6283\\\u0026#34;]}},{\\\u0026#34;cardSelectionRequest\\\u0026#34;:{\\\u0026#34;successfulSelectionStatusWords\\\u0026#34;:[\\\u0026#34;9000\\\u0026#34;]}}]}\u0026#34; JSON content { \u0026#34;multiSelectionProcessing\u0026#34;: \u0026#34;FIRST_MATCH\u0026#34;, \u0026#34;channelControl\u0026#34;: \u0026#34;KEEP_OPEN\u0026#34;, \u0026#34;cardSelectors\u0026#34;: [ { \u0026#34;logicalProtocolName\u0026#34;: \u0026#34;CALYPSO_CARD_PROTOCOL\u0026#34;, \u0026#34;powerOnDataRegex\u0026#34;: \u0026#34;.*\u0026#34;, \u0026#34;aid\u0026#34;: \u0026#34;1122334455\u0026#34;, \u0026#34;fileOccurrence\u0026#34;: \u0026#34;FIRST\u0026#34;, \u0026#34;fileControlInformation\u0026#34;: \u0026#34;FCI\u0026#34; }, { \u0026#34;logicalProtocolName\u0026#34;: \u0026#34;GENERIC_CARD_PROTOCOL\u0026#34;, \u0026#34;powerOnDataRegex\u0026#34;: \u0026#34;.*\u0026#34;, \u0026#34;aid\u0026#34;: \u0026#34;1122334455\u0026#34;, \u0026#34;fileOccurrence\u0026#34;: \u0026#34;FIRST\u0026#34;, \u0026#34;fileControlInformation\u0026#34;: \u0026#34;FCI\u0026#34; } ], \u0026#34;defaultCardSelections\u0026#34;: [ { \u0026#34;cardSelectionRequest\u0026#34;: { \u0026#34;cardRequest\u0026#34;: { \u0026#34;apduRequests\u0026#34;: [ { \u0026#34;apdu\u0026#34;: \u0026#34;00B2020C00\u0026#34;, \u0026#34;successfulStatusWords\u0026#34;: [\u0026#34;9000\u0026#34;], \u0026#34;info\u0026#34;: \u0026#34;Read Records - sfi: 01h, rec: 2, read mode: ONE_RECORD, expected length: 0\u0026#34; }, { \u0026#34;apdu\u0026#34;: …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"008bb4d175206742382c2c99381b57db","permalink":"https://keyple.org/user-guides/non-keyple-client/selection-json-specification/1-0/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/selection-json-specification/1-0/","section":"user-guides","summary":" ","tags":null,"title":"Selection JSON Specification v1.0","type":"book"},{"authors":null,"categories":null,"content":" This API is compliant with the following Keyple server side components:\nKeyple Service Library version 2.1.4+ Keyple Distributed Network Library version 2.2.0+ Keyple Distributed Remote Library version 2.2.0+ MessageDto The diagram below shows the format of the MessageDto object but the detailed content will be described in the sections associated with each message type:\nMessageDto The value of the action property determines the message type. Execute Remote Service The purpose of this message, sent to the server, is to initiate the server-controlled card transaction.\nBy using the identification properties provided by the terminal in its subsequent responses, the server ensures consistent and accurate data flow management throughout the entire system.\nFollowing the transmission of this message, the server will return a “Command” message, containing the first action to be performed with the card or the terminal’s reader, or an “End Remote Service” message to terminate the transaction.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\n“Execute Remote Service” class diagram MessageDto action String\nConstant value: “EXECUTE_REMOTE_SERVICE” body String\nA JSON string containing a ExecuteRemoteServiceBody JSON object. sessionId String\nThe session identifier. It shall be unique per card transaction. clientNodeId String\nThe terminal identifier. It shall be unique per server. localReaderName String\nThe identifier of the local reader used to perform the card transaction. It shall be unique per terminal. serverNodeId String (n/a)\nNull or absent. remoteReaderName String (n/a)\nNull or absent. ExecuteRemoteServiceBody serviceId String\nThe identifier of the business service to be executed by the server. It’s a naming convention between the client and the server. inputData Object (optional)\nAn optional object containing additional data to be provided to the remote business service. Its content is a convention between the client and the server. Example { \u0026#34;action\u0026#34;: \u0026#34;EXECUTE_REMOTE_SERVICE\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;serviceId\\\u0026#34;:\\\u0026#34;AUTHENTICATE_CARD\\\u0026#34;,\\\u0026#34;inputData\\\u0026#34;:{\\\u0026#34;userId\\\u0026#34;:\\\u0026#34;7b13592c-0d21-429b-80d2-3dc565338ea3\\\u0026#34;}}\u0026#34;, \u0026#34;sessionId\u0026#34;: \u0026#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9\u0026#34;, \u0026#34;clientNodeId\u0026#34;: \u0026#34;ca21fd3c-a055-4be5-aad1-c61af3528371\u0026#34;, \u0026#34;localReaderName\u0026#34;: \u0026#34;READER_1\u0026#34; } Command The purpose of this message, received from the server, is to ask the terminal to perform a specific service with the card or the terminal’s reader.\nThere are four types of service potentially requested by the server:\nService Description Reader Type Indicates if the reader is in contact or contactless mode. Card Presence Indicates if a card is present in the reader. Card Selection Establish a logical communication channel with a card and, if required, perform additional APDU exchanges with it. Card Commands Perform APDU exchanges with the selected card. Following the reception of this message, the terminal will send to the server a “Response” message containing the response of the operation.\nThe following UML class diagram illustrates the format of this object and may help to implement it in the development language of the target terminal.\n“Command” class diagram The value of the service property determines the service to be performed. The MessageDto is contained in a single-element array! Reader Type This service allows the server to know if the reader is in contact or contactless mode.\nThere are no parameters for this service.\nThe terminal must then send the response to the server in a “Reader Type (Response)” message.\nThe MessageDto is contained in a single-element array! MessageDto action String\nConstant value: “CMD” body String\nA JSON string containing a IsContactlessCmdBody JSON object. sessionId String\nThe current transaction identifier as provided by the initial “Execute Remote Service” message. clientNodeId String\nThe terminal identifier as provided by the initial “Execute Remote Service” message. localReaderName String\nThe identifier of the local reader as provided by the initial “Execute Remote Service” message. serverNodeId String\nThe server identifier. remoteReaderName String\nThe identifier of the virtual remote reader linked to the local reader. IsContactlessCmdBody service String\nConstant value: “IS_CONTACTLESS” Example [ { \u0026#34;action\u0026#34;: \u0026#34;CMD\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;{\\\u0026#34;service\\\u0026#34;:\\\u0026#34;IS_CONTACTLESS\\\u0026#34;}\u0026#34;, \u0026#34;clientNodeId\u0026#34;: \u0026#34;ca21fd3c-a055-4be5-aad1-c61af3528371\u0026#34;, \u0026#34;localReaderName\u0026#34;: \u0026#34;READER_1\u0026#34;, \u0026#34;remoteReaderName\u0026#34;: \u0026#34;a65f4920-7e96-4082-986a-b58d85978c07\u0026#34;, \u0026#34;serverNodeId\u0026#34;: \u0026#34;4132f1ef-4386-49b0-acb6-cc16035c107a\u0026#34;, \u0026#34;sessionId\u0026#34;: \u0026#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9\u0026#34; } ] Card Presence This service allows the server to know if a card is inserted in the reader.\nThere are no parameters for this service.\nThe terminal must then send the response to the server in a “Card Presence (Response)” message.\nThe MessageDto is contained in a single-element array! MessageDto action String\nConstant value: “CMD” body …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"9ec9b370b09c914c0ebbce3573325126","permalink":"https://keyple.org/user-guides/non-keyple-client/server-json-api/1-0/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/user-guides/non-keyple-client/server-json-api/1-0/","section":"user-guides","summary":" ","tags":null,"title":"Server JSON API v1.0","type":"book"},{"authors":["Calypso Networks Association"],"categories":["Documentation"],"content":"Published on March 06, 2025, this guide describes how to implement early card selection on a non-Keyple terminal before requesting the server to continue the card transaction, as well as the JSON format of the involved data.\nFor more information, please visit the user guide\n","date":1741215600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"0c1e4edb63ff8946c2b6cdb2b7c16ccb","permalink":"https://keyple.org/post/2025-03-06-selection-json-specification-1-0/","publishdate":"2025-03-06T00:00:00+01:00","relpermalink":"/post/2025-03-06-selection-json-specification-1-0/","section":"post","summary":"Published on March 06, 2025, this guide describes how to implement early card selection on a non-Keyple terminal before requesting the server to continue the card transaction, as well as the JSON format of the involved data.","tags":["Eclipse","Keyple","OpenSource","Middleware","API","Ticketing","Distributed","JSON","Website"],"title":"Keyple Selection JSON Specification 1.0 is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Since April, Keyple supports sessions secured by public key cryptography on Calypso Prime PKI cards. This enables strong authentication of both the card and the data read from it, without necessarily requiring a SAM.\nKeypop APIs for PKI-based Ticketing Systems The Keypop Calypso Card API now includes features for managing Public Key Infrastructure (PKI) mode, offering integrators the flexibility to define any type of chain-of-trust model for a PKI-based ticketing system.\nExtensible Certificate Format Support The Keyple libraries natively support the card (CardCert) and authority (CACert) certificate formats defined in the Calypso Prime PKI specification. Moreover, they have been designed for easy extension to support any other certificate format, ensuring seamless integration with various PKI implementations.\nModular Cryptographic Processing Like most other Keyple components, Keyple’s internal interfaces for managing cryptographic processing are designed as separate libraries. This modular design allows for upgrades and modifications independent of Keyple-based ticketing terminal applications.\nFor asymmetric cryptographic computations (ECC/RSA), Keyple provides a specific library using Java Runtime Environment libraries and the open-source “Bouncy Castle” libraries. Ticketing integrators can also opt to use Keyple Calypso Card extensions with their own cryptographic engine implementations, supporting any certificate format.\nKeyple already supports such a scheme for secure card sessions with a SAM module and is prepared to seamlessly integrate the future OpenSAM solution.\n","date":1716937200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717063496,"objectID":"399de86f47ff2aeac88519951569da8a","permalink":"https://keyple.org/post/pki-support/","publishdate":"2024-05-29T00:00:00+01:00","relpermalink":"/post/pki-support/","section":"post","summary":"Since April, Keyple supports sessions secured by public key cryptography on Calypso Prime PKI cards. This enables strong authentication of both the card and the data read from it, without necessarily requiring a SAM.","tags":["Eclipse","Keyple","Keypop","Release","OpenSource","Middleware","API","Ticketing","PKI"],"title":"Keyple supports Calypso Prime PKI cards!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"All Keyple components have been updated to set the minimum API level to Java 8 and Android 7.0 Nougat (API Level 24).\nThis update was necessary to resolve compatibility issues with modern code analysis and continuous integration tools. Many cutting-edge development tools like SonarCloud no longer support older Java versions. Keyple components were still based on Java 6, causing errors and preventing complete code analysis when integrated with these tools.\nThe decision to update the Keyple project’s libraries to Java 8 and Android 7.0 Nougat reflects the evolving landscape of development environments. With the diminishing presence of Java 6 and Android versions prior to 7 in the installed base, continuing support for these older platforms is no longer warranted.\n","date":171495e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714988876,"objectID":"99fa86c7a6267b5b47df7ed8fe0c880c","permalink":"https://keyple.org/post/java8-android7/","publishdate":"2024-05-06T00:00:00+01:00","relpermalink":"/post/java8-android7/","section":"post","summary":"Keyple project adapts libraries to Java 8 and Android 7.0, reflecting evolving development needs.","tags":["Eclipse","Keyple","Keypop","Release","OpenSource","Middleware","API","Ticketing"],"title":"Keyple goes Java 8, Android 7.0!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Published on January 10, 2024, this version implements the Keypop Calypso Crypto Legacy SAM Java API (0.4.0) and therefore adds support for advanced SAM unlocking mechanisms (static and dynamic modes).\nFor more information, please visit the component page.\n","date":1704884400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714986567,"objectID":"d5ca11a0997b17cb50cacb502d584f69","permalink":"https://keyple.org/post/release-2024-01-10-java/","publishdate":"2024-01-10T12:00:00+01:00","relpermalink":"/post/release-2024-01-10-java/","section":"post","summary":"Published on January 10, 2024, this version adds support for advanced SAM unlocking mechanisms (static and dynamic modes).","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","Ticketing","Calypso","SAM"],"title":"Keyple Card Calypso Crypto Legacy SAM Java Lib (0.5.0) is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"The field of compliance management for ticketing terminals has recently seen a paradigm shift with the launch of the Eclipse Keypop project. This initiative defines a series of UML-compliant interfaces established by the Calypso Networks Association.\nAs a result, the Keyple SDK components are upgraded to a new version, which adopts the Keypop APIs in place of the CNA Terminal APIs. As well as implementing these new APIs, this upgrade removes classes and methods previously marked as deprecated and brings a number of additional improvements. The main enhancement is the processing of Calypso cards.\nKeypop introduces new APIs for managing cryptographic components, in particular SAMs and PKI service providers.\nThese innovations pave the way for new solutions, particularly in view of the forthcoming Open SAM and PKI-based card transactions.\nFor this purpose, the Calypso Card library and the new Calypso Legacy SAM library are now based on these new Keypop APIs. Details of changes to Keyple components are described in the CHANGELOG files at the root of each corresponding repository and the Keyple website has been updated accordingly.\nHere is the list of libraries affected by the Keypop update:\nCore Service Service Resource Card extension add-ons Calypso Card Calypso Legacy SAM Generic Reader plugin add-ons Card Resource Distributed add-ons Local Network Remote ","date":1701169200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715001188,"objectID":"4fcf0dc1fbeee73253cc8e71cffb4fbd","permalink":"https://keyple.org/post/keypop/","publishdate":"2023-11-28T12:00:00+01:00","relpermalink":"/post/keypop/","section":"post","summary":"The Keyple SDK is enhanced by the Eclipse Keypop project with new UML-compliant interfaces and APIs, offering new possibilities for the management of SAMs and PKI cards.","tags":["Eclipse","Keyple","Keypop","Release","OpenSource","Middleware","API","Ticketing"],"title":"Keyple adopts the Eclipse Keypop API!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Published on May 22, 2023, this minor version implements the Calypsonet Terminal Reader Java API (1.3.0) and therefore introduced a new capability to export a locally processed card selection scenario to be imported and analyzed remotely by another card selection manager.\nFor this purpose, the following two methods have been added to the CardSelectionManager interface:\nexportProcessedCardSelectionScenario importProcessedCardSelectionScenario. For more information, please visit the component page.\n","date":1684753200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714986567,"objectID":"c8b52c8bb400073ecf2b757fed145e0a","permalink":"https://keyple.org/post/release-2023-05-22-java/","publishdate":"2023-05-22T12:00:00+01:00","relpermalink":"/post/release-2023-05-22-java/","section":"post","summary":"Published on May 22, 2023, this minor version implements the 'Calypsonet Terminal Reader Java API (1.3.0)' and therefore introduced a new capability to export a locally processed card selection scenario to be imported and analyzed remotely by another card selection manager.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","Ticketing"],"title":"Keyple Service Java Lib (2.3.0) is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Documentation"],"content":"We are pleased to announce a new addition to the Keyple website: the Changelog page!\nThis page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keyple components repositories.\n","date":1683802800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"c80f58af97c2d77cb3bf02a5103b30b5","permalink":"https://keyple.org/post/2023-05-11-website-changelog-page/","publishdate":"2023-05-11T12:00:00+01:00","relpermalink":"/post/2023-05-11-website-changelog-page/","section":"post","summary":"The new 'Changelog' page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keyple components repositories.","tags":["Eclipse","Keyple","OpenSource","Middleware","Website"],"title":"Introducing the Keyple components unified timeline!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Published on April 26, 2023, this new component is a PoolPlugin to manage readers provided by the Card Resource Service.\nThe main role of the plugin is to allow remote access to the Card Resource Service via the Keyple Distributed Solution components. It provides an interface for allocating and deallocating readers by profiles that are part of those configured at the Card Resource Service level.\nA typical use would be for the realization of a server providing cryptographic services through a pool of SAMs, each inserted in a dedicated PC/SC reader.\nTo realize this plugin it was necessary to make evolve the following components:\nKeyple Plugin Java API (2.1.0) Keyple Service Java Lib (2.2.0) Keyple Service Resource Java Lib (2.1.0) For more information, please visit the component page.\n","date":1682506800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701251637,"objectID":"41d9919a198a9ecef7864e32ac8b7b66","permalink":"https://keyple.org/post/release-2023-04-26-java/","publishdate":"2023-04-26T12:00:00+01:00","relpermalink":"/post/release-2023-04-26-java/","section":"post","summary":"Published on April 26, 2023, this new component is a 'PoolPlugin' to manage readers provided by the 'Card Resource Service'. Its role is to allow remote access to the 'Card Resource Service' via the 'Keyple Distributed Solution' components.","tags":["Eclipse","Keyple","Release","OpenSource","SDK","API","Ticketing","Plugin","Card Resource Service"],"title":"Keyple Plugin Card Resource Java Lib (1.0.0) is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Documentation"],"content":"Published on April 04, 2023, this guide is specifically designed for users who are not currently using Keyple in their terminals, but wish to connect to a Keyple server.\nThis allows the development of a distributed solution in which the client reader terminal delegates the entire management of the card transaction to the server.\nFor more information, please visit the user guide\n","date":1680613200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1741266156,"objectID":"fdd0a7c7afd2605e57282473ef4c4f86","permalink":"https://keyple.org/post/2023-04-04-website-guide-json-api/","publishdate":"2023-04-04T14:00:00+01:00","relpermalink":"/post/2023-04-04-website-guide-json-api/","section":"post","summary":"Published on April 04, 2023, this guide is specifically designed for users who are not currently using Keyple in their terminals, but wish to connect to a Keyple server.","tags":["Eclipse","Keyple","OpenSource","Middleware","API","Ticketing","Distributed","JSON","Website"],"title":"Keyple Server JSON API 1.0 User Guide is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Published on February 27, 2023, this version implements the Calypsonet Terminal Calypso Crypto Legacy SAM Java API (0.2.0) and therefore adds the counters ceilings management feature in static mode. This allows to update remotely the key ceilings of the reloading SAMs.\nFor more information, please visit the component page.\n","date":1677495600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714986567,"objectID":"e515a274baba78668e5e0c09f2e4e5ad","permalink":"https://keyple.org/post/release-2023-02-27-java/","publishdate":"2023-02-27T12:00:00+01:00","relpermalink":"/post/release-2023-02-27-java/","section":"post","summary":"Published on February 27, 2023, this version adds the counters ceilings management feature in static mode. This allows to update remotely the key ceilings of the reloading SAMs.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","Ticketing","Calypso","SAM"],"title":"Keyple Card Calypso Crypto Legacy SAM Java Lib (0.3.0) is available!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"Published on December 13, 2022, the Keyple Card Calypso Crypto Legacy SAM Java Library is an add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc…).\nFor more information, please visit the component page.\n","date":1670929200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"58e0e8e2d52f2127af47d50ea7825b94","permalink":"https://keyple.org/post/release-2022-12-13-java/","publishdate":"2022-12-13T12:00:00+01:00","relpermalink":"/post/release-2022-12-13-java/","section":"post","summary":"Published on December 13, 2022, the Keyple Card Calypso Crypto Legacy SAM Java Library is an add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc…).\nFor more information, please visit the component page.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","Ticketing","Calypso","SAM"],"title":"Keyple Card Calypso Crypto Legacy SAM Java Lib (0.2.0) is in Beta!","type":"post"},{"authors":["Calypso Networks Association"],"categories":["News"],"content":"Dear Keyple friends,\nEclipse Keyple is pleased to welcome 2 new adopters:\nCTS Calypso Networks Association You are interested in being listed as an adopter of Eclipse Keyple? Follow this link: https://iot.eclipse.org/adopters/\nYou would like to get in touch with other Keyple friends, or to be informed of the latest news about Keyple?\nIf you are a Keyple contributor: first subscribe to the keyple-dev mailing list, then post a message to keyple-dev@eclipse.org\nIf you are a Keyple user: first subscribe to the keyple-user mailing list, then post a message to keyple-user@eclipse.org.\nMoreover, everyone is welcome to contribute to the Eclipse Keyple project.\nIn particular there is the possibility to include inside the Eclipse Keyple project additional specific plugins.\nThe Keyple project provides also the possibility to reference external add-ons: open source or closed add-ons like additional plugins, card extensions, specific libraries.\nTerminal manufacturers could also reference their terminal solutions based on Keyple.\nEclipse Keyple team\n","date":1640084400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748333675,"objectID":"da6b1e86cdab53b9910c8d3603bf7e0b","permalink":"https://keyple.org/post/2-new-adopters-cts-and-cna/","publishdate":"2021-12-21T12:00:00+01:00","relpermalink":"/post/2-new-adopters-cts-and-cna/","section":"post","summary":"Welcome to 2 new adopters of Eclipse Keyple®!","tags":["Eclipse","Keyple","adopters"],"title":"2 new adopters of Eclipse Keyple®","type":"post"},{"authors":["Calypso Networks Association"],"categories":["News"],"content":"Dear Keyple friends,\nEclipse Keyple is pleased to welcome 6 new adopters: Bluebird, Coppernic, Flowbird, Ile-de-France Mobilités, SNCF, SopraSteria.\nYou are interested in being listed as an adopter of Eclipse Keyple? Follow this link: https://iot.eclipse.org/adopters/\nYou would like to get in touch with other Keyple friends, or to be informed of the latest news about Keyple?\nIf you are a Keyple contributor: first subscribe to the keyple-dev mailing list, then post a message to keyple-dev@eclipse.org\nIf you are a Keyple user: first subscribe to the keyple-user mailing list, then post a message to keyple-user@eclipse.org.\nMoreover, everyone is welcome to contribute (https://keyple.org/community/contributing/) to the Eclipse Keyple project.\nIn particular there is the possibility to include inside the Eclipse Keyple project additional specific plugins.\nThe Keyple project provides also the possibility to reference external add-ons (https://keyple.org/external-resources/): open source or closed add-ons like additional plugins, card extensions, specific libraries.\nTerminal manufacturers could also reference their terminal solutions based on Keyple (https://keyple.org/external-resources/).\nEclipse Keyple team\n","date":1639047600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748333675,"objectID":"686114f68ccec19709906e9f4bb50a45","permalink":"https://keyple.org/post/6-new-adopters/","publishdate":"2021-12-09T12:00:00+01:00","relpermalink":"/post/6-new-adopters/","section":"post","summary":"Welcome to 6 new adopters of Eclipse Keyple®!","tags":["Eclipse","Keyple","adopters"],"title":"6 new adopters of Eclipse Keyple®","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"All the components of Eclipse Keyple Java have been release in version 2.0.0:\nat the core level: the Keyple Service, the Plugin API, the shared references, the helper functions, and the card resource manager, the distribution module inluding: the remote API, the remote lib, the local API, the local lib, the network messaging lib, the card extension libraries for generic card, and Calypso card, the standard plugins for PC/SC, Stub reader, NFC Android, and OMAPI Android. The components have no longer dependency on each other and can evolve separately. Keyple Java follows now the version 1.0 of the Calypso terminal API defined by the Calypso Networks Association.\n","date":1633518e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"044868e24c9230bbadaa956095979439","permalink":"https://keyple.org/post/release-2-0-0-java/","publishdate":"2021-10-06T12:00:00+01:00","relpermalink":"/post/release-2-0-0-java/","section":"post","summary":"Version 2.0.0 of the Java implementation of Eclipse Keyple® was released on October 06, 2021.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","Ticketing","Calypso"],"title":"Release 2.0.0 of Eclipse Keyple® Java","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"We are pleased to announce that the version 0.9.0 of the C++ implementation of Eclipse Keyple® was released January 26th, 2021.\nThis 0.9.0 C++ Keyple implementation follows the API design for the 0.9.0 Java Keyple implementation.\nNew simplifications are introduced on the Calypso API. Keyple 0.8 had a high-level API for building map commands, but the map response data needed to be parsed with a low-level API. The Calypso 0.9.0 API provided a high-level API for retrieving map response data from a map image for which the file structure could be browsed. The Core 0.9.0 has also made the reader observation function more reliable in order to be notified in case of card withdrawal. C++ API reference\nBuild your first C++ application\nThe source of Keyple C++ is available on https://github.com/eclipse-keyple/keyple-cpp. Some dedicated support is provided on keyple.org:\nthe documentation of the C++ API a guide to Build a first C++ application ","date":1611665876,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"857c7e6e71885778697df385b67d141c","permalink":"https://keyple.org/post/release-0-9-0-cpp/","publishdate":"2021-01-26T14:57:56+02:00","relpermalink":"/post/release-0-9-0-cpp/","section":"post","summary":"Version 0.9.0 of the Java implementation of Eclipse Keyple® was released January 26, 2021.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","OpenSolutions","Ticketing","MaaS","CNA"],"title":"Release 0.9.0 C++ on the field","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"The release 1.0.0 of Eclipse Keyple® Java is available.\nMost of the improvements concerns the Keyple Core:\nthe new Core extension to manage “distributed architecture” and operate remote smart card readers, some packages \u0026amp; classes renaming to facilitate the understanding, the setting of smart card reader has also been simplified. The NFC \u0026amp; OMAPI Android plugins have been optimized for all Android versions from 4.4. A new Keyple website provides the documentation and guides to handle the Keyple solution.\n","date":1608222281,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"645ecdec44738be2a777ceaa4263992b","permalink":"https://keyple.org/post/release-1-0-0-java/","publishdate":"2020-12-17T17:24:41+01:00","relpermalink":"/post/release-1-0-0-java/","section":"post","summary":"Version 1.0.0 of the Java implementation of Eclipse Keyple® was released December 17, 2020.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","OpenSolutions","Ticketing","MaaS","CNA"],"title":"Release 1.0.0 of Eclipse Keyple® Java","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Events"],"content":"Are you a mobility aggregator, a system integrator, an event manager, a developer or a multi-mobility startup? Do you want to have easy access to a highly secure and interoperable standard, Calypso®, to reduce your costs and accelerate your developments, to move from a black box to an open and modular solution with access to multiple hardware platforms, to enable partnerships with multimodal transport, building facilities including parking, tourism and events… or just discover what Eclipse Keyple® is and how it works?\nOn October 15, 2020, we organized a webinar Eclipse Keyple® for Developers!\nSee the whole event on video: Discover the presentation.\n","date":1601038643,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"893cbaacbce8fe50e13670aac253661a","permalink":"https://keyple.org/post/webinar-eclipse-keyple-developers-oct15-2020/","publishdate":"2020-09-25T14:57:23+02:00","relpermalink":"/post/webinar-eclipse-keyple-developers-oct15-2020/","section":"post","summary":"Are you a mobility aggregator, a system integrator, an event manager, a developer or a multi-mobility startup?","tags":["Eclipse","Keyple","Events","OpenSource","Middleware","API","OpenSolutions","Ticketing","MaaS","CNA","Mobility"],"title":"Webinar Eclipse Keyple® for Developers, Thursday, October 15, 2020 ","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Release"],"content":"We are pleased to announce that the version 0.9.0 of the Java implementation of Eclipse Keyple® was released September 11th, 2020.\nThe main improvement on the Calypso® extension is the addition of high-level API to manage the portable object response. Now the APDU responses of the Calypso® cards are automatically parsed to fill card images. Currently all the components of Eclipse Keyple® Java are following the same versioning.\nFrom the version 1.0.0 scheduled for November 2020, the components will be defined with their own versioning in order to stabilize as possible the different APIs.\nDocumentation currently available:\nthe project plan, the guides of the different public API, and a guide to manage the migration between the release 0.8.1 \u0026amp; 0.9.0. ","date":1600433876,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"b73458a3048ddd5b999490db1ff58736","permalink":"https://keyple.org/post/release-0-9-0-java/","publishdate":"2020-09-18T14:57:56+02:00","relpermalink":"/post/release-0-9-0-java/","section":"post","summary":"Version 0.9.0 of the Java implementation of Eclipse Keyple® was released September 11, 2020.","tags":["Eclipse","Keyple","Release","OpenSource","Middleware","API","OpenSolutions","Ticketing","MaaS","CNA"],"title":"Release 0.9.0 Java on the field","type":"post"},{"authors":["Calypso Networks Association"],"categories":["Events"],"content":"On October 17, 2019, we organized the first Meet Up Eclipse Keyple®! Great moments of exchanges around the first Open Source Middleware for Ticketing with Benoît Boute, Nicolas Generali, Pierre Terree, Hicham Elbizy, Benoist Laforge, Gaël Blondelle, Camille Moulin, Philippe Vappereau, Valentina Zajackowski. Many thanks to them for their interventions and also to Manon Chaix, Jean-Pierre Fortune, Olivier Delcroix, Ludovic Teixeira Costa and all the participants!\nSee the whole event on video: Discover the presentation.\nDiscover the photos.\n","date":1571270400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713339923,"objectID":"33404383739ed4d1c8c4bd9333070a94","permalink":"https://keyple.org/post/first-meetup-eclipse-keyple/","publishdate":"2019-10-17T00:00:00Z","relpermalink":"/post/first-meetup-eclipse-keyple/","section":"post","summary":"On October 17, 2019, we organized the first Meet Up Eclipse Keyple®!","tags":["Eclipse","Keyple","Events","OpenSource","Middleware","API","OpenSolutions","Ticketing","MaaS","CNA"],"title":"First Meet Up Eclipse Keyple®","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717503679,"objectID":"a023ea807be020b0a812ec1267d6df98","permalink":"https://keyple.org/suppliers/avantronics/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/suppliers/avantronics/","section":"suppliers","summary":"Technological solutions for public transportation, specialized in the development of tools that optimize mobility.","tags":["Tools","Development"],"title":"Avantronics S.A De C.V.","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1730904674,"objectID":"d742e8cd14ea3fb3624fc362f9d21e3b","permalink":"https://keyple.org/suppliers/cna/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/suppliers/cna/","section":"suppliers","summary":"As initiator of the Keyple project, CNA offers numerous additional resources such as reader plugins, demonstrations, tools, training and support for implementing Keyple.","tags":["Reader plugins","Demos","Tools","Training"],"title":"Calypso Networks Association","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1718616305,"objectID":"c4137cfd42f1b3e2445895220b59d860","permalink":"https://keyple.org/suppliers/semovi/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/suppliers/semovi/","section":"suppliers","summary":"SEMOVI, the public transport authority for Mexico City, develops card personalization and auditing tools. These tools are not only for internal use but also cater to the needs of the city's public transport operators.","tags":["Tools"],"title":"Secretaría de Movilidad (Mexico City)","type":"book"},{"authors":null,"categories":null,"content":"\nSpringCard is happy to contribute to the Keyple project by providing a plugin that makes it possible to use SpringCard PC/SC couplers from a stock Android tablet or mobile phone.\nThe plugin works\nwith all SpringCard PC/SC over USB devices. This includes all the SpringCard Puck family (for instance SpringCard Puck One, featuring contactless+SAM: https://www.springcard.com/en/products/puck-one), SpringCard Prox’N’Roll (https://www.springcard.com/en/products/proxnroll-pcsc-hsp) and virtually all PC/SC over USB (CCID) devices.\nThe Android host must be a complete USB host (https://developer.android.com/guide/topics/connectivity/usb/host). USB on-the-go (OTG) is not enough! Pay attention that the Android host must also be able to provide enough power to the reader (more than 250mA), which is not the case for many tablets and mobile phones. Using a USB 3 hub with power delivery is generally the solution.\nwith SpringCard PC/SC over BLE (Bluetooth Low Energy) devices. First BLE PC/SC reader in SpringCard’s portfolio is SpringCard Puck Blue (https://www.springcard.com/en/products/puck-blue). Other devices will be introduced in the future. The Android host must support BLE (https://developer.android.com/guide/topics/connectivity/bluetooth/ble-overview).\nThe plugin is hosted on GitHub: https://github.com/springcard/android-keyple\nIt is based on SpringCard’s PC/SC-Like for Android libraries (https://github.com/springcard/android-pcsclike) that connects to the reader in BLE or USB using only ‘user-land’ methods.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715778400,"objectID":"0a94d29c8cfaa2ce27df237d1c902460","permalink":"https://keyple.org/suppliers/springcard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/suppliers/springcard/","section":"suppliers","summary":"SpringCard is happy to contribute to the Keyple project by providing a plugin that makes it possible to use SpringCard PC/SC couplers from a stock Android tablet or mobile phone.","tags":["Reader plugins"],"title":"SpringCard","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1718891050,"objectID":"c7ba0d66d356fd8ce5574c298a5cfbc9","permalink":"https://keyple.org/testimonials/billettique-services/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/testimonials/billettique-services/","section":"testimonials","summary":"_\"We have been among the earliest adopters of Keyple. The Keyple libraries are central to the success of our ticketing software stack. Using keyple's Calypso libraries, we built a solid ticketing solution able to use all Calypso products at their full potential. The few problems we had were quickly fixed by the reactive and attentive team behind the Keyple solution. With the recent addition of Calypso PKI to the solution, we are convinced using Keyple has been the right choice.\"_","tags":["System integrator","Access control / Validation","Card inspection","Rights loading","Personalization","Embedded local reader","Distributed remote reader"],"title":"Billettique Services","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1716476888,"objectID":"39767b1b435ec3a889ccae5cf9450cc8","permalink":"https://keyple.org/adopters-and-testimonials/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/adopters-and-testimonials/","section":"","summary":"","tags":null,"title":"Adopters \u0026 Testimonials","type":"landing"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin Android NFC Library is an add-on to manage Android NFC readers.\nTherefore, it should be used only by application developers.\nIt is compatible with Android 4.4 minimum.\nJava component 3.1.0 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-android-nfc-java-lib:3.1.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-android-nfc-java-lib:3.1.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-android-nfc-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"3037efa9377718b2fdab5cf290fd85b8","permalink":"https://keyple.org/components/standard-reader-plugins/keyple-plugin-android-nfc-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/keyple-plugin-android-nfc-lib/","section":"components","summary":"Add-on to manage Android NFC readers.","tags":null,"title":"Keyple Plugin Android NFC Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin Android OMAPI Library is an add-on to manage Android OMAPI readers.\nTherefore, it should be used only by application developers.\nIt is compatible with Android 4.4 minimum.\nOMAPI (Open Mobile Application Programming Interface) is the mechanism which enables an authorized mobile app to communicate with applets within a SE in a device. This allows the app to benefit from enhanced SE-based security services.\nJava component 2.1.0 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-android-omapi-java-lib:2.1.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-android-omapi-java-lib:2.1.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-android-omapi-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"d32ef240879a22eecff45c9d73508755","permalink":"https://keyple.org/components/standard-reader-plugins/keyple-plugin-android-omapi-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/keyple-plugin-android-omapi-lib/","section":"components","summary":"Add-on to manage Android OMAPI readers.","tags":null,"title":"Keyple Plugin Android OMAPI Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Card Calypso Library is an add-on to manage Calypso® cards.\nTherefore, it should be used only by application developers.\nFor card transactions that need to be secured by cryptographic calculations using symmetrical keys (SAM or HSM) or asymmetrical keys (PKI), it is mandatory to use one of the dedicated crypto libraries (Open SAM, Legacy SAM, PKI). At present, only the Calypso Crypto Legacy SAM library is available. Java component 3.1.9 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.9\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-java-lib:3.1.9\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-card-calypso-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.9\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"77c2172456847a24c30695861f25b904","permalink":"https://keyple.org/components/card-extensions/keyple-card-calypso-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/card-extensions/keyple-card-calypso-lib/","section":"components","summary":"Add-on to manage Calypso® cards.","tags":null,"title":"Keyple Card Calypso Library","type":"book"},{"authors":null,"categories":null,"content":" This library is currently in Beta version as it implements the Keypop Calypso Crypto Legacy SAM API, which is also in Beta. While it’s nearly stable, future migration steps might be necessary. We aim to minimize any changes you’ll need to make. The Keyple Card Calypso Crypto Legacy SAM Library is an add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc.).\nTherefore, it should be used only by application developers.\nJava component 0.9.0 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-crypto-legacysam-java-lib:0.9.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-card-calypso-crypto-legacysam-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.9.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"fb761574f776efdd607a0dd36d567380","permalink":"https://keyple.org/components/card-extensions/keyple-card-calypso-crypto-legacysam-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/card-extensions/keyple-card-calypso-crypto-legacysam-lib/","section":"components","summary":"Add-on to manage Calypso® legacy SAMs (SAM-C1, HSM-C1, etc...).","tags":null,"title":"Keyple Card Calypso Crypto Legacy SAM Library","type":"book"},{"authors":null,"categories":null,"content":" This library is currently in Beta version. While it’s nearly stable, future migration steps might be necessary. We aim to minimize any changes you’ll need to make. The Keyple Card Calypso Crypto PKI Library is an add-on to enable Calypso® PKI card transactions.\nTherefore, it should be used only by application developers.\nJava component 0.2.3 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-card-calypso-crypto-pki-java-lib:0.2.3\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-card-calypso-crypto-pki-java-lib:0.2.3\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-card-calypso-crypto-pki-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"939375bd53dff571dc0145c7bda79a9f","permalink":"https://keyple.org/components/card-extensions/keyple-card-calypso-crypto-pki-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/card-extensions/keyple-card-calypso-crypto-pki-lib/","section":"components","summary":"Add-on to enable Calypso® PKI card transactions.","tags":null,"title":"Keyple Card Calypso Crypto PKI Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin Card Resource Library is a PoolPlugin to manage readers provided by the Card Resource Service.\nTherefore, it should be used only by application developers.\nThe main role of the plugin is to allow remote access to the Card Resource Service via the Keyple Distributed Solution components. It provides an interface for allocating and deallocating readers by profiles that are part of those configured at the Card Resource Service level.\nA typical use would be for the realization of a server providing cryptographic services through a pool of SAMs, each inserted in a dedicated PC/SC reader.\nJava component 2.0.1 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-cardresource-java-lib:2.0.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-cardresource-java-lib:2.0.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-cardresource-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"dbff61aec0e5ff663f293dd5d85c1d41","permalink":"https://keyple.org/components/standard-reader-plugins/keyple-plugin-cardresource-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/keyple-plugin-cardresource-lib/","section":"components","summary":"Add-on to manage readers provided by the Card Resource Service.","tags":null,"title":"Keyple Plugin Card Resource Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Common API defines the public elements shared between all Keyple libraries.\nTherefore, it must be used by all developers.\nThe third version number (x.y.z) only concerns updates of the public API documentation because this component does not contain any implementation. Java component 2.0.2 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-common-java-api:2.0.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-common-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"61e021f71d47771393847e9e47872ae3","permalink":"https://keyple.org/components/core/keyple-common-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-common-api/","section":"components","summary":"Public API which defines the elements shared between all Keyple libraries.","tags":null,"title":"Keyple Common API","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Distributed Local API defines the internal API dedicated to the development of local services components of the Keyple distributed solution.\nTherefore, it must be used only by developers of custom local services.\nThe third version number (x.y.z) only concerns updates of the public API documentation because this component does not contain any implementation. Java component 2.2.1 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-local-java-api:2.2.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-distributed-local-java-api:2.2.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-local-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"c8ebc53d7f4733f722b52daf894d898e","permalink":"https://keyple.org/components/core/keyple-distributed-local-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-distributed-local-api/","section":"components","summary":"Internal API dedicated to the development of custom local services components of the Keyple distributed solution.","tags":null,"title":"Keyple Distributed Local API","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Distributed Remote API defines the internal API dedicated to the development of remote plugins components of the Keyple distributed solution.\nTherefore, it must be used only by developers of custom remote plugins.\nThe third version number (x.y.z) only concerns updates of the public API documentation because this component does not contain any implementation. Java component 3.1.1 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-remote-java-api:3.1.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-distributed-remote-java-api:3.1.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-remote-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"622dfc30d4b8a07c2ee57bf804b3f2d0","permalink":"https://keyple.org/components/core/keyple-distributed-remote-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-distributed-remote-api/","section":"components","summary":"Internal API dedicated to the development of custom remote plugins components of the Keyple distributed solution.","tags":null,"title":"Keyple Distributed Remote API","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1716476888,"objectID":"9fd2f8f75da50c7ac0756205df2f6f96","permalink":"https://keyple.org/external-resources/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/external-resources/","section":"","summary":"","tags":null,"title":"External resources","type":"landing"},{"authors":null,"categories":null,"content":"\nThe Keyple Card Generic Library is an add-on to manage cards with low-level API.\nTherefore, it should be used only by application developers.\nJava component 3.1.2 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-card-generic-java-lib:3.1.2\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-card-generic-java-lib:3.1.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-card-generic-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"0b82264f29087f889ae9ecb24cf3378c","permalink":"https://keyple.org/components/card-extensions/keyple-card-generic-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/card-extensions/keyple-card-generic-lib/","section":"components","summary":"Add-on to manage cards with low-level API.","tags":null,"title":"Keyple Card Generic Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Interop JSON API Client Library is a Kotlin Multiplatform client library designed to facilitate communication between non-Keyple client applications and Keyple servers.\nIt implements the Keyple Server JSON API and the Selection JSON Specification, enabling seamless data exchange over HTTP.\nThis library is fully compatible with Windows, Linux, macOS, Android and iOS platforms, allowing applications on these devices to easily interact with Keyple servers and access the full functionality of the Keyple ecosystem.\nKotlin Multiplatform components 0.1.6 Download GitHub Changelog Documentation API documentation User guide Download Here is a summary table describing the purpose and usage of each target module generated by this Kotlin Multiplatform library, including the root (no-suffix) module and platform-specific variants:\nArtifact ID Format Purpose Main Use Case keyple-interop-jsonapi-client-kmp-lib .jar Common code shared across all platforms Used by multiplatform consumers to pull platform variants keyple-interop-jsonapi-client-kmp-lib-jvm .jar Non-Android JVM applications Used in backend apps, desktop apps, or CLI keyple-interop-jsonapi-client-kmp-lib-android .aar Production Android apps Integrated into final APK/AAB builds keyple-interop-jsonapi-client-kmp-lib-iosarm64 .klib Real iOS devices (ARM64 architecture) Required for running the app on physical iPhones keyple-interop-jsonapi-client-kmp-lib-iossimulatorarm64 .klib iOS Simulator on Apple Silicon Macs (ARM64) Used for development/testing on simulators on M1/M2 Macs keyple-interop-jsonapi-client-kmp-lib-iosx64 .klib iOS Simulator on Intel-based Macs (x86_64) Used for development/testing on simulators on Intel Macs iOS artifact TBD iOS applications Integrated directly into final iOS apps Key Notes:\nThe root module serves as the entry point for consumers. When you add implementation(\u0026#34;[root-lib]\u0026#34;), Gradle automatically selects the correct variant (jvm, android, etc.) based on the target platform. The platform-specific modules (android, jvm, etc.) contain compiled code that can be executed or packaged directly. All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:[ARTIFACT_ID]:0.1.6\u0026#34;) implementation \u0026#39;org.eclipse.keyple:[ARTIFACT_ID]:0.1.6\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;[ARTIFACT_ID]\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.1.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752745145,"objectID":"5f53c0fb0266bf6c2e99dc2ba5a34362","permalink":"https://keyple.org/components/interop-components/keyple-interop-jsonapi-client-kmp-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/interop-components/keyple-interop-jsonapi-client-kmp-lib/","section":"components","summary":"A multiplatform client library implementing the Keyple Server JSON API and Selection JSON Specification to enable non-Keyple applications to interact with a Keyple server over HTTP.","tags":null,"title":"Keyple Interop JSON API Client Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Distributed Local Library is the part of the Keyple Distributed solution which contains all the local services.\nTherefore, it should be used only by developers of applications installed on the terminal having local access to the smart card reader but wishes to delegate all or part of the ticketing processing to a remote application.\nIt is compatible with Windows, Linux, macOS and Android platforms.\nJava component 2.5.2 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-local-java-lib:2.5.2\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-distributed-local-java-lib:2.5.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-local-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.5.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"38917adedffa4cf6a1237a202d531e1b","permalink":"https://keyple.org/components/distributed/keyple-distributed-local-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/distributed/keyple-distributed-local-lib/","section":"components","summary":"Part of the Keyple Distributed solution which contains all the local services.","tags":null,"title":"Keyple Distributed Local Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Interop Local Reader NFC Mobile Library is a Kotlin Multiplatform adapter that provides an implementation of the LocalReader SPI required by the Keyple Interop JSON API Client Library, specifically designed for mobile NFC readers.\nIt enables non-Keyple applications to interact with the built-in NFC readers of Android and iOS devices, making it possible to perform smart card communication in compliance with the Keyple interop model. This library is optimized for mobile platforms and serves as a bridge between the application logic and the device’s native NFC capabilities, facilitating seamless integration without requiring a full Keyple stack.\nKotlin Multiplatform components 0.1.6 Download GitHub Changelog Documentation API documentation User guide Download Here is a summary table describing the purpose and usage of each target module generated by this Kotlin Multiplatform library, including the root (no-suffix) module and platform-specific variants:\nArtifact ID Format Purpose Main Use Case keyple-interop-localreader-nfcmobile-kmp-lib .jar Common code shared across all platforms Used by multiplatform consumers to pull platform variants keyple-interop-localreader-nfcmobile-kmp-lib-jvm .jar Non-Android JVM applications Used in backend apps, desktop apps, or CLI keyple-interop-localreader-nfcmobile-kmp-lib-android .aar Production Android apps Integrated into final APK/AAB builds keyple-interop-localreader-nfcmobile-kmp-lib-iosarm64 .klib Real iOS devices (ARM64 architecture) Required for running the app on physical iPhones keyple-interop-localreader-nfcmobile-kmp-lib-iossimulatorarm64 .klib iOS Simulator on Apple Silicon Macs (ARM64) Used for development/testing on simulators on M1/M2 Macs keyple-interop-localreader-nfcmobile-kmp-lib-iosx64 .klib iOS Simulator on Intel-based Macs (x86_64) Used for development/testing on simulators on Intel Macs iOS artifact TBD iOS applications Integrated directly into final iOS apps Key Notes:\nThe root module serves as the entry point for consumers. When you add implementation(\u0026#34;[root-lib]\u0026#34;), Gradle automatically selects the correct variant (jvm, android, etc.) based on the target platform. The platform-specific modules (android, jvm, etc.) contain compiled code that can be executed or packaged directly. All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:[ARTIFACT_ID]:0.1.6\u0026#34;) implementation \u0026#39;org.eclipse.keyple:[ARTIFACT_ID]:0.1.6\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;[ARTIFACT_ID]\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.1.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; –\u0026gt;\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752745145,"objectID":"c2e83f352585d030ac63e8d1d2f11f4a","permalink":"https://keyple.org/components/interop-components/keyple-interop-localreader-nfcmobile-kmp-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/interop-components/keyple-interop-localreader-nfcmobile-kmp-lib/","section":"components","summary":"A multiplatform adapter providing a LocalReader SPI implementation to allow non-Keyple mobile applications to control their local NFC smart card reader.","tags":null,"title":"Keyple Interop Local Reader NFC Mobile Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Distributed Network Library is the part of the Keyple Distributed solution which contains the common network elements used by Local and Remote components.\nTherefore, it should be used only by developers of distributed applications.\nIt is compatible with Windows, Linux, macOS and Android platforms.\nJava component 2.5.1 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-distributed-network-java-lib:2.5.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-network-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.5.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"517276c33823d78c9a0297c117643144","permalink":"https://keyple.org/components/distributed/keyple-distributed-network-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/distributed/keyple-distributed-network-lib/","section":"components","summary":"Part of the Keyple Distributed solution which contains the common network elements used by Local and Remote components.","tags":null,"title":"Keyple Distributed Network Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin PC/SC Library is an add-on to manage PC/SC readers.\nTherefore, it should be used only by application developers.\nIt is compatible with PC/SC Reader (Windows PC/SC WinScard API, Unix PC/SC lite API) equipment.\nJava component 2.5.2 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.5.2\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.5.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-pcsc-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.5.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"772df3ab72dd76345927a52b6acfc230","permalink":"https://keyple.org/components/standard-reader-plugins/keyple-plugin-pcsc-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/keyple-plugin-pcsc-lib/","section":"components","summary":"Add-on to manage PC/SC readers.","tags":null,"title":"Keyple Plugin PC/SC Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin API defines the internal API dedicated to the development of reader plugins components.\nTherefore, it must be used only by developers of custom reader plugins.\nThe third version number (x.y.z) only concerns updates of the public API documentation because this component does not contain any implementation. Java component 2.3.2 Download GitHub Changelog Documentation API documentation Developer guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-java-api:2.3.2\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-java-api:2.3.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.3.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"1eef4ba724ee6facafd3b23a3e38cb9e","permalink":"https://keyple.org/components/core/keyple-plugin-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-plugin-api/","section":"components","summary":"Internal API dedicated to the development of custom reader plugins components.","tags":null,"title":"Keyple Plugin API","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin Storage Card API defines the internal API dedicated to standardize communication between Keyple plugins and APDU interpreters for storage card processing.\nTherefore, it must be used only by developers of custom reader plugins and storage card APDU interpreters.\nThe third version number (x.y.z) only concerns updates of the public API documentation because this component does not contain any implementation. Java component 1.0.0 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-storagecard-java-api:1.0.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-storagecard-java-api:1.0.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-storagecard-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748447850,"objectID":"3c0a5b3fef0edc514fc9e7b01922b4e8","permalink":"https://keyple.org/components/core/keyple-plugin-storagecard-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-plugin-storagecard-api/","section":"components","summary":"Internal API dedicated to the development of custom reader plugins components.","tags":null,"title":"Keyple Plugin Storage Card API","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Distributed Remote Library is the part of the Keyple Distributed solution which contains all the remote plugins.\nTherefore, it should be used only by developers of applications installed on the terminal not having local access to the smart card reader and that wishes to control the reader remotely.\nIt is compatible with Windows, Linux, macOS and Android platforms.\nJava component 2.5.1 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-distributed-remote-java-lib:2.5.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-distributed-remote-java-lib:2.5.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-distributed-remote-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.5.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"249e73c0dac22f5db50aca175dd6f811","permalink":"https://keyple.org/components/distributed/keyple-distributed-remote-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/distributed/keyple-distributed-remote-lib/","section":"components","summary":"Part of the Keyple Distributed solution which contains all the remote plugins.","tags":null,"title":"Keyple Distributed Remote Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Service Library contains the implementation of the core Keyple components and services, such as the smart card service, the card selection manager or the card and reader event manager.\nTherefore, it must be used only by application developers.\nJava component 3.3.5 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-service-java-lib:3.3.5\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-service-java-lib:3.3.5\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-service-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.3.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"ad30f096db6dee1baf5822dc9fef8ac6","permalink":"https://keyple.org/components/core/keyple-service-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-service-lib/","section":"components","summary":"Main library containing the implementation of the core Keyple components and services.","tags":null,"title":"Keyple Service Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Service Resource Library is an add-on providing profile-based card resource allocation mechanism.\nTherefore, it can be used by developers of applications or card extensions.\nJava component 3.1.0 Download GitHub Changelog Documentation API documentation User guide Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-service-resource-java-lib:3.1.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-service-resource-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"58f59cce77223a9e012336394aa83fb0","permalink":"https://keyple.org/components/core/keyple-service-resource-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-service-resource-lib/","section":"components","summary":"Add-on library providing profile-based card resource allocation mechanism.","tags":null,"title":"Keyple Service Resource Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Plugin Stub Library is an add-on to manage virtual readers and cards.\nTherefore, it should be used only by application developers.\nIt is compatible with Windows, Linux, macOS and Android platforms.\nJava component 2.2.1 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-plugin-stub-java-lib:2.2.1\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-plugin-stub-java-lib:2.2.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-plugin-stub-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"de9a69b6c7b9d8f8b37987529a316fc6","permalink":"https://keyple.org/components/standard-reader-plugins/keyple-plugin-stub-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/standard-reader-plugins/keyple-plugin-stub-lib/","section":"components","summary":"Add-on to manage virtual readers and cards.","tags":null,"title":"Keyple Plugin Stub Library","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keyple Util Library contains utility classes used by all Keyple libraries.\nTherefore, it can be used by all developers.\nSince this library is used by all Keyple libraries, it is recommended to import it explicitly. Java component 2.4.0 Download GitHub Changelog Documentation API documentation Download All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#34;) implementation \u0026#39;org.eclipse.keyple:keyple-util-java-lib:2.4.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keyple\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keyple-util-java-lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1732699212,"objectID":"5193c9df9e71376f3568e8685aab0f45","permalink":"https://keyple.org/components/core/keyple-util-lib/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/components/core/keyple-util-lib/","section":"components","summary":"Utility classes for Keyple components.","tags":null,"title":"Keyple Util Library","type":"book"}]