[
  {
    "url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20",
    "repository_url": "https://api.github.com/repos/eclipse/keyple-java-example",
    "labels_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20/labels{/name}",
    "comments_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20/comments",
    "events_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20/events",
    "html_url": "https://github.com/eclipse/keyple-java-example/issues/20",
    "id": 1445167381,
    "node_id": "I_kwDOF0CjTM5WI4EV",
    "number": 20,
    "title": "Compatibility with Calypso Light and Calypso Basic",
    "user": {
      "login": "AnnnSt",
      "id": 107677868,
      "node_id": "U_kgDOBmsIrA",
      "avatar_url": "https://avatars.githubusercontent.com/u/107677868?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnnnSt",
      "html_url": "https://github.com/AnnnSt",
      "followers_url": "https://api.github.com/users/AnnnSt/followers",
      "following_url": "https://api.github.com/users/AnnnSt/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnnnSt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnnnSt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnnnSt/subscriptions",
      "organizations_url": "https://api.github.com/users/AnnnSt/orgs",
      "repos_url": "https://api.github.com/users/AnnnSt/repos",
      "events_url": "https://api.github.com/users/AnnnSt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnnnSt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-11-11T09:07:24Z",
    "updated_at": "2022-11-21T01:53:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi @jeanpierrefortune \r\nGood day to you !\r\nSince the current use case examples are targeting for Calypso Prime, I would like to check with you whether the current Keyple terminal Java library is compatible with Calypso Light and Calypso Basic product? Do i need to modify the library or just the use cases?\r\nThanks a lot in advance \r\n\r\nBR \r\nAnn\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/20/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12",
    "repository_url": "https://api.github.com/repos/eclipse/keyple-java-example",
    "labels_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12/labels{/name}",
    "comments_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12/comments",
    "events_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12/events",
    "html_url": "https://github.com/eclipse/keyple-java-example/issues/12",
    "id": 1202647326,
    "node_id": "I_kwDOF0CjTM5HrvEe",
    "number": 12,
    "title": "READ and WRITE",
    "user": {
      "login": "androuino",
      "id": 14807340,
      "node_id": "MDQ6VXNlcjE0ODA3MzQw",
      "avatar_url": "https://avatars.githubusercontent.com/u/14807340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/androuino",
      "html_url": "https://github.com/androuino",
      "followers_url": "https://api.github.com/users/androuino/followers",
      "following_url": "https://api.github.com/users/androuino/following{/other_user}",
      "gists_url": "https://api.github.com/users/androuino/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/androuino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/androuino/subscriptions",
      "organizations_url": "https://api.github.com/users/androuino/orgs",
      "repos_url": "https://api.github.com/users/androuino/repos",
      "events_url": "https://api.github.com/users/androuino/events{/privacy}",
      "received_events_url": "https://api.github.com/users/androuino/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-04-13T01:45:14Z",
    "updated_at": "2022-05-26T02:34:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nGreate library btw. However, could you help me on how to implement the read and write to an NFC smart card reader?\r\n\r\n**My implementation of your library is like the below example**\r\n```\r\n    fun onKeyple() {\r\n        // Get the instance of the SmartCardService (singleton pattern)\r\n        smartCardService = SmartCardServiceProvider.getService()\r\n\r\n        // Register the PcscPlugin with the SmartCardService, get the corresponding generic plugin in\r\n        // return.\r\n        plugin = smartCardService?.registerPlugin(PcscPluginFactoryBuilder.builder().build())\r\n\r\n        // We add an observer to each plugin (only one in this example) the readers observers will be\r\n        // added dynamically upon plugin events notification. Nevertheless, here we provide the plugin\r\n        // observer with the readers already present at startup in order to assign them a reader\r\n        // observer.\r\n        Log.i(\"Add observer PLUGINNAME = $\", plugin?.name)\r\n        val pluginObserver = PluginObserver(plugin!!, smartCardService!!)\r\n        (plugin as ObservablePlugin).setPluginObservationExceptionHandler(pluginObserver)\r\n        (plugin as ObservablePlugin).addObserver(pluginObserver)\r\n\r\n        Log.i(\"Wait for reader or card insertion/removal\")\r\n\r\n        // Wait indefinitely. CTRL-C to exit.\r\n        synchronized(waitForEnd) { waitForEnd }\r\n\r\n\r\n        Log.i(\"Exit program.\")\r\n    }\r\n```\r\n**then my PluginOberser.kt class example is here**\r\n```\r\nimport org.calypsonet.terminal.reader.ObservableCardReader\r\nimport org.eclipse.keyple.core.service.*\r\nimport org.eclipse.keyple.core.service.spi.PluginObservationExceptionHandlerSpi\r\nimport org.eclipse.keyple.core.service.spi.PluginObserverSpi\r\nimport org.eclipse.keyple.core.util.protocol.ContactCardCommonProtocol\r\nimport org.eclipse.keyple.plugin.pcsc.PcscReader\r\nimport org.eclipse.keyple.plugin.pcsc.PcscSupportedContactProtocol\r\n\r\nclass PluginObserver(plugin: Plugin, smartCardService: SmartCardService) : PluginObserverSpi, PluginObservationExceptionHandlerSpi {\r\n    private var readerObserver: ReaderObserver? = null\r\n\r\n    init {\r\n        readerObserver = ReaderObserver(plugin, smartCardService)\r\n        for (reader in plugin.readers) {\r\n            if (reader is ObservableReader) {\r\n                addObserver(reader)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    override fun onPluginEvent(event: PluginEvent) {\r\n        when (event.type) {\r\n            PluginEvent.Type.READER_CONNECTED -> {\r\n                for (readerName in event.readerNames) {\r\n                    // We retrieve the reader object from its name.\r\n                    val reader: Reader = SmartCardServiceProvider.getService()\r\n                        .getPlugin(event.pluginName)\r\n                        .getReader(readerName)\r\n                    Log.i(\r\n                        \"PluginEvent: PLUGINNAME = %s, READERNAME = %s, Type = %s\",\r\n                        event.pluginName,\r\n                        readerName,\r\n                        event.type\r\n                    )\r\n                    // We are informed here of a connection of a reader. We add an observer to this reader if\r\n                    // this is possible.\r\n                    Log.i(\"New reader! READERNAME = %s\", readerName)\r\n\r\n                    // Configure the reader with parameters suitable for contactless operations.\r\n                    setupReader(reader)\r\n                    if (reader is ObservableReader) {\r\n                        addObserver(reader)\r\n                    }\r\n                }\r\n            }\r\n            PluginEvent.Type.READER_DISCONNECTED -> {\r\n                if (event.readerNames.isNotEmpty()) {\r\n                    for (readerName in event.readerNames) {\r\n                        // We retrieve the reader object from its name.\r\n                        val reader: Reader = SmartCardServiceProvider.getService()\r\n                            .getPlugin(event.pluginName)\r\n                            .getReader(readerName)\r\n                        Log.i(\r\n                            \"PluginEvent: PLUGINNAME = %s, READERNAME = %s, Type = %s\",\r\n                            event.pluginName,\r\n                            readerName,\r\n                            event.type\r\n                        )\r\n                        // We are informed here of a disconnection of a reader. The reader object still exists but\r\n                        // will be removed from the reader list right after. Thus, we can properly remove the\r\n                        // observer attached to this reader before the list update.\r\n                        Log.i(\"Reader removed. READERNAME = %s\", readerName)\r\n                        if (reader is ObservableReader) {\r\n                            Log.i(\"Clear observers of READERNAME = %s\", readerName)\r\n                            reader.clearObservers()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else -> Log.i(\"Unexpected reader event. EVENT = %s\", event.type.name)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     *\r\n     * @since 2.0.0\r\n     */\r\n    override fun onPluginObservationError(pluginName: String?, e: Throwable?) {\r\n        Log.e(\"An exception occurred in plugin %s, %s\", pluginName, e)\r\n    }\r\n\r\n    /**\r\n     * Configure the reader to handle ISO14443-4 contactless cards\r\n     *\r\n     * @param reader The reader.\r\n     */\r\n    private fun setupReader(reader: Reader) {\r\n        reader\r\n            .getExtension(PcscReader::class.java)\r\n            .setContactless(true)\r\n            .setIsoProtocol(PcscReader.IsoProtocol.T1)\r\n            .setSharingMode(PcscReader.SharingMode.SHARED)\r\n\r\n        // Activate the ISO14443 card protocol.\r\n        /*(reader as ConfigurableReader)\r\n            .activateProtocol(\r\n                PcscSupportedContactlessProtocol.ISO_14443_4.name,\r\n                ContactlessCardCommonProtocol.ISO_14443_4.name\r\n            )*/\r\n        (reader as ConfigurableReader).activateProtocol(PcscSupportedContactProtocol.ISO_7816_3.name, ContactCardCommonProtocol.ISO_7816_3.name)\r\n    }\r\n\r\n    /**\r\n     * Add the unique observer to the provided observable reader.\r\n     *\r\n     * @param reader An observable reader\r\n     */\r\n    private fun addObserver(reader: Reader) {\r\n        Log.i(\"Add observer READERNAME = %s\", reader.name)\r\n        (reader as ObservableReader).setReaderObservationExceptionHandler(readerObserver)\r\n        reader.addObserver(readerObserver)\r\n        reader.startCardDetection(ObservableCardReader.DetectionMode.REPEATING)\r\n    }\r\n}\r\n```\r\n\r\n**and my ReaderObserver.kt is**\r\n```\r\nimport org.calypsonet.terminal.reader.CardReaderEvent\r\nimport org.calypsonet.terminal.reader.spi.CardReaderObservationExceptionHandlerSpi\r\nimport org.calypsonet.terminal.reader.spi.CardReaderObserverSpi\r\nimport org.eclipse.keyple.core.service.*\r\nimport org.eclipse.keyple.plugin.pcsc.PcscReader\r\n\r\nclass ReaderObserver(private val plugin: Plugin, private val smartCardService: SmartCardService) : CardReaderObserverSpi, CardReaderObservationExceptionHandlerSpi {\r\n\r\n    override fun onReaderEvent(event: CardReaderEvent) {\r\n        /* just log the event */\r\n        Log.i(\r\n            \"Event: PLUGINNAME = %s, READERNAME = %s, EVENT = %s\",\r\n            (event as ReaderEvent).pluginName,\r\n            event.getReaderName(),\r\n            event.getType().name\r\n        )\r\n        when (event.type) {\r\n            CardReaderEvent.Type.CARD_MATCHED -> {\r\n            }\r\n            CardReaderEvent.Type.CARD_INSERTED -> {\r\n                Log.i(\"Card is inserted %s\", \"\")\r\n                val readerName: String = plugin.readerNames.first()\r\n                val reader = plugin.getReader(readerName)\r\n                val cardSelectionManager = smartCardService.createCardSelectionManager()\r\n                val selectionResult = cardSelectionManager.processCardSelectionScenario(reader)\r\n                val smartCard = selectionResult.activeSmartCard\r\n                Log.i(\"Response ${smartCard.selectApplicationResponse}\")\r\n                reader.getExtension(PcscReader::class.java).setContactless(false)\r\n\r\n                (SmartCardServiceProvider.getService()\r\n                    .getPlugin(event.pluginName)\r\n                    .getReader(event.getReaderName()) as ObservableReader)\r\n                    .finalizeCardProcessing()\r\n            }\r\n            CardReaderEvent.Type.CARD_REMOVED -> {\r\n                var scsp = (SmartCardServiceProvider.getService()\r\n                    .getPlugin(event.pluginName)\r\n                    .getReader(event.getReaderName()) as ObservableReader)\r\n                    .finalizeCardProcessing()\r\n            }\r\n            else -> {}\r\n        }\r\n    }\r\n\r\n    override fun onReaderObservationError(pluginName: String?, readerName: String?, e: Throwable?) {\r\n        Log.i(\"An exception occurred in plugin '%s', reader '%s'. exception %s\", pluginName, readerName, e?.message)\r\n    }\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/eclipse/keyple-java-example/issues/12/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
