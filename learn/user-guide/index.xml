<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User guides | Eclipse Keyple</title><link>https://keyple.org/learn/user-guide/</link><atom:link href="https://keyple.org/learn/user-guide/index.xml" rel="self" type="application/rss+xml"/><description>User guides</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2020-2023 The Eclipse Keyple® project. All Rights Reserved.</copyright><image><url>https://keyple.org/media/logo.svg</url><title>User guides</title><link>https://keyple.org/learn/user-guide/</link></image><item><title>Standalone Application User Guide</title><link>https://keyple.org/learn/user-guide/standalone-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/standalone-application/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>A standalone application is an application that runs in a device in contact
with the end user.&lt;/p>
&lt;p>It has at least one local smart card reader and manages itself the
interaction with the user.&lt;/p>
&lt;p>The diagram below illustrates the organization of a standalone application based on Keyple:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/standalone-application/standalone_application_overview.drawio.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;br>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
If you are new to Keyple, read the &lt;a href="../../learn/overview/key-concepts/">key concepts&lt;/a> page and familiarize yourself with the fundamentals behind Keyple.
&lt;/div>
&lt;/div>
&lt;ol>
&lt;li>Access to the &lt;a href="#the-smart-card-service">smart card service&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-a-plugin">Set up a plugin&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-a-reader">Set up a reader&lt;/a>&lt;/li>
&lt;li>&lt;a href="#select-a-card">Select a card&lt;/a>&lt;/li>
&lt;li>&lt;a href="#perform-a-transaction">Perform a transaction&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="the-smart-card-service">The smart card service&lt;/h2>
&lt;p>As part of Keyple Service component, the smart card service is the main service of Keyple. Its role is to centralize the add-on resources and to manage their
life cycle.&lt;/p>
&lt;p>The service is accessible by invoking the &lt;code>SmartCardServiceProvider.getService()&lt;/code> static method.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('2', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-2">SmartCardService smartCardService = SmartCardServiceProvider.getService();&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="set-up-a-plugin">Set up a plugin&lt;/h2>
&lt;p>The Keyple application developer will choose the reader plugins he needs
according to the equipment on which the Keyple application will run.&lt;/p>
&lt;p>For example, if the environment is PC-based, the PC/SC plugin will probably, but not necessarily, be chosen.
For an Andoid terminal environment, the plugin could be the standard
Android NFC plugin or one of the plugins available from the industrial
partners of the project.&lt;/p>
&lt;p>For a complete list of available plugins, please see
the &lt;a href="https://keyple.org/components/standard-reader-plugins/">standard reader plugins&lt;/a>,
the &lt;a href="https://keyple.org/components/specific-reader-plugins/">specific reader plugins&lt;/a>
or one of our &lt;a href="https://keyple.org/external-resources/external-add-ons/">partners reader plugins&lt;/a>.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
A new plugin can also be &lt;a href="../../learn/developer-guide/reader-plugin-add-on/">created&lt;/a> if there is no plugin for the intended hardware.
&lt;/div>
&lt;/div>
&lt;h3 id="access-to-a-plugin">Access to a plugin&lt;/h3>
&lt;p>To access a plugin at the application level, it must first be registered with the smart card service via the &lt;code>registerPlugin(...)&lt;/code> method.
It will be necessary to provide an implementation of the &lt;code>KeyplePluginExtensionFactory&lt;/code> interface.
This factory is provided by the API of the used plugin.&lt;/p>
&lt;p>Depending on the capabilities of the hardware, the plugin factory may or may not offer specific configuration options.
Please refer to the API of the plugin component you are considering to see what is appropriate for your application.&lt;/p>
&lt;p>The registration provides in return an implementation of one of the &lt;code>Plugin&lt;/code>, &lt;code>ObservablePlugin&lt;/code> or &lt;code>PoolPlugin&lt;/code> interfaces depending on the type of target plugin.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
A plugin is identified by a unique name in the system so that it can be retrieved at any time from the smart card service.
&lt;/div>
&lt;/div>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-8">// Here is for example the registration of the PC/SC plugin
Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build());&lt;/code>&lt;/pre>
&lt;h3 id="configure-a-plugin">Configure a plugin&lt;/h3>
&lt;p>Some plugin types may offer specific options.&lt;/p>
&lt;p>Static options are usually directly exposed by the plugin factory API while dynamic options are exposed by the plugin extension API.&lt;/p>
&lt;p>To access the plugin extension it is necessary to invoke the &lt;code>getExtension(...)&lt;/code> method on the registered &lt;code>Plugin&lt;/code> by specifying the expected class of the extension which must extends the &lt;code>KeyplePluginExtension&lt;/code> interface.
After that, the dedicated methods are available from the resulting object.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('9', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-9">// Here is a snippet showing the usage of the extension of the Stub plugin
plugin
.getExtension(StubPlugin.class)
.unplugReader(&amp;#34;READER_1&amp;#34;);&lt;/code>&lt;/pre>
&lt;h3 id="monitor-a-plugin">Monitor a plugin&lt;/h3>
&lt;div class="alert alert-warning">
&lt;div>
The plugin monitoring only applies to hardware environments in which the readers are removable.
Moreover, only plugins of type &lt;code>ObservablePlugin&lt;/code> can be monitored.
&lt;/div>
&lt;/div>
&lt;p>The observation of reader connections and disconnections is achieved
through a background task managed by Keyple Service.&lt;/p>
&lt;p>To enable these observation mechanisms, it is imperative to provide:&lt;/p>
&lt;ul>
&lt;li>a plugin observer implementing the &lt;code>PluginObserverSpi&lt;/code> interface to be notified of plugin events,&lt;/li>
&lt;li>an exception handler implementing the &lt;code>PluginObservationExceptionHandlerSpi&lt;/code> interface to be notified of errors that may occur during the monitoring or events notifications.&lt;/li>
&lt;/ul>
&lt;p>These two interfaces are available in the &lt;code>org.eclipse.keyple.core.service.spi&lt;/code> package of the Keyple Service component.&lt;/p>
&lt;p>Here is an example of a plugin observer class including an exception handler:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('11', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-11">class PluginObserver implements PluginObserverSpi, PluginObservationExceptionHandlerSpi {
@Override
public void onPluginEvent(PluginEvent event) {
switch (event.getEventType()) {
case READER_CONNECTED:
// here the processing to be done when a reader is connected
...
break;
case READER_DISCONNECTED:
// here the processing to be done when a reader is disconnected
...
break;
default:
break;
}
}
@Override
public void onPluginObservationError(String pluginName, Throwable e) {
// handle here the plugin exceptions raised while observing the readers
...
}
}&lt;/code>&lt;/pre>
&lt;p>In order to access the dedicated setters, the plugin has to be cast to &lt;code>ObservablePlugin&lt;/code>.&lt;/p>
&lt;p>Since adding an observer will cause the Keyple Service to check for the presence of an exception handler,
the definition of the exception handler must be done first.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('12', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-12">PluginObserver pluginObserver = new PluginObserver();
((ObservablePlugin) plugin).setPluginObservationExceptionHandler(pluginObserver);
((ObservablePlugin) plugin).addObserver(pluginObserver);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
Note that the monitoring thread only works if there is at least one observer registered, and the notification process is sequential and synchronous.
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="set-up-a-reader">Set up a reader&lt;/h2>
&lt;p>The readers are provided by the plugins, that&amp;rsquo;s why you have to &lt;a href="#set-up-a-plugin">set up the plugin&lt;/a> first.&lt;/p>
&lt;h3 id="access-to-a-reader">Access to a reader&lt;/h3>
&lt;p>The hardware readers already connected are referenced in the system during the registration of the plugin.
For observable plugins, the references of the connected readers are updated in real time.&lt;/p>
&lt;p>Readers are accessible directly from the associated &lt;code>Plugin&lt;/code> instance.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('14', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-14">// Here is an example to get the 1st available reader
String readerName = plugin.getReaderNames().get(0);
CardReader reader = plugin.getReader(readerName);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
Depending on the type of plugin, the reader names are
more or less dynamic (e.g. a PC/SC based system vs. an embedded
terminal), it is sometimes necessary to implement an identification
mechanism in order to assign the right reader to the right place in the
system (for example by using regular expressions).
&lt;/div>
&lt;/div>
&lt;h3 id="configure-a-reader">Configure a reader&lt;/h3>
&lt;p>There are two types of configuration. Their availability depends on the characteristics of the reader:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The reader is an instance of &lt;code>ConfigurableCardReader&lt;/code>:&lt;br>
It is then possible to activate or deactivate the protocols supported by the reader.&lt;/p>
&lt;div class="alert alert-note">&lt;div>Use of these methods may be optional if the application does not intend to target products by protocol filtering.&lt;/div>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>The reader&amp;rsquo;s extension API exposes specific options:&lt;br>
To access the reader extension it is necessary to invoke the &lt;code>getReaderExtension(...)&lt;/code> method on the &lt;code>Plugin&lt;/code> instance by specifying the expected class of the extension (which must extends the &lt;code>KeypleReaderExtension&lt;/code> interface) and the reader&amp;rsquo;s name.
After that, the dedicated methods, if any, are available from the resulting object.
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('16', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-16">// Here is a snippet showing how to get and use the extension of the Stub reader
plugin
.getReaderExtension(StubReader.class, readerName)
.removeCard();&lt;/code>&lt;/pre>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="monitor-a-reader">Monitor a reader&lt;/h3>
&lt;div class="alert alert-warning">
&lt;div>
The reader monitoring only applies to hardware environments in which the smart cards are removable.
Moreover, only readers of type &lt;code>ObservableCardReader&lt;/code> can be monitored.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Observation of the readers is optional in Keyple. It facilitates an event-driven programming mode, but an application
developer can choose not to observe a reader, either because this reader is not designed to manage card insertions/withdrawals (for example an
Android OMAPI reader or a SAM reader), or because the application is designed to directly manage the presence of a card (see to &lt;code>isCardPresent&lt;/code> method of the
&lt;code>CardReader&lt;/code> interface).
&lt;/div>
&lt;/div>
&lt;p>The observation of card insertions and removals is achieved
through a background task managed by Keyple Service.&lt;/p>
&lt;p>To enable these observation mechanisms, it is imperative to provide:&lt;/p>
&lt;ul>
&lt;li>a reader observer implementing the &lt;code>CardReaderObserverSpi&lt;/code> interface to be notified of reader events,&lt;/li>
&lt;li>an exception handler implementing the &lt;code>CardReaderObservationExceptionHandlerSpi&lt;/code> interface to be notified of errors that may occur during the monitoring or events notifications.&lt;/li>
&lt;/ul>
&lt;p>These two interfaces are available in the &lt;code>org.eclipse.keypop.reader.spi&lt;/code> package of the &lt;strong>Keypop Reader API&lt;/strong> component.&lt;/p>
&lt;p>Here is an example of a reader observer class including an exception handler:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('19', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-19">class ReaderObserver implements CardReaderObserverSpi, CardReaderObservationExceptionHandlerSpi {
@Override
public void onReaderEvent(CardReaderEvent event) {
switch (event.getType()) {
case CardReaderEvent.Type.CARD_INSERTED:
// here the processing to be done when a card is inserted
...
break;
case CardReaderEvent.Type.CARD_REMOVED:
// here the processing to be done when a card is removed
...
break;
default:
break;
}
}
@Override
public void onReaderObservationError(String pluginName, String readerName, Throwable e) {
// handle here the reader exceptions raised while observing the cards
...
}
}&lt;/code>&lt;/pre>
&lt;p>In order to access the dedicated setters, the reader has to be cast to &lt;code>ObservableCardReader&lt;/code>.&lt;/p>
&lt;p>Since adding an observer will cause the Keyple Service to check for the presence of an exception handler,
the definition of the exception handler must be done first.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('20', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-20">ReaderObserver readerObserver = new ReaderObserver();
((ObservableCardReader) reader).setReaderObservationExceptionHandler(readerObserver);
((ObservableCardReader) reader).addObserver(readerObserver);
((ObservableCardReader) reader).startCardDetection(ObservableCardReader.DetectionMode.REPEATING);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
Note that the &lt;code>startCardDetection(...)&lt;/code> and &lt;code>stopCardDetection()&lt;/code> methods start and stop the monitoring thread.
The API offers different options to manage the needs around card detection.&lt;br>
Moreover, the notification process is sequential and synchronous.
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="select-a-card">Select a card&lt;/h2>
&lt;p>The starting point of any processing done with a card in the Keyple environment, is to reference this card in the system.
It is the role of the selection step to obtain this reference.&lt;/p>
&lt;p>You have first to prepare a selection scenario defining the eligible cards for a transaction, then to execute the scenario when a card is present.&lt;/p>
&lt;h3 id="prepare-a-scenario">Prepare a scenario&lt;/h3>
&lt;p>To prepare a scenario, you have to get a new instance of &lt;code>CardSelectionManager&lt;/code> from the smart card service using the
&lt;code>getReaderApiFactory().createCardSelectionManager()&lt;/code> method,
then configure it with scenario cases using dedicated methods provided by one or more card extensions.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('22', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-22">CardSelectionManager cardSelectionManager = smartCardService.getReaderApiFactory().createCardSelectionManager();&lt;/code>&lt;/pre>
&lt;p>The &lt;code>prepareSelection(...)&lt;/code> method allows to add a selection case to the scenario by providing a specific &lt;code>CardSelector&lt;/code>
and an implementation of the &lt;code>CardSelectionExtension&lt;/code> interface.
The method will return the index of the added case in order to be able to identify later the case that matched.&lt;/p>
&lt;p>Please note that the order of addition is important because it will impact the selection cycle and favor the performance
of the first added cases.&lt;/p>
&lt;p>Providing one or more selection cases to the &lt;code>CardSelectionManager&lt;/code> constitutes a selection scenario.
The scenario is run by Keyple Service when a card is detected, the different cases being evaluated
sequentially as long as the card does not match the criteria of the defined cases.&lt;/p>
&lt;p>The selection process for a case offers several options for selecting a processing based on the type of card presented
to the reader.&lt;/p>
&lt;p>It is based on a filtering process according to three possible criteria, each of which is optional:&lt;/p>
&lt;ul>
&lt;li>the communication protocol of the card (usually also identifying a card technology),&lt;/li>
&lt;li>the power-on data collected by the reader when the card is detected (e.g. the Answer To Reset),&lt;/li>
&lt;li>the ISO standard application identifier (AID) used to perform a Select Application command.&lt;/li>
&lt;/ul>
&lt;p>When a card is inserted, it is evaluated according to these criteria and will be given the status &amp;ldquo;selected&amp;rdquo; or not.&lt;/p>
&lt;p>When a card is not selected, no other operation will be possible with it.&lt;/p>
&lt;p>The same card could correspond to several cases of the same scenario, especially when filtering by AID.
By default, the selection process will stop at the first case that matches.
It is however possible to choose another strategy using the &lt;code>setMultipleSelectionMode()&lt;/code> method.
In this case, the process will continue to the last selection case in the scenario and return all results,
but only the last matching application will be selected.&lt;/p>
&lt;p>When a card is selected, the &lt;code>CardSelectionManager&lt;/code> will make available the result
as a &lt;code>SmartCard&lt;/code> (or &lt;code>IsoSmartCard&lt;/code> if an &lt;code>IsoCardSelector&lt;/code> is used) containing all the information known about the
card at that stage.&lt;/p>
&lt;p>Depending on the card extension that is used, this &lt;code>SmartCard&lt;/code> object can be cast to a more
comprehensive object with specific features defined by the extension.&lt;/p>
&lt;p>In addition to the selection process itself, specific APDU commands may be sent to the card if the selection is
successful.
The output of these commands is available in the instance of the &lt;code>SmartCard&lt;/code> object.&lt;/p>
&lt;p>The following snippet shows the preparation of two selection cases using the generic card extension:
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('23', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-23">// prepare a selection for application 1
int firstCaseIndex = cardSelectionManager.prepareSelection(
smartCardService.getReaderApiFactory()
.createIsoCardSelector()
.filterByDfName(AID1),
GenericExtensionService.getInstance()
.createGenericCardSelectionExtension());
// prepare a selection for application 2
int secondCaseIndex = cardSelectionManager.prepareSelection(
smartCardService.getReaderApiFactory()
.createIsoCardSelector()
.filterByDfName(AID2),
GenericExtensionService.getInstance()
.createGenericCardSelectionExtension());&lt;/code>&lt;/pre>&lt;/p>
&lt;h3 id="run-a-scenario">Run a scenario&lt;/h3>
&lt;p>If we know that the card is in the reader it is possible to run a selection scenario by invoking the &lt;code>processCardSelectionScenario(...)&lt;/code> method on the corresponding reader.
The result of the selection is then directly returned.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('24', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-24">// Actual card communication: run the selection scenario.
CardSelectionResult selectionResult = cardSelectionManager.processCardSelectionScenario(reader);
// Get the SmartCard resulting of the selection.
SmartCard smartCard = selectionResult.getActiveSmartCard();
// Check the selection result.
if (smartCard == null) {
throw new IllegalStateException(&amp;#34;The selection of the card failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;h3 id="schedule-a-scenario">Schedule a scenario&lt;/h3>
&lt;p>If the reader is of type &lt;code>ObservableCardReader&lt;/code> then it is possible to schedule in advance the execution of a selection scenario as soon as a card is presented.&lt;/p>
&lt;p>Invoke the &lt;code>scheduleCardSelectionScenario(...)&lt;/code> to register the previously prepared scenario in the observable reader.&lt;/p>
&lt;p>In this case, it is necessary to register a reader observer and to have started the card detection in order to be able to retrieve the result of the selection which will be contained in a &lt;code>CardReaderEvent&lt;/code>.&lt;/p>
&lt;p>Use the &lt;code>parseScheduledCardSelectionsResponse(...)&lt;/code> method to extract the selection result from the event.&lt;/p>
&lt;p>Note that the scheduling of the execution of a scenario includes the &lt;code>NotificationMode&lt;/code> option allowing to choose if
only the cards matching the selection (successfully selected) should trigger an event.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('25', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-25">...
@Override
public void onReaderEvent(CardReaderEvent event) {
try {
switch (event.getType()) {
case CardReaderEvent.Type.CARD_MATCHED:
// Retrieve the selected smart card
SmartCard smartCard =
cardSelectionManager
.parseScheduledCardSelectionsResponse(event.getScheduledCardSelectionsResponse())
.getActiveSmartCard();
// Perform the transaction
...
break;
default:
break;
}
} finally {
// Ensures that the communication channel is closed, regardless of the processing with the card.
((ObservableCardReader) (reader)).finalizeCardProcessing();
}
}
...&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>The &lt;code>finalizeCardProcessing()&lt;/code> method must be invoked at the end of the transaction to ensure that the communication
channel is closed.
This switches the underlying monitoring thread into a state of waiting for the card to be removed.&lt;/p>
&lt;p>Not doing this can lead to blocking states of the card insertion/removal monitoring mechanism.&lt;/p>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="perform-a-transaction">Perform a transaction&lt;/h2>
&lt;p>Once the smart card is referenced in the system it is possible to perform the desired transaction using the appropriate
card extension.&lt;/p>
&lt;p>When the transaction is completed, if the reader is observed, it is imperative to invoke the &lt;code>finalizeCardProcessing()&lt;/code>
method on the observable reader (see the above note).&lt;/p>
&lt;br>
&lt;h2 id="unregister-a-plugin">Unregister a plugin&lt;/h2>
&lt;p>To shut down a Keyple application properly, it is necessary to free the resources and in particular to close opened card
physical channels and stop the observation threads.&lt;/p>
&lt;p>This is done by unregistering the plugins in the following way:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('27', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-27">smartCardService.unregisterPlugin(plugin.getName());&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-reader-api/" target="_blank" rel="noopener">Keypop Reader API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-common-java-api" target="_blank" rel="noopener">Keyple Common API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-service-java-lib" target="_blank" rel="noopener">Keyple Service API&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">Java examples&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Distributed Application User Guide</title><link>https://keyple.org/learn/user-guide/distributed-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/distributed-application/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Keyple provides the &amp;ldquo;Keyple Distributed&amp;rdquo; solution which allows an application to communicate with a smart card reader
interfaced with another host.&lt;/p>
&lt;p>In this way, you can manage transactions seamlessly within a distributed architecture.&lt;/p>
&lt;p>The &amp;ldquo;Keyple Distributed&amp;rdquo; solution can be deployed in two ways:&lt;/p>
&lt;ul>
&lt;li>both client and server embed Keyple components,&lt;/li>
&lt;li>only the server embeds Keyple components, the client has its own libraries to communicate with its card reader.&lt;/li>
&lt;/ul>
&lt;p>The diagram below illustrates the first way, the use of the Keyple Distributed components when both client and
server embed Keyple components (note that the card reader can be either client-side or server-side):&lt;/p>
&lt;figure id="figure-keyple-on-both-client-and-server-sides">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_solution_1_layers_overview.drawio.svg" alt="Keyple on both client and server sides" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple on both client and server sides
&lt;/figcaption>&lt;/figure>
&lt;p>The diagram below illustrates the second way, the architecture with a client not running Keyple but connected to a
server based on Keyple:&lt;/p>
&lt;figure id="figure-keyple-on-server-side-only">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_solution_2_layers_overview.drawio.svg" alt="Keyple on server side only" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple on server side only
&lt;/figcaption>&lt;/figure>
&lt;h3 id="user-guides">User guides&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="#fully-keyple-distributed-application">How to build a fully Keyple distributed application&lt;/a>&lt;/li>
&lt;li>&lt;a href="../../learn/user-guide/server-json-api/">How to make a non-Keyple client interact with a Keyple-based server application&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heading">&lt;/h2>
&lt;hr>
&lt;h2 id="fully-keyple-distributed-application">Fully Keyple distributed application&lt;/h2>
&lt;p>Steps:&lt;/p>
&lt;ol>
&lt;li>In pre-requisite, read &lt;a href="../../learn/user-guide/standalone-application/">Standalone Application User Guide&lt;/a> to understand the main concepts of Keyple in a standalone application.&lt;/li>
&lt;li>Learn &lt;a href="#concepts">main terms and concepts&lt;/a> of the Keyple Distributed solution.&lt;/li>
&lt;li>Find your &lt;a href="#usage-modes">usage mode&lt;/a>. This will help you to determine exactly which library and API to use.&lt;/li>
&lt;li>&lt;a href="#download">Import&lt;/a> into your project the libraries specified by your usage mode.&lt;/li>
&lt;li>Implement the transport layer adapted to your &lt;a href="#network-configuration">network configuration&lt;/a>.&lt;/li>
&lt;li>Implement your ticketing services as specified in the associated usage mode.&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;p>Here are the main concepts to keep in mind before continuing to read this user guide:&lt;/p>
&lt;div id="concepts-table-1">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Concept&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Remote Lib&lt;/strong>&lt;/td>
&lt;td>This is the &lt;code>keyple-distributed-remote-java-lib&lt;/code> library.&lt;br>It must be imported and used by the application installed on the host not having local access to the smart card reader and that wishes to control the reader remotely.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Local Lib&lt;/strong>&lt;/td>
&lt;td>This is the &lt;code>keyple-distributed-local-java-lib&lt;/code> library.&lt;br>It must be imported and used by the application installed on the host having local access to the smart card reader but wishes to delegate all or part of the ticketing processing to a remote application.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Network Lib&lt;/strong>&lt;/td>
&lt;td>This is the &lt;code>keyple-distributed-network-java-lib&lt;/code> library.&lt;br>It must always be imported because it contains the network elements used by &lt;strong>Remote Lib&lt;/strong> and &lt;strong>Local Lib&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Plugin&lt;/strong>&lt;/td>
&lt;td>Part of the &lt;strong>Remote Lib&lt;/strong>, this is a Keyple reader plugin extension which provides only &lt;strong>Remote Readers&lt;/strong> to the application. It manages data exchanges with the &lt;strong>Local Service&lt;/strong>. This reader plugin extension must be registered to the smart card service like any Keyple reader plugin.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Reader&lt;/strong>&lt;/td>
&lt;td>Part of the &lt;strong>Remote Lib&lt;/strong>, this is a Keyple reader extension which has some specificities:&lt;br>- each remote reader is connected to a local reader;&lt;br>- any command sent by the application to a remote reader will be forwarded to the associated local reader;&lt;br>- in some cases only, an event occurring on a local reader or plugin will be automatically forwarded to the associated remote reader or plugin.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Local Service&lt;/strong>&lt;/td>
&lt;td>Part of the &lt;strong>Local Lib&lt;/strong>, this is a Keyple distributed local service extension which ensures data exchange between the &lt;strong>Remote Plugin&lt;/strong> and local plugins and readers. It must be registered to the smart card service.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory&lt;/strong>&lt;/td>
&lt;td>&lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> each have a specific factory class to initialize them.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Node&lt;/strong>&lt;/td>
&lt;td>&lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> each are bind to a specific internal node which is responsible for the interfacing with the &lt;strong>Network Endpoint&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Network Endpoint&lt;/strong>&lt;/td>
&lt;td>At the user&amp;rsquo;s charge, this component ensures the network exchanges between the &lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> nodes.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;style>
#concepts-table-1 table th:first-of-type {
width: 130px;
}
&lt;/style>
&lt;p>The diagram below illustrates the main functional concepts through a standard use case:&lt;/p>
&lt;figure id="figure-concepts---main-use-case">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_concepts_1.svg" alt="Concepts - Main use case" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Concepts - Main use case
&lt;/figcaption>&lt;/figure>
&lt;p>The second diagram below illustrates an arbitrary more complex possible use case with several hardware readers connected to different hosts.&lt;/p>
&lt;p>These could be for example a ticketing reloading service, where the business logic would be on the host without local readers, with thin clients on A &amp;amp; B hosts communicating locally with the cards.&lt;/p>
&lt;p>In this use case, the Keyple Distributed solution is use for card communication.&lt;/p>
&lt;figure id="figure-concepts---one-remote-plugin-connected-to-many-local-services">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_concepts_2.svg" alt="Concepts - One remote plugin connected to many local services" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Concepts - One remote plugin connected to many local services
&lt;/figcaption>&lt;/figure>
&lt;p>Here is another example, but this time it illustrates several remote plugins connected to the same local service.&lt;/p>
&lt;p>These could be for example ticketing terminals with transaction logic, which communicate locally with cards, but which do not have SAM, and which use a SAM server with hardware reader.&lt;/p>
&lt;p>In this use case, the Keyple Distributed solution is use for SAM communication.&lt;/p>
&lt;figure id="figure-concepts---many-remote-plugins-connected-to-one-local-service">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_concepts_3.svg" alt="Concepts - Many remote plugins connected to one local service" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Concepts - Many remote plugins connected to one local service
&lt;/figcaption>&lt;/figure>
&lt;br>
&lt;h2 id="usage-modes">Usage modes&lt;/h2>
&lt;p>The Keyple Distributed solution offers two different usage modes, each one having a specific API designed on a &lt;strong>Client-Server&lt;/strong> model:&lt;/p>
&lt;div id="plugins-table-1">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Usage mode&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="#reader-client-side">Reader Client Side&lt;/a>&lt;/td>
&lt;td>Allows a &lt;strong>server&lt;/strong> application to control a smart card reader available on a &lt;strong>client&lt;/strong> (e.g. Card reader).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#reader-server-side">Reader Server Side&lt;/a>&lt;/td>
&lt;td>Allows a &lt;strong>client&lt;/strong> application to control a smart card reader available on a &lt;strong>server&lt;/strong> (e.g. SAM reader, HSM).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;style>
#plugins-table-1 table th:first-of-type {
width: 190px;
}
&lt;/style>
&lt;p>Each mode provides a different &lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> and their associated factories.&lt;/p>
&lt;p>In an application, it is possible to use simultaneously several usage modes and as many instances of a usage mode as you want, as long as the components are initialized with different names.&lt;/p>
&lt;h3 id="reader-client-side">Reader Client Side&lt;/h3>
&lt;p>This usage mode allows a &lt;strong>server&lt;/strong> application to control a smart card reader available on a &lt;strong>client&lt;/strong> (e.g. Card reader).&lt;/p>
&lt;p>In this mode, the client is the initiator of the application processing following the local plugin or reader events (reader connection/disconnection or card insertion/removal).&lt;/p>
&lt;p>He can hand over to the server whenever he wants to perform a remote ticketing service on a card present in one of his local readers.&lt;/p>
&lt;p>The table below shows the classes and interfaces available for this usage mode.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;*&amp;rdquo; come from the &lt;strong>Keypop Reader API&lt;/strong>.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;**&amp;rdquo; come from the &lt;strong>Keyple Service API&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>Client&lt;/th>
&lt;th>Server&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Library to use&lt;/strong>&lt;/td>
&lt;td>Local Lib&lt;/td>
&lt;td>Remote Lib&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory builder to be used&lt;/strong>&lt;/td>
&lt;td>&lt;code>LocalServiceClientFactoryBuilder&lt;/code>&lt;/td>
&lt;td>&lt;code>RemotePluginServerFactoryBuilder&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory to be registered&lt;/strong>&lt;/td>
&lt;td>&lt;code>LocalServiceClientFactory&lt;/code>&lt;/td>
&lt;td>&lt;code>RemotePluginServerFactory&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Local Service / Remote Plugin&lt;/strong>&lt;/td>
&lt;td>&lt;code>DistributedLocalService&lt;/code> **&lt;/td>
&lt;td>&lt;code>ObservablePlugin&lt;/code> **&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Local Service / Remote Plugin extension&lt;/strong>&lt;/td>
&lt;td>&lt;code>LocalServiceClient&lt;/code>&lt;/td>
&lt;td>&lt;code>RemotePluginServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader&lt;/strong>&lt;/td>
&lt;td>Any kind of reader&lt;/td>
&lt;td>&lt;code>CardReader&lt;/code> *&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader extension&lt;/strong>&lt;/td>
&lt;td>Device specific&lt;/td>
&lt;td>&lt;code>RemoteReaderServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-warning">
&lt;div>
It is the responsibility of the client application to observe and configure the local plugins and readers.
&lt;/div>
&lt;/div>
&lt;h4 id="operating-mode">OPERATING MODE&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Server&lt;/strong>
&lt;ol>
&lt;li>Build an instance of the &lt;code>RemotePluginServerFactory&lt;/code> using the &lt;code>RemotePluginServerFactoryBuilder&lt;/code> class, specifying a unique name for the &lt;strong>Remote Plugin&lt;/strong> to be registered and your network endpoint implementation if required.&lt;/li>
&lt;li>Register the &lt;strong>Remote Plugin&lt;/strong> to the smart card service by providing the previously built factory.&lt;/li>
&lt;li>Cast the registered plugin into an &lt;code>ObservablePlugin&lt;/code> and add an event observer to it.&lt;br>&lt;div class="alert alert-note">&lt;div>Please note that this remote plugin is observable only to trigger ticketing services on the server side, but does not allow observation on the local plugin such as reader connection or disconnection.&lt;/div>&lt;/div>&lt;/li>
&lt;li>Await for events of type &lt;code>PluginEvent.Type.READER_CONNECTED&lt;/code>.&lt;br>&lt;div class="alert alert-note">&lt;div>This type of event indicates to the server that a client asks it to perform a specific ticketing service using the connected remote reader.&lt;/div>&lt;/div>&lt;/li>
&lt;li>When an event occurs, you must retrieve the connected remote reader from the registered plugin using the name of the reader contained in the event.&lt;br>&lt;div class="alert alert-note">&lt;div>Please note that the remote reader is strictly an instance of &lt;code>CardReader&lt;/code>, even if the local reader is an &lt;code>ObservableCardReader&lt;/code>.&lt;br>This usage mode does not allow to observe reader events such as card insertion or removal from the server.&lt;br>It is the responsibility of the client to observe the local reader if needed, then to ask the server to execute a specific remote service depending on the case.&lt;/div>&lt;/div>&lt;/li>
&lt;li>Use information inside the &lt;code>RemoteReaderServer&lt;/code> extension of the remote reader to identify the ticketing service to execute.&lt;/li>
&lt;li>Execute the specified ticketing service using the remote reader and all of its other information.&lt;/li>
&lt;li>End the remote ticketing service by invoking the associated method provided by the &lt;code>RemotePluginServer&lt;/code> extension of the remote plugin.&lt;br>It is then possible to send additional information to the client if necessary.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Client&lt;/strong>
&lt;ol>
&lt;li>Build an instance of the &lt;code>LocalServiceClientFactory&lt;/code> using the &lt;code>LocalServiceClientFactoryBuilder&lt;/code> class, specifying a unique name for the &lt;strong>Local Service&lt;/strong> to be registered and your network endpoint implementation.&lt;/li>
&lt;li>Register the &lt;strong>Local Service&lt;/strong> to the smart card service by providing the previously built factory.&lt;/li>
&lt;li>Register at least a local plugin to the smart card service and get the name of the local reader to connect to the server.&lt;/li>
&lt;li>Execute the desired remote service by invoking the associated method provided by the &lt;code>LocalServiceClient&lt;/code> extension of the local service by specifying the identifier of the ticketing service to be executed, the name of the target local reader, and transmitting to the server if necessary the contents of the previously read smart card or additional information.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="reader-server-side">Reader Server Side&lt;/h3>
&lt;p>This usage mode allows a &lt;strong>client&lt;/strong> application to control a smart card reader or a pool of smart card readers available on a &lt;strong>server&lt;/strong> (e.g. SAM reader, HSM).&lt;/p>
&lt;p>The Keyple Distributed solution offers for this usage mode a remote control of all types of plugins (&lt;code>Plugin&lt;/code>, &lt;code>ObservablePlugin&lt;/code>, &lt;code>PoolPlugin&lt;/code>):&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Regular plugin&lt;/strong> (&lt;code>Plugin&lt;/code> or &lt;code>ObservablePlugin&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>During the remote plugin registration process, the client automatically creates a remote reader for each local reader of the set of local plugins on the server.&lt;/p>
&lt;p>If the factory has been properly configured, then the remote plugin and reader behave like the local plugins and readers.&lt;/p>
&lt;p>It is then possible to observe directly from the client the plugin and/or reader events (reader connection/disconnection or card insertion/removal) if desired.&lt;/p>
&lt;p>The table below shows the classes and interfaces available for this usage mode in the case of a &lt;strong>regular plugin&lt;/strong>.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;*&amp;rdquo; come from the &lt;strong>Keypop Reader API&lt;/strong>.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;**&amp;rdquo; come from the &lt;strong>Keyple Service API&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>Client&lt;/th>
&lt;th>Server&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Library to use&lt;/strong>&lt;/td>
&lt;td>Remote Lib&lt;/td>
&lt;td>Local Lib&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory builder to be used&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePluginClientFactoryBuilder&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServerFactoryBuilder&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory to be registered&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePluginClientFactory&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServerFactory&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Plugin / Local Service&lt;/strong>&lt;/td>
&lt;td>&lt;code>Plugin&lt;/code> ** or&lt;br>&lt;code>ObservablePlugin&lt;/code> **&lt;/td>
&lt;td>&lt;code>DistributedLocalService&lt;/code> **&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Plugin / Local Service extension&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePluginClient&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader&lt;/strong>&lt;/td>
&lt;td>&lt;code>CardReader&lt;/code> * or&lt;br>&lt;code>ObservableCardReader&lt;/code> *&lt;/td>
&lt;td>Any kind of reader&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader extension&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemoteReaderClient&lt;/code>&lt;/td>
&lt;td>Device specific&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>Pool plugin&lt;/strong> (&lt;code>PoolPlugin&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>The dynamic reader allocation process will search for the first available reader among all or a subset of the pool plugins registered on the server.&lt;/p>
&lt;p>It is possible to define during the configuration phase of the local service factory a filter on the names of the pool plugins to use.&lt;/p>
&lt;p>The table below shows the classes and interfaces available for this usage mode in the case of a &lt;strong>pool plugin&lt;/strong>.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;*&amp;rdquo; come from the &lt;strong>Keypop Reader API&lt;/strong>.&lt;br>
Interfaces marked with an asterisk &amp;ldquo;**&amp;rdquo; come from the &lt;strong>Keyple Service API&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>Client&lt;/th>
&lt;th>Server&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Library to use&lt;/strong>&lt;/td>
&lt;td>Remote Lib&lt;/td>
&lt;td>Local Lib&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory builder to be used&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePoolPluginClientFactoryBuilder&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServerFactoryBuilder&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Factory to be registered&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePluginClientFactory&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServerFactory&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Plugin / Local Service&lt;/strong>&lt;/td>
&lt;td>&lt;code>PoolPlugin&lt;/code> **&lt;/td>
&lt;td>&lt;code>DistributedLocalService&lt;/code> **&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Plugin / Local Service extension&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemotePluginClient&lt;/code>&lt;/td>
&lt;td>&lt;code>LocalServiceServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader&lt;/strong>&lt;/td>
&lt;td>&lt;code>CardReader&lt;/code> *&lt;/td>
&lt;td>Any kind of reader&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Reader extension&lt;/strong>&lt;/td>
&lt;td>&lt;code>RemoteReaderClient&lt;/code>&lt;/td>
&lt;td>Device specific&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-warning">
&lt;div>
Whatever the type of plugin, it is the responsibility of the server application to configure the local plugins and readers.
&lt;/div>
&lt;/div>
&lt;h4 id="operating-mode-1">OPERATING MODE&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Server&lt;/strong>
&lt;ol>
&lt;li>Build an instance of the &lt;code>LocalServiceServerFactory&lt;/code> using the &lt;code>LocalServiceServerFactoryBuilder&lt;/code> class, specifying a unique name for the &lt;strong>Local Service&lt;/strong> to be registered and your network endpoint implementation if required.&lt;/li>
&lt;li>Register the &lt;strong>Local Service&lt;/strong> to the smart card service by providing the previously built factory.&lt;/li>
&lt;li>Register at least a local plugin or pool plugin to the smart card service, depending on your case.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>Client&lt;/strong>
&lt;ol>
&lt;li>Build an instance of the &lt;code>RemotePluginClientFactory&lt;/code> using the &lt;code>RemotePluginClientFactoryBuilder&lt;/code> or &lt;code>RemotePoolPluginClientFactoryBuilder&lt;/code> class depends on the type of plugin that you want to manage, specifying a unique name for the &lt;strong>Remote Plugin&lt;/strong> to be registered and your network endpoint implementation.&lt;/li>
&lt;li>Register the &lt;strong>Remote Plugin&lt;/strong> to the smart card service by providing the previously built factory.&lt;/li>
&lt;li>Use the registered remote plugin as a local plugin.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="network-configuration">Network configuration&lt;/h2>
&lt;p>The Keyple Distributed solution &lt;strong>does not provide&lt;/strong> the network layer implementation, but it provides a set of SPIs (Service Provider Interfaces) to be implemented by the user in order to enable it to exchange data between &lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> components.&lt;/p>
&lt;h3 id="synchronous">Synchronous&lt;/h3>
&lt;p>Choose this mode if you want to implement a Client-Server &lt;strong>synchronous&lt;/strong> communication protocol, such as standard HTTP for example.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Client&lt;/th>
&lt;th>Server&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Network endpoint SPI to be implemented&lt;/td>
&lt;td>&lt;code>SyncEndpointClientSpi&lt;/code>&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Node API&lt;/td>
&lt;td>&lt;code>SyncNodeClient&lt;/code>&lt;/td>
&lt;td>&lt;code>SyncNodeServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Method to be used when initializing the factory&lt;/td>
&lt;td>&lt;code>withSyncNode(...)&lt;/code>&lt;/td>
&lt;td>&lt;code>withSyncNode()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Method provided by the remote plugin or local service extension&lt;br>to use to access the node&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;code>getSyncNode()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Here is the minimal algorithm to implement in a context with a &lt;strong>single server instance&lt;/strong>:&lt;/p>
&lt;figure id="figure-synchronous-network-implementation">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_synchronous.svg" alt="Synchronous network implementation" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Synchronous network implementation
&lt;/figcaption>&lt;/figure>
&lt;div class="alert alert-warning">
&lt;div>
In a context with several server instances, a mechanism must be implemented to ensure that all messages containing
a &lt;code>sessionId&lt;/code> are routed to the same server instance.
&lt;/div>
&lt;/div>
&lt;h3 id="asynchronous">Asynchronous&lt;/h3>
&lt;p>Choose this mode if you want to implement a Full-Duplex &lt;strong>asynchronous&lt;/strong> communication protocol, such as Web Sockets for example.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Client&lt;/th>
&lt;th>Server&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Network endpoint SPI to be implemented&lt;/td>
&lt;td>&lt;code>AsyncEndpointClientSpi&lt;/code>&lt;/td>
&lt;td>&lt;code>AsyncEndpointServerSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Node API&lt;/td>
&lt;td>&lt;code>AsyncNodeClient&lt;/code>&lt;/td>
&lt;td>&lt;code>AsyncNodeServer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Method to be used when initializing the factory&lt;/td>
&lt;td>&lt;code>withAsyncNode(...)&lt;/code>&lt;/td>
&lt;td>&lt;code>withAsyncNode(...)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Method provided by the remote plugin or local service extension&lt;br>to use to access the node&lt;/td>
&lt;td>&lt;code>getAsyncNode()&lt;/code>&lt;/td>
&lt;td>&lt;code>getAsyncNode()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Here is the minimal algorithm to implement:&lt;/p>
&lt;figure id="figure-asynchronous-network-implementation">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_asynchronous.svg" alt="Asynchronous network implementation" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Asynchronous network implementation
&lt;/figcaption>&lt;/figure>
&lt;h3 id="exchanged-data">Exchanged data&lt;/h3>
&lt;p>The data exchanged between &lt;strong>Remote Plugin&lt;/strong> and &lt;strong>Local Service&lt;/strong> components are contained in the DTO (Data Transfer Object) &lt;code>MessageDto&lt;/code>. It is built and processed by the plugin and &lt;strong>you don&amp;rsquo;t need to modify it&lt;/strong>.&lt;/p>
&lt;p>However, it is necessary in some contexts to access certain information such as the &lt;code>sessionId&lt;/code> in the case of communication with several server instances.&lt;/p>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-distributed-local-java-lib" target="_blank" rel="noopener">Local API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-distributed-network-java-lib" target="_blank" rel="noopener">Network API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-distributed-remote-java-lib" target="_blank" rel="noopener">Remote API&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">Java examples&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Server JSON API for non-Keyple clients</title><link>https://keyple.org/learn/user-guide/server-json-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/server-json-api/</guid><description>&lt;br>
&lt;style>
table th:nth-child(1) {
width: 9rem;
}
&lt;/style>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This guide is specifically designed for users who are not currently using Keyple in their terminals, but wish to connect
to a Keyple server. It details the JSON data exchange between the terminal and the server, but does not cover the
transport of this data.&lt;/p>
&lt;p>This allows the development of a distributed solution in which the client reader terminal delegates the entire
management of the card transaction to the server.&lt;/p>
&lt;p>The diagram below illustrates the architecture of a non-Keyple application installed on a terminal and connected to a
server based on Keyple:&lt;/p>
&lt;figure id="figure-keyple-on-server-side-only">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/distributed-application/distributed_solution_2_layers_overview.drawio.svg" alt="Keyple on server side only" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple on server side only
&lt;/figcaption>&lt;/figure>
&lt;h3 id="principle">Principle&lt;/h3>
&lt;p>The Keyple remote transaction uses four types of messages exchanged between the terminal and the server in JSON format:&lt;/p>
&lt;div id="principles-table-1">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Message&lt;/th>
&lt;th style="text-align:center">Direction&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="#execute-remote-service">Execute Remote Service&lt;/a>&lt;/td>
&lt;td style="text-align:center">To server&lt;/td>
&lt;td>Allows the terminal to request the server to start the remote ticketing transaction.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#command">Command&lt;/a>&lt;/td>
&lt;td style="text-align:center">From server&lt;/td>
&lt;td>Requests the terminal to process specific services with the card or the terminal&amp;rsquo;s reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#response">Response&lt;/a>&lt;/td>
&lt;td style="text-align:center">To server&lt;/td>
&lt;td>Allows the terminal to send to the server the responses to the services it has performed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#end-remote-service">End Remote Service&lt;/a>&lt;/td>
&lt;td style="text-align:center">From server&lt;/td>
&lt;td>Tells the terminal that the remote ticketing transaction is complete.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;style>
#principles-table-1 table th:nth-child(1) {
width: 10.5rem;
}
&lt;/style>
&lt;p>The diagram below shows the global messaging flow:&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---messaging-flow">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_messagingFlow.svg" alt="Keyple Distributed JSON API - Messaging flow" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - Messaging flow
&lt;/figcaption>&lt;/figure>
&lt;p>On its own initiative (e.g. following the detection of a card), the terminal sends to the server a
message of type &amp;ldquo;&lt;a href="#execute-remote-service">Execute Remote Service&lt;/a>&amp;rdquo; to ask it to start a card transaction.
At this step, the terminal has the ability to tell the server which business service to run and also to provide
additional custom input data.&lt;/p>
&lt;p>As long as the transaction is not completed, the terminal receives from the server messages of type &amp;ldquo;&lt;a href="#command">Command&lt;/a>&amp;rdquo;
containing the actions to be performed with the card or the terminal&amp;rsquo;s reader.
The responses are sent to the server in messages of type &amp;ldquo;&lt;a href="#response">Response&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>When the transaction is complete, the terminal receives from the server a final message
of type &amp;ldquo;&lt;a href="#end-remote-service">End Remote Service&lt;/a>&amp;rdquo; which optionally contains custom transaction output data.&lt;/p>
&lt;h3 id="data-structure">Data structure&lt;/h3>
&lt;p>Messages are in JSON format and have the following structure:&lt;/p>
&lt;div id="data-structure-table-1">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Message&lt;/th>
&lt;th style="text-align:center">Direction&lt;/th>
&lt;th style="text-align:center">JSON Structure&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="#execute-remote-service">Execute Remote Service&lt;/a>&lt;/td>
&lt;td style="text-align:center">To server&lt;/td>
&lt;td style="text-align:center">&lt;code>MessageDto&lt;/code>&lt;/td>
&lt;td>An object.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#command">Command&lt;/a>&lt;/td>
&lt;td style="text-align:center">From server&lt;/td>
&lt;td style="text-align:center">&lt;code>[ MessageDto ]&lt;/code>&lt;/td>
&lt;td>An array containing a single object.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#response">Response&lt;/a>&lt;/td>
&lt;td style="text-align:center">To server&lt;/td>
&lt;td style="text-align:center">&lt;code>MessageDto&lt;/code>&lt;/td>
&lt;td>An object.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#end-remote-service">End Remote Service&lt;/a>&lt;/td>
&lt;td style="text-align:center">From server&lt;/td>
&lt;td style="text-align:center">&lt;code>[ MessageDto ]&lt;/code>&lt;/td>
&lt;td>An array containing a single object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;style>
#data-structure-table-1 table th:nth-child(1) {
width: 10.5rem;
}
#data-structure-table-1 table th:nth-child(3) {
width: 8rem;
}
&lt;/style>
&lt;h3 id="api-specifications">API specifications&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="#api-20">API 2.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://keyple.org/server-json-apis/api-1-0/">API 1.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heading">&lt;/h2>
&lt;hr>
&lt;h2 id="api-20">API 2.0&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>This API is compliant with the following Keyple server side components:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/core/keyple-service-lib/">Keyple Service Library&lt;/a> version &lt;code>3.0.0+&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://keyple.org/components/distributed/keyple-distributed-network-lib/">Keyple Distributed Network Library&lt;/a> version &lt;code>2.3.0+&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://keyple.org/components/distributed/keyple-distributed-remote-lib/">Keyple Distributed Remote Library&lt;/a> version &lt;code>2.3.0+&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="messagedto">MessageDto&lt;/h2>
&lt;p>The diagram below shows the structure of the &lt;code>MessageDto&lt;/code> object but the detailed content will be described in the
sections associated with each message type:&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---messagedto">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_classDiagram_MessageDto.svg" alt="Keyple Distributed JSON API - MessageDto" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - MessageDto
&lt;/figcaption>&lt;/figure>
&lt;div class="alert alert-note">
&lt;div>
The value of the &lt;code>action&lt;/code> property determines the message type.
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="execute-remote-service">Execute Remote Service&lt;/h2>
&lt;p>The purpose of this message, sent to the server, is to initiate the server-controlled card
transaction.&lt;/p>
&lt;p>By using the identification properties provided by the terminal in its subsequent responses, the server ensures
consistent and accurate data flow management throughout the entire system.&lt;/p>
&lt;p>Following the transmission of this message, the server will return a message of type &amp;ldquo;&lt;a href="#command">Command&lt;/a>&amp;rdquo;,
containing the first action to be performed with the card or the terminal&amp;rsquo;s reader, or of type
&amp;ldquo;&lt;a href="#end-remote-service">End Remote Service&lt;/a>&amp;rdquo; to terminate the transaction.&lt;/p>
&lt;p>The following UML class diagram illustrates the structure of this object and may help to implement it in the development
language of the target terminal.&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---execute-remote-service-class-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_classDiagram_executeRemoteService.svg" alt="Keyple Distributed JSON API - &amp;#34;Execute Remote Service&amp;#34; class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - &amp;ldquo;Execute Remote Service&amp;rdquo; class diagram
&lt;/figcaption>&lt;/figure>
&lt;h4 id="messagedto-execute-remote-service">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The session identifier. It shall be unique per card transaction.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>EXECUTE_REMOTE_SERVICE&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier. It shall be unique per server.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (n/a)&lt;/strong>&lt;br>Null or absent.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader used to perform the card transaction. It shall be unique per terminal.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (n/a)&lt;/strong>&lt;br>Null or absent.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#executeremoteservicebody">ExecuteRemoteServiceBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="executeremoteservicebody">ExecuteRemoteServiceBody&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serviceId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the business service to be executed by the server. It&amp;rsquo;s a naming convention between the client and the server.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>inputData&lt;/code>&lt;/td>
&lt;td>&lt;strong>Object (optional)&lt;/strong>&lt;br>An optional object containing additional data to be provided to the remote business service. Its content is a convention between the client and the server.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="example">Example&lt;/h4>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-7">{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;EXECUTE_REMOTE_SERVICE&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;serviceId\&amp;#34;:\&amp;#34;AUTHENTICATE_CARD\&amp;#34;,\&amp;#34;inputData\&amp;#34;:{\&amp;#34;userId\&amp;#34;:\&amp;#34;7b13592c-0d21-429b-80d2-3dc565338ea3\&amp;#34;}}&amp;#34;
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="command">Command&lt;/h2>
&lt;p>The purpose of this message, received from the server, is to ask the terminal to perform a specific service with the
card or the terminal&amp;rsquo;s reader.&lt;/p>
&lt;p>There are four types of service potentially requested by the server:&lt;/p>
&lt;div id="command-table-1">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Service&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="#reader-type-cmd">Reader Type&lt;/a>&lt;/td>
&lt;td>Indicates if the reader is in contact or contactless mode.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#card-presence-cmd">Card Presence&lt;/a>&lt;/td>
&lt;td>Indicates if a card is present in the reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#card-selection-cmd">Card Selection&lt;/a>&lt;/td>
&lt;td>Establish a logical communication channel with a card and, if required, perform additional APDU exchanges with it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="#card-commands-cmd">Card Commands&lt;/a>&lt;/td>
&lt;td>Perform APDU exchanges with the selected card.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;style>
#command-table-1 table th:nth-child(1) {
width: 8rem;
}
&lt;/style>
&lt;p>Following the reception of this message, the terminal will send to the server a message of type
&amp;ldquo;&lt;a href="#response">Response&lt;/a>&amp;rdquo; containing the response of the operation.&lt;/p>
&lt;p>The following UML class diagram illustrates the structure of this object and may help to implement it in the development
language of the target terminal.&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---command-class-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_classDiagram_cmd.svg" alt="Keyple Distributed JSON API - &amp;#34;Command&amp;#34; class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - &amp;ldquo;Command&amp;rdquo; class diagram
&lt;/figcaption>&lt;/figure>
&lt;div class="alert alert-note">
&lt;div>
The value of the &lt;code>service&lt;/code> property determines the service to be performed.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;br>
&lt;h3 id="reader-type-cmd">Reader Type&lt;/h3>
&lt;p>This service allows the server to know if the reader is in contact or contactless mode.&lt;/p>
&lt;p>There are no parameters for this service.&lt;/p>
&lt;p>The terminal must then send the response to the server in a message of type
&amp;ldquo;&lt;a href="#reader-type-resp">Reader Type (Response)&lt;/a>&amp;rdquo;.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;h4 id="messagedto-reader-type-cmd">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>CMD&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#iscontactlesscmdbody">IsContactlessCmdBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="iscontactlesscmdbody">IsContactlessCmdBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>IS_CONTACTLESS&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-1">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('12', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-12">[
{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;CMD&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;IS_CONTACTLESS\&amp;#34;}&amp;#34;
}
]&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-presence-cmd">Card Presence&lt;/h3>
&lt;p>This service allows the server to know if a card is inserted in the reader.&lt;/p>
&lt;p>There are no parameters for this service.&lt;/p>
&lt;p>The terminal must then send the response to the server in a message of type
&amp;ldquo;&lt;a href="#card-presence-resp">Card Presence (Response)&lt;/a>&amp;rdquo;.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;h4 id="messagedto-card-presence-cmd">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>CMD&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#iscardpresentcmdbody">IsCardPresentCmdBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="iscardpresentcmdbody">IsCardPresentCmdBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>IS_CARD_PRESENT&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-2">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('14', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-14">[
{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;CMD&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;IS_CARD_PRESENT\&amp;#34;}&amp;#34;
}
]&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-selection-cmd">Card Selection&lt;/h3>
&lt;p>The primary objective of this service is to establish a logical communication channel with a card.&lt;/p>
&lt;p>To enable processing of different card profiles, it offers the creation of selection scenarios with integrated
selection cases. The scenario is provided by the server after a card is detected, and it involves checking whether the
card is compatible with at least one of the selection cases. The selection cases are processed successively, in the
order in which they are defined.&lt;/p>
&lt;p>There are several options for executing the scenario:&lt;/p>
&lt;ul>
&lt;li>the process stops at the first selection case where the card matches, or all scenarios are systematically processed.&lt;/li>
&lt;li>the physical channel can be kept open or closed at the end of each selection case.&lt;/li>
&lt;/ul>
&lt;p>A card selection case incorporates various independent filters that can be applied individually or in combination
to determine if a detected card is suitable for performing a transaction. While some cards can be selected based on
communication protocol or response data from the power-on operation, most of the cards require a selection through
Application Identifier (AID) using the ISO7816-4 &amp;ldquo;Select Application&amp;rdquo; APDU command.&lt;/p>
&lt;p>The structure outlined below allows for defining selection scenarios that combine these three types of filters:&lt;/p>
&lt;ul>
&lt;li>based on the communication protocol,&lt;/li>
&lt;li>based on the response data from the power on stage,&lt;/li>
&lt;li>based on the Application Identifier (AID).&lt;/li>
&lt;/ul>
&lt;p>When filtering by AID, the &amp;ldquo;Select Application&amp;rdquo; APDU command is sent to the card in accordance with the ISO7816-4
standard.
Additional parameters, also defined by the standard, can be set to specify the type of operation (&lt;code>FileOccurrence&lt;/code>)
and the type of output (&lt;code>FileControlInformation&lt;/code>).&lt;/p>
&lt;p>Each filter is optional, and if none are defined, the selection is considered successful as soon as the card is
detected.
However, when a filter is specified, it becomes a prerequisite for the card selection.&lt;/p>
&lt;p>In addition to card selection, a selection scenario can include a list of APDUs that are to be transmitted to the card
as soon as it becomes &amp;ldquo;selected&amp;rdquo;.&lt;/p>
&lt;p>The algorithm to be implemented by the terminal to process this service consists in iterating on the selection cases of
the scenario.&lt;/p>
&lt;p>For each selection case, the terminal must determine which type of filter to apply and apply it: protocol, power-on
data, AID.&lt;/p>
&lt;p>If all the defined filters are satisfied, the terminal must send any additional APDUs.&lt;/p>
&lt;p>The terminal must then send the response to the server in a message of type
&amp;ldquo;&lt;a href="#card-selection-resp">Card Selection (Response)&lt;/a>&amp;rdquo;.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;h4 id="messagedto-card-selection-cmd">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>CMD&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#transmitcardselectionrequestscmdbody">TransmitCardSelectionRequestsCmdBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardselectionrequestscmdbody">TransmitCardSelectionRequestsCmdBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>TRANSMIT_CARD_SELECTION_REQUESTS&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>parameters&lt;/code>&lt;/td>
&lt;td>&lt;a href="#transmitcardselectionrequestsparameters">TransmitCardSelectionRequestsParameters&lt;/a>&lt;br>The card selection parameters.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardselectionrequestsparameters">TransmitCardSelectionRequestsParameters&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>multiSelectionProcessing&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>FIRST_MATCH&lt;/strong>&amp;quot;: the selection process stops as soon as a selection case is successful.&lt;br>- &amp;ldquo;&lt;strong>PROCESS_ALL&lt;/strong>&amp;quot;: the selection process performs all the selection cases provided (the logical channel is closed at the end of the selection case).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>channelControl&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>KEEP_OPEN&lt;/strong>&amp;quot;: leaves the physical channel open.&lt;br>- &amp;ldquo;&lt;strong>CLOSE_AFTER&lt;/strong>&amp;quot;: terminates communication with the card.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cardSelectors&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardselector">CardSelector&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A non-empty array.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cardSelectionRequests&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardselectionrequest">CardSelectionRequest&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A non-empty array containing the same number of elements as &lt;code>cardSelectors&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardselector">CardSelector&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>logicalProtocolName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>An optional &amp;ldquo;logical&amp;rdquo; name of the targeted card protocol.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>powerOnDataRegex&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>An optional regex to use to filter the power-on data.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>aid&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>An optional Application Identifier (AID) as an hexadecimal string to be sent with ISO7816-4 &amp;ldquo;Select Application&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fileOccurrence&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>&amp;quot;&lt;strong>FIRST&lt;/strong>&amp;rdquo;, &amp;ldquo;&lt;strong>LAST&lt;/strong>&amp;rdquo;, &amp;ldquo;&lt;strong>NEXT&lt;/strong>&amp;rdquo; or &amp;ldquo;&lt;strong>PREVIOUS&lt;/strong>&amp;rdquo; according to the ISO7816-4 standard (only relevant when AID is set).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fileControlInformation&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>&amp;quot;&lt;strong>FCI&lt;/strong>&amp;rdquo;, &amp;ldquo;&lt;strong>FCP&lt;/strong>&amp;rdquo;, &amp;ldquo;&lt;strong>FMD&lt;/strong>&amp;rdquo; or &amp;ldquo;&lt;strong>NO_RESPONSE&lt;/strong>&amp;rdquo; according to the ISO7816-4 standard (only relevant when AID is set).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardselectionrequest">CardSelectionRequest&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>cardRequest&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardrequest">CardRequest&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>An optional object containing a list of APDU requests to be sent after a successful card selection.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>successfulSelectionStatusWords&lt;/code>&lt;/td>
&lt;td>&lt;strong>String [ ]&lt;/strong>&lt;br>A non-empty array of 2-byte hexadecimal strings containing the status word of the &amp;ldquo;Select Application&amp;rdquo; APDU command to be considered successful (only relevant when AID is set).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardrequest">CardRequest&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apduRequests&lt;/code>&lt;/td>
&lt;td>&lt;a href="#apdurequest">ApduRequest&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A non-empty array of APDU requests.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isStatusCodesVerificationEnabled&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the transmission of the APDUs should be interrupted as soon as the status word of a response does not belong to the associated list of successful status words, &lt;strong>false&lt;/strong> otherwise.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="apdurequest">ApduRequest&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apdu&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>An hexadecimal string containing the APDU to transmit to the card.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>successfulStatusWords&lt;/code>&lt;/td>
&lt;td>&lt;strong>String [ ]&lt;/strong>&lt;br>A non-empty array of 2-byte hexadecimal strings containing the status word to be considered successful.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>info&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>An optional textual information about the command.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-3">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('16', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-16">[
{
&amp;#34;apiLevel&amp;#34;:2,
&amp;#34;sessionId&amp;#34;:&amp;#34;5bf1ca9a-2de9-4f16-b170-5de168560179&amp;#34;,
&amp;#34;action&amp;#34;:&amp;#34;CMD&amp;#34;,
&amp;#34;clientNodeId&amp;#34;:&amp;#34;824f32f1-ccb0-447c-a103-618152eb49ba&amp;#34;,
&amp;#34;serverNodeId&amp;#34;:&amp;#34;fbf011a4-d0e2-4f3f-85c3-2ccd5be01919&amp;#34;,
&amp;#34;localReaderName&amp;#34;:&amp;#34;stubReader&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;:&amp;#34;852f5841-0b5c-4922-a77a-b103cb5aac3f&amp;#34;,
&amp;#34;body&amp;#34;:&amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;TRANSMIT_CARD_SELECTION_REQUESTS\&amp;#34;,\&amp;#34;parameters\&amp;#34;:{\&amp;#34;multiSelectionProcessing\&amp;#34;:\&amp;#34;FIRST_MATCH\&amp;#34;,\&amp;#34;channelControl\&amp;#34;:\&amp;#34;KEEP_OPEN\&amp;#34;,\&amp;#34;cardSelectors\&amp;#34;:[{\&amp;#34;fileOccurrence\&amp;#34;:\&amp;#34;FIRST\&amp;#34;,\&amp;#34;fileControlInformation\&amp;#34;:\&amp;#34;FCI\&amp;#34;}],\&amp;#34;cardSelectionRequests\&amp;#34;:[{\&amp;#34;successfulSelectionStatusWords\&amp;#34;:[\&amp;#34;9000\&amp;#34;]}]}}&amp;#34;
}
]&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-commands-cmd">Card Commands&lt;/h3>
&lt;p>The role of this service is to perform APDU exchanges with the card.&lt;/p>
&lt;p>The terminal must iterate over the list of APDUs present in the card request and proceeds to close the physical channel
if requested.&lt;/p>
&lt;p>The response must be sent to the server in a message of type
&amp;ldquo;&lt;a href="#card-commands-resp">Card Commands (Response)&lt;/a>&amp;rdquo;.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;h4 id="messagedto-card-commands-cmd">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>CMD&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#transmitcardrequestcmdbody">TransmitCardRequestCmdBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardrequestcmdbody">TransmitCardRequestCmdBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>TRANSMIT_CARD_REQUEST&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>parameters&lt;/code>&lt;/td>
&lt;td>&lt;a href="#transmitcardrequestparameters">TransmitCardRequestParameters&lt;/a>&lt;br>The card request parameters.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardrequestparameters">TransmitCardRequestParameters&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>cardRequest&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardrequest-1">CardRequest&lt;/a>&lt;br>An object containing the list of APDU requests to be sent.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>channelControl&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>KEEP_OPEN&lt;/strong>&amp;quot;: leaves the physical channel open.&lt;br>- &amp;ldquo;&lt;strong>CLOSE_AFTER&lt;/strong>&amp;quot;: terminates communication with the card.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardrequest-1">CardRequest&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apduRequests&lt;/code>&lt;/td>
&lt;td>&lt;a href="#apdurequest-1">ApduRequest&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A non-empty array of APDU requests.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isStatusCodesVerificationEnabled&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the transmission of the APDUs should be interrupted as soon as the status word of a response does not belong to the associated list of successful status words, &lt;strong>false&lt;/strong> otherwise.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="apdurequest-1">ApduRequest&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apdu&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>An hexadecimal string containing the APDU to transmit to the card.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>successfulStatusWords&lt;/code>&lt;/td>
&lt;td>&lt;strong>String [ ]&lt;/strong>&lt;br>A non-empty array of 2-byte hexadecimal strings containing the status word to be considered successful.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>info&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>An optional textual information about the command.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-4">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('18', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-18">[
{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;CMD&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;TRANSMIT_CARD_REQUEST\&amp;#34;,\&amp;#34;parameters\&amp;#34;:{\&amp;#34;cardRequest\&amp;#34;:{\&amp;#34;apduRequests\&amp;#34;:[{\&amp;#34;apdu\&amp;#34;:\&amp;#34;00B2014400\&amp;#34;,\&amp;#34;successfulStatusWords\&amp;#34;:[\&amp;#34;9000\&amp;#34;],\&amp;#34;info\&amp;#34;:\&amp;#34;Read Records - SFI: 8h, REC: 1, READMODE: ONE_RECORD, EXPECTEDLENGTH: 0\&amp;#34;}],\&amp;#34;isStatusCodesVerificationEnabled\&amp;#34;:true},\&amp;#34;channelControl\&amp;#34;:\&amp;#34;CLOSE_AFTER\&amp;#34;}}&amp;#34;
}
]&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="response">Response&lt;/h2>
&lt;p>This message, sent by the terminal to the server, is intended to transmit to the server the result of the specific
service previously performed on the card or the terminal&amp;rsquo;s reader.&lt;/p>
&lt;p>Following the transmission of this message, the server will return a message of type
&amp;ldquo;&lt;a href="#command">Command&lt;/a>&amp;rdquo;, containing the next action to be performed, or of type
&amp;ldquo;&lt;a href="#end-remote-service">End Remote Service&lt;/a>&amp;rdquo; to terminate the transaction.&lt;/p>
&lt;p>The following UML class diagram illustrates the structure of this object and may help to implement it in the development
language of the target terminal.&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---response-class-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_classDiagram_resp.svg" alt="Keyple Distributed JSON API - &amp;#34;Response&amp;#34; class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - &amp;ldquo;Response&amp;rdquo; class diagram
&lt;/figcaption>&lt;/figure>
&lt;br>
&lt;h3 id="reader-type-resp">Reader Type&lt;/h3>
&lt;p>This message, sent by the terminal to the server in response to &amp;ldquo;&lt;a href="#reader-type-cmd">Reader Type (Command)&lt;/a>&amp;rdquo;, is
intended to indicate to the server if the reader is contactless.&lt;/p>
&lt;h4 id="messagedto-reader-type-resp">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>RESP&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#iscontactlessrespbody">IsContactlessRespBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="iscontactlessrespbody">IsContactlessRespBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>IS_CONTACTLESS&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>result&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean (optional)&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the reader is contactless, &lt;strong>false&lt;/strong> otherwise (absent in case of error).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>error&lt;/code>&lt;/td>
&lt;td>&lt;a href="#reader-type-resp-error">Error&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>The error description (absent in case of success).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="reader-type-resp-error">Error&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Free value.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The error description.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="example-5">Example&lt;/h4>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('20', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-20">{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;RESP&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;IS_CONTACTLESS\&amp;#34;,\&amp;#34;result\&amp;#34;:true}&amp;#34;
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-presence-resp">Card Presence&lt;/h3>
&lt;p>This message, sent by the terminal to the server in response to &amp;ldquo;&lt;a href="#card-presence-cmd">Card Presence (Command)&lt;/a>&amp;rdquo;,
is intended to indicate to the server if a card is present.&lt;/p>
&lt;h4 id="messagedto-card-presence-resp">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The value is &amp;ldquo;&lt;strong>RESP&lt;/strong>&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#iscardpresentrespbody">IsCardPresentRespBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="iscardpresentrespbody">IsCardPresentRespBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>IS_CARD_PRESENT&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>result&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if a card is present, &lt;strong>false&lt;/strong> otherwise (absent in case of error).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>error&lt;/code>&lt;/td>
&lt;td>&lt;a href="#card-presence-resp-error">Error&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>The error description (absent in case of success).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="card-presence-resp-error">Error&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>READER_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the reader communication link,&lt;br>- &amp;ldquo;&lt;strong>CARD_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the card communication link.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The error description.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="example-6">Example&lt;/h4>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('21', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-21">{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;RESP&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;IS_CARD_PRESENT\&amp;#34;,\&amp;#34;result\&amp;#34;:true}&amp;#34;
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-selection-resp">Card Selection&lt;/h3>
&lt;p>This message, sent by the terminal to the server in response to
&amp;ldquo;&lt;a href="#card-selection-cmd">Card Selection (Command)&lt;/a>&amp;rdquo;,
is intended to transmit to the server the result of the execution of the selection scenario.&lt;/p>
&lt;h4 id="messagedto-card-selection-resp">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>RESP&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#transmitcardselectionrequestsrespbody">TransmitCardSelectionRequestsRespBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardselectionrequestsrespbody">TransmitCardSelectionRequestsRespBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>TRANSMIT_CARD_SELECTION_REQUESTS&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>result&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardselectionresponse">CardSelectionResponse&lt;/a> &lt;strong>[ ] (optional)&lt;/strong>&lt;br>A non-empty list containing at most as many responses as there are selection cases (absent in case of error).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>error&lt;/code>&lt;/td>
&lt;td>&lt;a href="#card-selection-resp-error">Error&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>The error description (absent in case of success).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardselectionresponse">CardSelectionResponse&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>hasMatched&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the associated selection case has matched, &lt;strong>false&lt;/strong> otherwise.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>powerOnData&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (optional)&lt;/strong>&lt;br>Data from the initialization phase of the communication with the card. E.g. the Answer To Reset (ATR) in the case of a contact card or any other string informing about the low level communication. This string can be used for filtering by power-on data defined in the command (absent if the protocol filter failed).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>selectApplicationResponse&lt;/code>&lt;/td>
&lt;td>&lt;a href="#apduresponse">ApduResponse&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>Data received in response to the ISO7816-4 &amp;ldquo;Select Application&amp;rdquo; command (absent if no AID filtering).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cardResponse&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardresponse">CardResponse&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>Data received in response to additional commands (absent if no additional commands were provided).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardresponse">CardResponse&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>isLogicalChannelOpen&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the logical channel is left open, &lt;strong>false&lt;/strong> otherwise.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apduResponses&lt;/code>&lt;/td>
&lt;td>&lt;a href="#apduresponse">ApduResponse&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A list containing the APDU responses for each request in the command.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="apduresponse">ApduResponse&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apdu&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>An hexadecimal string containing the APDU received from the card (including the status word).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>statusWord&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A 2-byte hexadecimal string containing the status word of the received APDU.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="card-selection-resp-error">Error&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>READER_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the reader communication link,&lt;br/>- &amp;ldquo;&lt;strong>CARD_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the card communication link,&lt;br/>- &amp;ldquo;&lt;strong>CARD_COMMAND_ERROR&lt;/strong>&amp;quot;: if the card returned an unexpected status word.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The error description.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-7">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('22', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-22">{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;RESP&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;TRANSMIT_CARD_SELECTION_REQUESTS\&amp;#34;,\&amp;#34;result\&amp;#34;:[{\&amp;#34;hasMatched\&amp;#34;:true,\&amp;#34;powerOnData\&amp;#34;:\&amp;#34;3B8880010000000000718100F9\&amp;#34;,\&amp;#34;selectApplicationResponse\&amp;#34;:{\&amp;#34;apdu\&amp;#34;:\&amp;#34;6F238409315449432E49434131A516BF0C13C708000000001122334453070A3C23121410019000\&amp;#34;,\&amp;#34;statusWord\&amp;#34;:\&amp;#34;9000\&amp;#34;},\&amp;#34;cardResponse\&amp;#34;:{\&amp;#34;apduResponses\&amp;#34;:[{\&amp;#34;apdu\&amp;#34;:\&amp;#34;24B92848080000131A50001200000000000000000000000000000000009000\&amp;#34;,\&amp;#34;statusWord\&amp;#34;:\&amp;#34;9000\&amp;#34;}],\&amp;#34;isLogicalChannelOpen\&amp;#34;:true}}]}&amp;#34;
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h3 id="card-commands-resp">Card Commands&lt;/h3>
&lt;p>This message, sent by the terminal to the server in response to
&amp;ldquo;&lt;a href="#card-commands-cmd">Card Commands (Command)&lt;/a>&amp;rdquo;,
is intended to transmit to the server the result of the execution of a card request.&lt;/p>
&lt;h4 id="messagedto-card-commands-resp">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>RESP&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the local reader as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader as provided by the last &amp;ldquo;&lt;strong>Command&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#transmitcardrequestrespbody">TransmitCardRequestRespBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="transmitcardrequestrespbody">TransmitCardRequestRespBody&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>service&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>TRANSMIT_CARD_REQUEST&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>result&lt;/code>&lt;/td>
&lt;td>&lt;a href="#cardresponse-1">CardResponse&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>Data received in response to the card request (absent in case of error).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>error&lt;/code>&lt;/td>
&lt;td>&lt;a href="#card-commands-resp-error">Error&lt;/a> &lt;strong>(optional)&lt;/strong>&lt;br>The error description (absent in case of success).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="cardresponse-1">CardResponse&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>isLogicalChannelOpen&lt;/code>&lt;/td>
&lt;td>&lt;strong>Boolean&lt;/strong>&lt;br>Set to &lt;strong>true&lt;/strong> if the logical channel is left open, &lt;strong>false&lt;/strong> otherwise.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apduResponses&lt;/code>&lt;/td>
&lt;td>&lt;a href="#apduresponse-1">ApduResponse&lt;/a> &lt;strong>[ ]&lt;/strong>&lt;br>A list containing the APDU responses for each request in the command.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="apduresponse-1">ApduResponse&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apdu&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>An hexadecimal string containing the APDU received from the card (including the status word).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>statusWord&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A 2-byte hexadecimal string containing the status word of the received APDU.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="card-commands-resp-error">Error&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Can have one of the following values:&lt;br>- &amp;ldquo;&lt;strong>READER_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the reader communication link,&lt;br/>- &amp;ldquo;&lt;strong>CARD_COMMUNICATION_ERROR&lt;/strong>&amp;quot;: if the issue is related to the card communication link,&lt;br/>- &amp;ldquo;&lt;strong>CARD_COMMAND_ERROR&lt;/strong>&amp;quot;: if the card returned an unexpected status word.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The error description.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="example-8">Example&lt;/h5>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('23', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-23">{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;RESP&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;localReaderName&amp;#34;: &amp;#34;READER_1&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;service\&amp;#34;:\&amp;#34;TRANSMIT_CARD_REQUEST\&amp;#34;,\&amp;#34;result\&amp;#34;:{\&amp;#34;apduResponses\&amp;#34;:[{\&amp;#34;apdu\&amp;#34;:\&amp;#34;00112233445566778899AABBCCDDEEFF00112233445566778899AABBCC9000\&amp;#34;,\&amp;#34;statusWord\&amp;#34;:\&amp;#34;9000\&amp;#34;}],\&amp;#34;isLogicalChannelOpen\&amp;#34;:true}}&amp;#34;
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="end-remote-service">End Remote Service&lt;/h2>
&lt;p>The purpose of this message, received from the server, is to inform the terminal that the transaction has been
completed and, if necessary, to transmit the result. No follow-up is expected from the server.&lt;/p>
&lt;p>The following UML class diagram illustrates the structure of this object and may help to implement it in the development
language of the target terminal.&lt;/p>
&lt;figure id="figure-keyple-distributed-json-api---end-remote-service-class-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/server-json-api-2-0/serverJsonApi_classDiagram_endRemoteService.svg" alt="Keyple Distributed JSON API - &amp;#34;End Remote Service&amp;#34; class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption data-pre="Figure&amp;nbsp;" data-post=":&amp;nbsp;" class="numbered">
Keyple Distributed JSON API - &amp;ldquo;End Remote Service&amp;rdquo; class diagram
&lt;/figcaption>&lt;/figure>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>MessageDto&lt;/code> is contained in a single-element array!
&lt;/div>
&lt;/div>
&lt;h4 id="messagedto-end-remote-service">MessageDto&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sessionId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The current transaction identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>action&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>Constant value: &amp;ldquo;&lt;strong>END_REMOTE_SERVICE&lt;/strong>&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>clientNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The terminal identifier as provided by the initial &amp;ldquo;&lt;strong>Execute Remote Service&lt;/strong>&amp;rdquo; message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serverNodeId&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The server identifier.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>localReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String (n/a)&lt;/strong>&lt;br>Null or absent.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remoteReaderName&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>The identifier of the virtual remote reader linked to the local reader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>body&lt;/code>&lt;/td>
&lt;td>&lt;strong>String&lt;/strong>&lt;br>A JSON string containing a &lt;a href="#endremoteservicebody">EndRemoteServiceBody&lt;/a> JSON object.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="endremoteservicebody">EndRemoteServiceBody&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>coreApiLevel&lt;/code>&lt;/td>
&lt;td>&lt;strong>Number&lt;/strong>&lt;br>Constant value: &lt;strong>2&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>outputData&lt;/code>&lt;/td>
&lt;td>&lt;strong>Object (optional)&lt;/strong>&lt;br>An optional object containing additional data provided by the remote business service. Its content is a convention between the client and the server.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="example-9">Example&lt;/h4>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('26', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-json" id="code-26">[
{
&amp;#34;apiLevel&amp;#34;: 2,
&amp;#34;sessionId&amp;#34;: &amp;#34;b1b8ed38-bae6-4b2e-a747-67d233652ea9&amp;#34;,
&amp;#34;action&amp;#34;: &amp;#34;END_REMOTE_SERVICE&amp;#34;,
&amp;#34;clientNodeId&amp;#34;: &amp;#34;ca21fd3c-a055-4be5-aad1-c61af3528371&amp;#34;,
&amp;#34;serverNodeId&amp;#34;: &amp;#34;4132f1ef-4386-49b0-acb6-cc16035c107a&amp;#34;,
&amp;#34;remoteReaderName&amp;#34;: &amp;#34;a65f4920-7e96-4082-986a-b58d85978c07&amp;#34;,
&amp;#34;body&amp;#34;: &amp;#34;{\&amp;#34;coreApiLevel\&amp;#34;:2,\&amp;#34;outputData\&amp;#34;:{\&amp;#34;isSuccessful\&amp;#34;:true,\&amp;#34;userId\&amp;#34;:\&amp;#34;test\&amp;#34;}}&amp;#34;
}
]&lt;/code>&lt;/pre></description></item><item><title>Calypso Application User Guide</title><link>https://keyple.org/learn/user-guide/calypso-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/calypso-application/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Keyple provides a card extension add-on dedicated to the Calypso® card technology.&lt;/p>
&lt;p>This component allows operating commands with a Calypso card and to manage a secure Calypso transaction in a simple way.
It completely hides the details of APDU orders that are sent to Calypso cards and SAMs, which are usually tedious operations.&lt;/p>
&lt;p>The main features are:&lt;/p>
&lt;ul>
&lt;li>support for different card revisions;&lt;/li>
&lt;li>object mapping of card data structures;&lt;/li>
&lt;li>complete management of the secure session with SAMs;&lt;/li>
&lt;li>PIN code management;&lt;/li>
&lt;li>Stored Value operations management;&lt;/li>
&lt;li>card invalidation / rehabilitation.&lt;/li>
&lt;/ul>
&lt;p>The diagram below illustrates the organization of a Calypso application based on Keyple:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/user-guide/calypso-application/calypso_application_overview.drawio.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;br>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>Pre-requisites:&lt;/p>
&lt;ul>
&lt;li>Have a global view of Calypso product concepts (cards, SAM, security principles)&lt;/li>
&lt;li>Have read the &lt;a href="../../learn/user-guide/standalone-application/">Standalone Application User Guide&lt;/a> to understand the main concepts of Keyple in a standalone application&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;ol>
&lt;li>Access to the &lt;a href="#the-calypso-extension-service">Calypso card extension service&lt;/a>&lt;/li>
&lt;li>&lt;a href="#select-a-card">Select a card&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-security-settings">Set up the security settings&lt;/a> (optional)&lt;/li>
&lt;li>&lt;a href="#operate-a-card-transaction">Operate a card transaction&lt;/a>&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2 id="the-calypso-extension-service">The Calypso extension service&lt;/h2>
&lt;p>As part of the Calypso card extension add-on, the Calypso extension service is the provider of the API implementations.&lt;/p>
&lt;p>The service is accessible by invoking the &lt;code>CalypsoExtensionService.getInstance()&lt;/code> static method.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('2', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-2">CalypsoExtensionService calypsoExtensionService = CalypsoExtensionService.getInstance();&lt;/code>&lt;/pre>
&lt;p>During initialization, it is recommended to check the extension with the smart card service to ensure the compatibility of the different libraries involved.&lt;/p>
&lt;p>In case of incompatibility a warning will be produced in the log file.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('3', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-3">smartCardService.checkCardExtension(calypsoExtensionService);&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="select-a-card">Select a card&lt;/h2>
&lt;p>In order to perform a transaction it is necessary to have selected the card first.&lt;/p>
&lt;p>To do this, you must create a selection case for a selection scenario by invoking the &lt;code>createCardSelection()&lt;/code> method.&lt;/p>
&lt;p>In addition to the filtering capabilities offered by Keyple Service, the Calypso Selection API allows you to add
commands that will be sent to the card after a successful selection (the details of these features are described in the
API documentation).&lt;/p>
&lt;p>The resulting &lt;code>IsoSmartCard&lt;/code> can be cast to a &lt;code>CalypsoCard&lt;/code> object which concentrate all known information about the
card being processed.
Its content is dynamically updated during the transaction.
The application will use it to get the data necessary for its business logic.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('4', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-4">// Create a card selection manager.
CardSelectionManager cardSelectionManager =
smartCardService.getReaderApiFactory().createCardSelectionManager();
// Create a card selection using the Calypso card extension.
cardSelectionManager.prepareSelection(
smartCardService.getReaderApiFactory()
.createIsoCardSelector()
.filterByDfName(AID),
calypsoExtensionService.getCalypsoCardApiFactory()
.createCalypsoCardSelectionExtension());
// Actual card communication: process the card selection.
CardSelectionResult cardSelectionResult =
cardSelectionManager.processCardSelectionScenario(cardReader);
// Get the SmartCard resulting of the selection.
CalypsoCard calypsoCard = (CalypsoCard) cardSelectionResult.getActiveSmartCard();
// Check the selection result.
if (calypsoCard == null) {
throw new IllegalStateException(&amp;#34;The card selection failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="set-up-security-settings">Set up security settings&lt;/h2>
&lt;div class="alert alert-note">
&lt;div>
The security settings must be initialized only for secure transactions.
&lt;/div>
&lt;/div>
&lt;p>The API offers several types of settings such as choosing the SAM to use, enabling various modes, specifying keys for
legacy cards, etc&amp;hellip; (see the API documentation for more information).&lt;/p>
&lt;p>If the card transaction is to be secured using a symmetrical key cryptographic module (such as a SAM), it will be
necessary to initialize a &lt;code>SymmetricSecuritySetting&lt;/code>, associated with an implementation of the cryptographic module
to be used (e.g. Calypso Crypto Legacy SAM Lib).&lt;/p>
&lt;p>The SAM must first be selected via the Calypso Crypto Legacy SAM Lib.&lt;/p>
&lt;p>In the case of the Card Resource Service, you have to create a profile extension, specifying the previously built
selection case, and then associate it to a dedicated profile in the service (see
the &lt;a href="../../learn/user-guide/card-resource-service/">Card Resource Service User Guide&lt;/a>).&lt;/p>
&lt;p>The following snippet shows the selection of the SAM and the initialization of the security settings:
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-7">// Create a SAM selection manager.
CardSelectionManager samSelectionManager = readerApiFactory.createCardSelectionManager();
// Create a card selector without filer
CardSelector&amp;lt;IsoCardSelector&amp;gt; cardSelector = readerApiFactory.createIsoCardSelector();
// Retrieve the Legacy SAM API factory
LegacySamApiFactory legacySamApiFactory =
LegacySamExtensionService.getInstance().getLegacySamApiFactory();
// Create a SAM selection using the Calypso Legacy SAM card extension.
samSelectionManager.prepareSelection(
cardSelector, legacySamApiFactory.createLegacySamSelectionExtension());
// SAM communication: run the selection scenario.
CardSelectionResult samSelectionResult =
samSelectionManager.processCardSelectionScenario(reader);
// Check the selection result.
if (samSelectionResult.getActiveSmartCard() == null) {
throw new IllegalStateException(&amp;#34;The selection of the SAM failed.&amp;#34;);
}
// Get the Calypso SAM SmartCard resulting of the selection.
LegacySam sam = (LegacySam) samSelectionResult.getActiveSmartCard();
// Build the security settings
symmetricCryptoSecuritySetting =
calypsoCardApiFactory.createSymmetricCryptoSecuritySetting(
LegacySamExtensionService.getInstance()
.getLegacySamApiFactory()
.createSymmetricCryptoTransactionManagerFactory(samReader, sam));&lt;/code>&lt;/pre>&lt;/p>
&lt;br>
&lt;h2 id="operate-a-card-transaction">Operate a card transaction&lt;/h2>
&lt;p>It is possible to perform secure or non-secure transactions depending on the need.
A transaction is managed by a dedicated &lt;code>CardTransactionManager&lt;/code> which is provided by the Calypso card extension service.&lt;/p>
&lt;p>The transaction manager provides high-level API to manage transactions with a Calypso card.
The provided &lt;code>CalypsoCard&lt;/code> object is kept and updated dynamically all along the transaction process.&lt;/p>
&lt;p>The transaction takes place in several repeatable steps:&lt;/p>
&lt;ul>
&lt;li>Preparation of the commands to be sent to the card. Several command preparations can be stacked (no communication
neither with the card nor with the SAM).&lt;/li>
&lt;li>Processing of the prepared commands. Performs all necessary communications with the card and/or the SAM to carry out
the previously prepared operations.&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-8">// Execute the transaction: the environment file is read within a secure session to ensure data
// authenticity.
calypsoCardApiFactory
.createSecureRegularModeTransactionManager(cardReader, calypsoCard, symmetricCryptoSecuritySetting)
.prepareOpenSecureSession(WriteAccessLevel.DEBIT)
.prepareReadRecords(SFI_ENVIRONMENT_AND_HOLDER, 1, 1, 29)
.prepareCloseSecureSession()
.processCommands(ChannelControl.CLOSE_AFTER);&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-reader-api/" target="_blank" rel="noopener">Keypop Reader API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-calypso-card-api/" target="_blank" rel="noopener">Keypop Calypso Card API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-calypso-crypto-legacysam-api/" target="_blank" rel="noopener">Keypop Calypso Crypto Legacy SAM API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-common-java-api" target="_blank" rel="noopener">Keyple Common API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-card-calypso-java-lib" target="_blank" rel="noopener">Keyple Card Calypso API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-card-calypso-crypto-legacysam-java-lib" target="_blank" rel="noopener">Keyple Card Calypso Crypto Legacy SAM API&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">Java examples&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Card Resource Service User Guide</title><link>https://keyple.org/learn/user-guide/card-resource-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/card-resource-service/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>An application that performs secure transactions on smart cards may need to dynamically allocate a card resource
dedicated to the current transaction to manage the security of the transaction (e.g. SAM or HSM).&lt;/p>
&lt;p>To meet this need, Keyple proposes the Service Resource component which provides a service that supports dynamic card
resource allocation, using a profile-based filtering mechanism.&lt;/p>
&lt;br>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>card resource locking during use;&lt;/li>
&lt;li>automatic monitoring of observable plugins and readers;&lt;/li>
&lt;li>customizable profile-based filtering mechanism (specific plugins list, reader name using regular expression, reader
group name for pool plugins, specific card selection);&lt;/li>
&lt;li>specific reader configuration capability;&lt;/li>
&lt;li>allocation priority management;&lt;/li>
&lt;li>two allocation modes (blocking, non-blocking);&lt;/li>
&lt;li>multiple allocation strategies (first available card resource, cyclic, random);&lt;/li>
&lt;li>configurable allocation timeout;&lt;/li>
&lt;li>failure management.&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#access-to-the-service">Access to the service&lt;/a>&lt;/li>
&lt;li>&lt;a href="#access-to-the-configurator">Access to the configurator&lt;/a>&lt;/li>
&lt;li>Register &lt;a href="#register-plugins">plugins&lt;/a> and/or &lt;a href="#register-pool-plugins">pool plugins&lt;/a> to be used&lt;/li>
&lt;li>&lt;a href="#define-profiles">Define profiles&lt;/a> for card resource filtering&lt;/li>
&lt;li>&lt;a href="#set-allocation-mode">Set the allocation mode&lt;/a> (optional)&lt;/li>
&lt;li>&lt;a href="#apply-the-configuration">Apply the configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#start-the-service">Start the service&lt;/a>&lt;/li>
&lt;li>&lt;a href="#allocate-a-resource">Allocate a resource&lt;/a>&lt;/li>
&lt;li>Use the resource&lt;/li>
&lt;li>&lt;a href="#release-a-resource">Release the used resource&lt;/a>&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2 id="access-to-the-service">Access to the service&lt;/h2>
&lt;p>Invoke the &lt;code>CardResourceServiceProvider.getService()&lt;/code> static method to access the service.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('0', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-0">CardResourceService cardResourceService = CardResourceServiceProvider.getService();&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="configure-the-service">Configure the service&lt;/h2>
&lt;h3 id="access-to-the-configurator">Access to the configurator&lt;/h3>
&lt;p>Invoke the &lt;code>getConfigurator()&lt;/code> method on the service to get a new instance of the service configurator.
It is built on the fluent pattern, and it guides you through the various steps to be specified during the configuration
process.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('1', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-1">cardResourceService.getConfigurator()...&lt;/code>&lt;/pre>
&lt;h3 id="register-plugins">Register plugins&lt;/h3>
&lt;p>If you plan to use plugins of type &lt;code>Plugin&lt;/code> or &lt;code>ObservablePlugin&lt;/code> in the card resource service, you must specify the
global ordered list of plugins to be used when searching for a card resource.&lt;/p>
&lt;p>This is the default list that will be applied for profiles that have not explicitly specified another list.&lt;/p>
&lt;p>Please note that the order in which plugins are added is important.&lt;/p>
&lt;p>To add one or more plugins, you need to create a new instance of the &lt;code>PluginsConfigurator&lt;/code> class and provide it to the
configurator using the &lt;code>withPlugins(...)&lt;/code> method.&lt;/p>
&lt;p>It is possible to configure the following:&lt;/p>
&lt;ul>
&lt;li>specify the global allocation strategy to all added plugins;&lt;/li>
&lt;li>specify the global usage timeout of a resource;&lt;/li>
&lt;li>activate independently plugin by plugin the monitoring of the plugin and/or its readers in order to allow the service
to automatically update the list of resources. In this case you will have to provide a handler to be informed in case
of error or crash of the observation thread.&lt;/li>
&lt;/ul>
&lt;p>For each plugin added, you will need to provide an implementation of the &lt;code>ReaderConfiguratorSpi&lt;/code> interface to
automatically configure new readers or those already connected.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('2', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-2">.withPlugins(
PluginsConfigurator.builder()
.withAllocationStrategy(...)
.withUsageTimeout(...)
.addPluginWithMonitoring(...)
.addPlugin(...)
.addPluginWithMonitoring(...)
.build())&lt;/code>&lt;/pre>
&lt;h3 id="register-pool-plugins">Register pool plugins&lt;/h3>
&lt;p>If you plan to use plugins of type &lt;code>PoolPlugin&lt;/code> in the card resource service, you must specify the global ordered list
of pool plugins to be used when searching for a card resource.&lt;/p>
&lt;p>This is the default list that will be applied for profiles that have not explicitly specified another list.&lt;/p>
&lt;p>Please note that the order in which plugins are added is important.
If you use both plugins and pool plugins in your configuration, it is possible to specify if pool plugins should be
taken into account first or not during the resource allocation process.&lt;/p>
&lt;p>To add one or more pool plugins, you need to create a new instance of the &lt;code>PoolPluginsConfigurator&lt;/code> class and provide it
to the configurator using the &lt;code>withPoolPlugins(...)&lt;/code> method.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('3', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-3">.withPoolPlugins(
PoolPluginsConfigurator.builder()
.usePoolFirst()
.addPoolPlugin(...)
.addPoolPlugin(...)
.build())&lt;/code>&lt;/pre>
&lt;h3 id="define-profiles">Define profiles&lt;/h3>
&lt;p>A profile defines a set of filters which will be used when enumerating the available resources. The profile identifiers
will be used when allocating a resource.&lt;/p>
&lt;p>To add profiles, you must create a new instance of the &lt;code>CardResourceProfileConfigurator&lt;/code> class for each profile and
provide them to the configurator using the &lt;code>withCardResourceProfiles(...)&lt;/code> method.&lt;/p>
&lt;p>It is possible to configure the following:&lt;/p>
&lt;ul>
&lt;li>override the global plugin list to use;&lt;/li>
&lt;li>set reader name filter using a regex value;&lt;/li>
&lt;li>set reader group reference filter in case of pool plugins.&lt;/li>
&lt;/ul>
&lt;p>You also need to provide an implementation of the &lt;code>CardResourceProfileExtension&lt;/code> interface in order to be able to
customize the filtering if needed and to return to the service an implementation of the &lt;code>SmartCard&lt;/code> interface when a
compatible card is found.
The &lt;code>SmartCard&lt;/code> found will be returned to the user by the allocation process.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('4', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-4">.withCardResourceProfiles(
CardResourceProfileConfigurator.builder(RESOURCE_A, yourCardResourceProfileExtensionA)
.withReaderNameRegex(READER_NAME_REGEX_A)
.build(),
CardResourceProfileConfigurator.builder(RESOURCE_B, yourCardResourceProfileExtensionB)
.withReaderNameRegex(READER_NAME_REGEX_B)
.build(),
CardResourceProfileConfigurator.builder(RESOURCE_C, yourCardResourceProfileExtensionC)
.withReaderGroupReference(READER_GROUP_REFERENCE_C)
.build())&lt;/code>&lt;/pre>
&lt;h3 id="set-allocation-mode">Set allocation mode&lt;/h3>
&lt;p>By default, the card resource service is configured with a &lt;strong>non-blocking&lt;/strong> allocation mode.
This means that if no resources are available at the time of the request for an allocation, then the service returns the
hand directly.&lt;/p>
&lt;p>The &lt;code>withBlockingAllocationMode(...)&lt;/code> method configure the service to perform allocations in &lt;strong>blocking&lt;/strong> mode so that
it only hands over when a resource becomes available.&lt;/p>
&lt;p>You will then have to specify the duration between two search cycles and the maximum waiting time so that the service
can always return after a certain time if it has still not found anything.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('5', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-5">.withBlockingAllocationMode(100, 10000) // e.g. search each 100 ms during 10 seconds maximum&lt;/code>&lt;/pre>
&lt;h3 id="apply-the-configuration">Apply the configuration&lt;/h3>
&lt;p>Invoke the &lt;code>configure()&lt;/code> method on the configurator to finalise and apply the configuration.&lt;/p>
&lt;p>Once finalized, the new configuration replaces the previous one but does not change the state of the service.
If the service was already started at that moment, then it stops, applies the new configuration, and restarts.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('6', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-6">.configure();&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="use-the-service">Use the service&lt;/h2>
&lt;h3 id="start-the-service">Start the service&lt;/h3>
&lt;p>Invoke the &lt;code>start()&lt;/code> method on the service to start the service using the current configuration.
The service will initialize the list of available resources for each profile and start the monitoring processes if
requested.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-7">cardResourceService.start();&lt;/code>&lt;/pre>
&lt;h3 id="allocate-a-resource">Allocate a resource&lt;/h3>
&lt;p>Invoke the &lt;code>getCardResource(...)&lt;/code> method on the service to retrieve and lock a card resource.
You just have to specify the name of the profile to use.&lt;/p>
&lt;p>If the allocation mode is blocking, then the method will wait a while for a resource to become available.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-8">CardResource cardResource = cardResourceService.getCardResource(RESOURCE_A);&lt;/code>&lt;/pre>
&lt;h3 id="release-a-resource">Release a resource&lt;/h3>
&lt;p>Invoke the &lt;code>releaseCardResource(...)&lt;/code> method on the service to unlock a card resource.
You just have to provide the card resource to release.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('9', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-9">cardResourceService.releaseCardResource(cardResource);&lt;/code>&lt;/pre>
&lt;h3 id="delete-a-resource">Delete a resource&lt;/h3>
&lt;p>Invoke the &lt;code>removeCardResource(...)&lt;/code> method on the service to remove a card resource from the available card resource
list.
This can be useful in some cases if the card or reader has failed.
You just have to provide the card resource to remove.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('10', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-10">cardResourceService.removeCardResource(cardResource);&lt;/code>&lt;/pre>
&lt;h3 id="stop-the-service">Stop the service&lt;/h3>
&lt;p>Invoke the &lt;code>stop()&lt;/code> method on the service to stop the service if needed. Any monitoring is then stopped and no more
resources are accessible.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('11', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-11">cardResourceService.stop();&lt;/code>&lt;/pre>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-service-resource-java-lib" target="_blank" rel="noopener">API documentation &amp;amp; class diagram&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="example">Example&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">Java example&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Upgrade from an earlier version of Keyple</title><link>https://keyple.org/learn/user-guide/migration-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/user-guide/migration-guide/</guid><description>&lt;br>
&lt;p>This guide is intended to help a user of a previous version of Keyple Java to upgrade his application to a new version of the library.&lt;/p>
&lt;p>Upgrade from:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#upgrade-from-2-to-3">2.+ to 3.+&lt;/a>&lt;/li>
&lt;li>&lt;a href="#upgrade-from-1-to-2">1.+ to 2.+&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;hr>
&lt;h2 id="upgrade-from-2-to-3">Upgrade from &amp;ldquo;2.+&amp;rdquo; to &amp;ldquo;3.+&amp;rdquo;&lt;/h2>
&lt;p>This major release follows the adoption of &lt;strong>Keypop APIs&lt;/strong> in place of &lt;strong>CNA Terminal APIs&lt;/strong>.&lt;/p>
&lt;p>We recommend that you follow the steps below in the order suggested:&lt;/p>
&lt;ol>
&lt;li>Update the project &lt;a href="#dependencies-management">dependencies management&lt;/a>&lt;/li>
&lt;li>Perform a global &lt;a href="#renaming">text search &amp;amp; replace&lt;/a> across the entire project&lt;/li>
&lt;li>Apply the changes to the &lt;a href="#card-selection">card/SAM selection manager&lt;/a>&lt;/li>
&lt;li>Apply the changes to the &lt;a href="#card-transaction">card transaction manager&lt;/a>&lt;/li>
&lt;li>Apply the changes to the &lt;a href="#pso-signature-management-computationverification">signatures management (PSO or basic)&lt;/a> during card transactions&lt;/li>
&lt;li>Apply the changes to the &lt;a href="#sam-resource-service">SAM resource service&lt;/a>&lt;/li>
&lt;/ol>
&lt;div class="alert alert-note">
&lt;div>
All deprecated methods have been removed. If your project contains such methods, please check the changelogs for
replacement methods.
&lt;/div>
&lt;/div>
&lt;h3 id="dependencies-management">Dependencies management&lt;/h3>
&lt;p>Replace the legacy Keyple dependencies with the latest versions.
To do this, use the &lt;a href="../../components/overview/configuration-wizard/">configuration wizard&lt;/a>
to correctly import the new artifacts into your project.&lt;/p>
&lt;h3 id="renaming">Renaming&lt;/h3>
&lt;p>Search and replace (in &amp;ldquo;&lt;strong>case-sensitive&lt;/strong>&amp;rdquo; and &amp;ldquo;&lt;strong>whole-word&lt;/strong>&amp;rdquo; mode) in the following order the following strings when present:&lt;/p>
&lt;ol>
&lt;li>&lt;code>org.calypsonet.terminal.calypso&lt;/code> =&amp;gt; &lt;code>org.eclipse.keypop.calypso.card&lt;/code>&lt;/li>
&lt;li>&lt;code>org.calypsonet.terminal&lt;/code> =&amp;gt; &lt;code>org.eclipse.keypop&lt;/code>&lt;/li>
&lt;li>&lt;code>card.sam&lt;/code> =&amp;gt; &lt;code>crypto.legacysam.sam&lt;/code>&lt;/li>
&lt;li>&lt;code>Reader&lt;/code> =&amp;gt; &lt;code>CardReader&lt;/code>&lt;/li>
&lt;li>&lt;code>ObservableReader&lt;/code> =&amp;gt; &lt;code>ObservableCardReader&lt;/code>&lt;/li>
&lt;li>&lt;code>ReaderEvent&lt;/code> =&amp;gt; &lt;code>CardCardReader&lt;/code>&lt;/li>
&lt;li>&lt;code>CalypsoSam&lt;/code> =&amp;gt; &lt;code>LegacySam&lt;/code>&lt;/li>
&lt;li>&lt;code>CardSelection&lt;/code> =&amp;gt; &lt;code>CardSelectionExtension&lt;/code>&lt;/li>
&lt;li>&lt;code>CalypsoApiProperties&lt;/code> =&amp;gt; &lt;code>CalypsoCardApiProperties&lt;/code>&lt;/li>
&lt;li>&lt;code>SamIOException&lt;/code> =&amp;gt; &lt;code>CryptoIOException&lt;/code>&lt;/li>
&lt;li>&lt;code>CalypsoCardSelection&lt;/code> =&amp;gt; &lt;code>CalypsoCardSelectionExtension&lt;/code>&lt;/li>
&lt;li>&lt;code>GenericCardSelection&lt;/code> =&amp;gt; &lt;code>GenericCardSelectionExtension&lt;/code>&lt;/li>
&lt;li>&lt;code>CardSecuritySetting&lt;/code> =&amp;gt; &lt;code>SymmetricCryptoSecuritySetting&lt;/code>&lt;/li>
&lt;li>&lt;code>createCardSecuritySetting&lt;/code> =&amp;gt; &lt;code>createSymmetricCryptoSecuritySetting&lt;/code>&lt;/li>
&lt;li>&lt;code>processCommands(true)&lt;/code> =&amp;gt; &lt;code>processCommands(ChannelControl.CLOSE_AFTER)&lt;/code>&lt;/li>
&lt;li>&lt;code>processCommands(false)&lt;/code> =&amp;gt; &lt;code>processCommands(ChannelControl.KEEP_OPEN)&lt;/code>&lt;/li>
&lt;li>&lt;code>processApdusToByteArrays(true)&lt;/code> =&amp;gt; &lt;code>processApdusToByteArrays(ChannelControl.CLOSE_AFTER)&lt;/code>&lt;/li>
&lt;li>&lt;code>processApdusToByteArrays(false)&lt;/code> =&amp;gt; &lt;code>processApdusToByteArrays(ChannelControl.KEEP_OPEN)&lt;/code>&lt;/li>
&lt;li>&lt;code>processApdusToHexStrings(true)&lt;/code> =&amp;gt; &lt;code>processApdusToHexStrings(ChannelControl.CLOSE_AFTER)&lt;/code>&lt;/li>
&lt;li>&lt;code>processApdusToHexStrings(false)&lt;/code> =&amp;gt; &lt;code>processApdusToHexStrings(ChannelControl.KEEP_OPEN)&lt;/code>&lt;/li>
&lt;li>&lt;code>createCardSelectionManager()&lt;/code> =&amp;gt; &lt;code>getReaderApiFactory().createCardSelectionManager()&lt;/code>&lt;/li>
&lt;li>&lt;code>createCardSelection()&lt;/code> =&amp;gt;
&lt;ul>
&lt;li>&lt;strong>Calypso&lt;/strong> card extension: &lt;code>getCalypsoCardApiFactory().createCalypsoCardSelectionExtension()&lt;/code>&lt;/li>
&lt;li>&lt;strong>Generic&lt;/strong> card extension: &lt;code>createGenericCardSelectionExtension()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>createCardTransactionWithoutSecurity&lt;/code> =&amp;gt; &lt;code>getCalypsoCardApiFactory().createFreeTransactionManager&lt;/code>&lt;/li>
&lt;li>&lt;code>createSearchCommandData&lt;/code> =&amp;gt; &lt;code>getCalypsoCardApiFactory().createSearchCommandData&lt;/code>&lt;/li>
&lt;li>&lt;code>prepareComputeSignature&lt;/code> =&amp;gt; &lt;code>getCryptoExtension(CardTransactionLegacySamExtension.class).prepareComputeSignature&lt;/code>&lt;/li>
&lt;li>&lt;code>prepareVerifySignature&lt;/code> =&amp;gt; &lt;code>getCryptoExtension(CardTransactionLegacySamExtension.class).prepareVerifySignature&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="card-selection">Card selection&lt;/h3>
&lt;h4 id="prepare-a-calypso-card-selection-case">Prepare a Calypso card selection case&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('2', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-2">CalypsoCardSelection calypsoCardSelection =
CalypsoExtensionService.getInstance().createCardSelection()
.filterByDfName(...)
.setFileOccurrence(...)
.setFileControlInformation(...);
cardSelectionManager.prepareSelection(calypsoCardSelection);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('3', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-3">IsoCardSelector isoCardSelector =
SmartCardServiceProvider.getService().getReaderApiFactory().createIsoCardSelector()
.filterByDfName(...)
.setFileOccurrence(...)
.setFileControlInformation(...);
CalypsoCardSelectionExtension calypsoCardSelectionExtension =
CalypsoExtensionService.getInstance().getCalypsoCardApiFactory().createCalypsoCardSelectionExtension();
cardSelectionManager.prepareSelection(isoCardSelector, calypsoCardSelectionExtension);&lt;/code>&lt;/pre>
&lt;h4 id="prepare-a-calypso-sam-selection-case">Prepare a Calypso SAM selection case&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('4', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-4">CalypsoSamSelection CalypsoSamSelection =
CalypsoExtensionService.getInstance().createSamSelection()
.filterByProductType(productType)
.filterBySerialNumber(serialNumber);
cardSelectionManager.prepareSelection(CalypsoSamSelection);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('5', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-5">String powerOnDataFilter = LegacySamUtil.buildPowerOnDataFilter(productType, serialNumber);
BasicCardSelector basicCardSelector =
SmartCardServiceProvider.getService().getReaderApiFactory().createBasicCardSelector()
.filterByPowerOnData(powerOnDataFilter);
LegacySamSelectionExtension legacySamSelectionExtension =
LegacySamExtensionService.getInstance().getLegacySamApiFactory().createLegacySamSelectionExtension();
cardSelectionManager.prepareSelection(basicCardSelector, legacySamSelectionExtension);&lt;/code>&lt;/pre>
&lt;h4 id="prepare-a-generic-card-selection-case">Prepare a Generic card selection case&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('6', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-6">GenericCardSelection genericCardSelection =
GenericExtensionService.getInstance().createCardSelection()
.filterByDfName(...)
.setFileOccurrence(...)
.setFileControlInformation(...);
cardSelectionManager.prepareSelection(genericCardSelection);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-7">IsoCardSelector isoCardSelector =
SmartCardServiceProvider.getService().getReaderApiFactory().createIsoCardSelector()
.filterByDfName(...)
.setFileOccurrence(...)
.setFileControlInformation(...);
GenericCardSelectionExtension genericCardSelectionExtension =
GenericExtensionService.getInstance().createGenericCardSelectionExtension();
cardSelectionManager.prepareSelection(isoCardSelector, genericCardSelectionExtension);&lt;/code>&lt;/pre>
&lt;h4 id="schedule-a-card-selection-scenario">Schedule a card selection scenario&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-8">cardSelectionManager.scheduleCardSelectionScenario(
observableCardReader,
detectionMode,
notificationMode);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('9', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-9">cardSelectionManager.scheduleCardSelectionScenario(
observableCardReader,
notificationMode);&lt;/code>&lt;/pre>
&lt;h3 id="card-transaction">Card Transaction&lt;/h3>
&lt;h4 id="create-a-card-transaction-manager-without-security">Create a card transaction manager without security&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('10', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-10">CardTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance()
.createCardTransactionWithoutSecurity(cardReader, card);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('11', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-11">FreeTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance()
.getCalypsoCardApiFactory().createFreeTransactionManager(cardReader, card);&lt;/code>&lt;/pre>
&lt;h4 id="create-a-card-transaction-manager-with-security-regular-mode">Create a card transaction manager with security (regular mode)&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('12', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-12">CardSecuritySetting securitySetting =
CalypsoExtensionService.getInstance().createCardSecuritySetting()
.setControlSamResource(samReader, sam);
CardTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance()
.createCardTransaction(cardReader, card, securitySetting)&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('13', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-13">SymmetricCryptoCardTransactionManagerFactory cryptoCardTransactionManagerFactory =
LegacySamExtensionService.getInstance().getLegacySamApiFactory()
.createSymmetricCryptoCardTransactionManagerFactory(samReader, sam);
SymmetricCryptoSecuritySetting securitySetting =
CalypsoExtensionService.getInstance().getCalypsoCardApiFactory()
.createSymmetricCryptoSecuritySetting(cryptoCardTransactionManagerFactory);
SecureRegularModeTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance().getCalypsoCardApiFactory()
.createSecureRegularModeTransactionManager(cardReader, card, securitySetting);&lt;/code>&lt;/pre>
&lt;h4 id="create-a-card-transaction-manager-with-security-extended-mode">Create a card transaction manager with security (extended mode)&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('14', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-14">CardSecuritySetting securitySetting =
CalypsoExtensionService.getInstance().createCardSecuritySetting()
.setControlSamResource(samReader, sam);
CardTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance()
.createCardTransaction(cardReader, card, securitySetting)&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('15', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-15">SymmetricCryptoCardTransactionManagerFactory cryptoCardTransactionManagerFactory =
LegacySamExtensionService.getInstance().getLegacySamApiFactory()
.createSymmetricCryptoCardTransactionManagerFactory(samReader, sam);
SymmetricCryptoSecuritySetting securitySetting =
CalypsoExtensionService.getInstance().getCalypsoCardApiFactory()
.createSymmetricCryptoSecuritySetting(cryptoCardTransactionManagerFactory);
SecureExtendedModeTransactionManager cardTransactionManager =
CalypsoExtensionService.getInstance().getCalypsoCardApiFactory()
.createSecureExtendedModeTransactionManager(cardReader, card, securitySetting);&lt;/code>&lt;/pre>
&lt;h3 id="pso-signature-management-computationverification">PSO signature management (computation/verification)&lt;/h3>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('16', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-16">TraceableSignatureComputationData signatureComputationData =
CalypsoExtensionService.getInstance()
.createTraceableSignatureComputationData();
cardTransactionManager.prepareComputeSignature(signatureComputationData);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('17', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-17">TraceableSignatureComputationData signatureComputationData =
LegacySamExtensionService.getInstance()
.getLegacySamApiFactory().createTraceableSignatureComputationData();
cardTransactionManager.getCryptoExtension(CardTransactionLegacySamExtension.class)
.prepareComputeSignature(signatureComputationData);&lt;/code>&lt;/pre>
&lt;h3 id="sam-resource-service">SAM resource service&lt;/h3>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('18', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-18">CardResourceProfileExtension samResourceProfileExtension =
CalypsoExtensionService.getInstance()
.createSamResourceProfileExtension(
CalypsoExtensionService.getInstance()
.createSamSelection()
.filterByProductType(CalypsoSam.ProductType.SAM_C1));&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('19', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-19">CardResourceProfileExtension samResourceProfileExtension =
LegacySamExtensionService.getInstance()
.createLegacySamResourceProfileExtension(
LegacySamExtensionService.getInstance()
.getLegacySamApiFactory()
.createLegacySamSelectionExtension(),
LegacySamUtil.buildPowerOnDataFilter(LegacySam.ProductType.SAM_C1, null));&lt;/code>&lt;/pre>
&lt;h3 id="miscellaneous">Miscellaneous&lt;/h3>
&lt;h4 id="contact-reader-payload-capacity-management">Contact reader payload capacity management&lt;/h4>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('20', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-20">ContextSetting contextSetting =
CalypsoExtensionService.getInstance().getContextSetting().setContactReaderPayloadCapacity(...);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>3.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('21', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-21">ContextSetting contextSetting =
LegacySamExtensionService.getInstance().getContextSetting().setContactReaderPayloadCapacity(...);&lt;/code>&lt;/pre>
&lt;br>
&lt;hr>
&lt;h2 id="upgrade-from-1-to-2">Upgrade from &amp;ldquo;1.+&amp;rdquo; to &amp;ldquo;2.+&amp;rdquo;&lt;/h2>
&lt;p>Here is a comparative review of the main API changes between Keyple 1.+ and 2.+:&lt;/p>
&lt;h3 id="dependency-management">Dependency management&lt;/h3>
&lt;p>Use the &lt;a href="../../components/overview/configuration-wizard/">configuration wizard&lt;/a> to correctly import the new artifacts into your project.&lt;/p>
&lt;h3 id="initial-configuration">Initial configuration&lt;/h3>
&lt;h4 id="use-of-a-provider-to-access-the-smart-card-service">Use of a provider to access the smart card service&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('23', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-23">SmartCardService smartCardService = SmartCardService.getInstance();&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('24', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-24">SmartCardService smartCardService = SmartCardServiceProvider.getService();&lt;/code>&lt;/pre>
&lt;h4 id="use-of-builders-to-instantiate-plugin-factories">Use of builders to instantiate plugin factories&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('25', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-25">Plugin plugin = smartCardService.registerPlugin(new PcscPluginFactory(null, new ExceptionHandlerImpl()));
...
((ObservableReader) reader).addObserver(new CardReaderObserver());&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('26', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-26">Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build());
...
((ObservableCardReader) reader).setReaderObservationExceptionHandler(new ExceptionHandlerImpl());
((ObservableCardReader) reader).addObserver(new CardReaderObserver());&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
Exception handlers are no longer required when registering the plugin but only when starting the observation.
&lt;/div>
&lt;/div>
&lt;h4 id="use-of-a-new-interface-dedicated-to-the-management-of-protocols">Use of a new interface dedicated to the management of protocols&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('28', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-28">reader.activateProtocol(
PcscSupportedContactlessProtocols.ISO_14443_4.name(),
ContactlessCardCommonProtocols.ISO_14443_4.name());&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('29', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-29">((ConfigurableCardReader) reader).activateProtocol(
PcscSupportedContactlessProtocols.ISO_14443_4.name(),
CARD_ISO_14443_4);&lt;/code>&lt;/pre>
&lt;h4 id="use-of-plugin-and-reader-extensions-for-specific-configurations">Use of plugin and reader extensions for specific configurations&lt;/h4>
&lt;div class="alert alert-note">
&lt;div>
The examples below show the evolutions for the configuration of a PC/SC reader but the principle is the same for all plugins and readers.
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('31', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-31">reader
.setContactless(true)
.setIsoProtocol(PcscReader.IsoProtocol.T1);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('32', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-32">plugin.getReaderExtension(PcscReader.class, reader.getName())
.setContactless(true)
.setIsoProtocol(PcscReader.IsoProtocol.T1);&lt;/code>&lt;/pre>
&lt;h3 id="card-selection-1">Card selection&lt;/h3>
&lt;h4 id="use-a-manager-instead-of-service-for-card-selection">Use a manager instead of service for card selection&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('33', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-33">CardSelectionsService cardSelectionsService = new CardSelectionsService();&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('34', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-34">CardSelectionManager cardSelectionManager = smartCardService.createCardSelectionManager();&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
A new instance of the card selection manager is provided by the smart card service.
&lt;/div>
&lt;/div>
&lt;h4 id="use-of-a-card-extension-to-create-a-card-selection">Use of a card extension to create a card selection&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('36', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-36">GenericCardSelectionRequest genericCardSelectionRequest =
new GenericCardSelectionRequest(
CardSelector.builder()
.aidSelector(CardSelector.AidSelector.builder().aidToSelect(cardAid).build())
.build());&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('37', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-37">CardSelection cardSelection = GenericExtensionService.getInstance()
.createCardSelection()
.filterByDfName(cardAid);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;ul>
&lt;li>The &lt;code>CardSelector&lt;/code> class does not exist anymore.&lt;/li>
&lt;li>A generic card extension is now available.&lt;/li>
&lt;li>The card extension service is used to configure the card selection.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;h4 id="explicit-card-selection">Explicit card selection&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('39', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-39">CardSelectionsResult selectionResult = cardSelectionsService.processExplicitSelections(reader);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('40', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-40">CardSelectionResult selectionResult = cardSelectionManager.processCardSelectionScenario(reader);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
Note the removal of the &amp;ldquo;s&amp;rdquo; in &lt;code>CardSelectionResult&lt;/code>.
&lt;/div>
&lt;/div>
&lt;h4 id="scheduled-card-selection">Scheduled card selection&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('42', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-42">((ObservableReader) reader)
.setDefaultSelectionRequest(
defaultSelectionsRequest,
ObservableReader.NotificationMode.MATCHED_ONLY,
ObservableReader.PollingMode.REPEATING);
((ObservableReader) reader).addObserver(new CardReaderObserver());&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('43', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-43">cardSelectionManager.scheduleCardSelectionScenario(
(ObservableCardReader) reader,
ObservableCardReader.DetectionMode.REPEATING,
ObservableCardReader.NotificationMode.MATCHED_ONLY);
((ObservableCardReader) reader).setReaderObservationExceptionHandler(new ExceptionHandlerImpl());
((ObservableCardReader) reader).addObserver(new CardReaderObserver());&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
The selection data is no longer provided to the observable reader but to the selection manager.
It is the observable reader that is provided to the selection manager.
&lt;/div>
&lt;/div>
&lt;h4 id="the-processing-of-the-result-of-the-selection-response-has-changed">The processing of the result of the selection response has changed&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('45', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-45">AbstractSmartCard smartCard =
defaultSelection
.processDefaultSelectionsResponse(event.getDefaultSelectionsResponse())
.getActiveSmartCard();&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('46', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-46">SmartCard smartCard =
cardSelectionManager
.parseScheduledCardSelectionsResponse(event.getScheduledCardSelectionsResponse())
.getActiveSmartCard();&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;code>AbstractSmartCard&lt;/code> was changed to the &lt;code>SmartCard&lt;/code> interface.
&lt;/div>
&lt;/div>
&lt;h3 id="calypso-card-extension">Calypso Card Extension&lt;/h3>
&lt;h4 id="vocabulary">Vocabulary&lt;/h4>
&lt;ul>
&lt;li>&lt;code>PO&lt;/code> has been replaced by &lt;code>Card&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h4 id="sam-management">SAM management&lt;/h4>
&lt;p>The SAM resource manager has been replaced by a generic &lt;a href="../../components/core/keyple-service-resource-lib/">Card Resource Service&lt;/a>.&lt;/p>
&lt;h4 id="card-transaction-1">Card transaction&lt;/h4>
&lt;p>Access to the card transaction manager has changed. It is now done through the card extension service.&lt;/p>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('49', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-49">PoTransaction poTransaction =
new PoTransaction(
new CardResource&amp;lt;CalypsoPo&amp;gt;(poReader, calypsoPo),
CalypsoUtils.getSecuritySettings(samResource));&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('50', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-50">CardTransactionManager transactionManager = CalypsoExtensionService.getInstance()
.createCardTransaction(cardReader, calypsoCard, cardSecuritySetting);&lt;/code>&lt;/pre>
&lt;h3 id="distributed-systems">Distributed systems&lt;/h3>
&lt;h4 id="remote-plugin-registration">Remote plugin registration&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('51', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-51">// Init the remote plugin factory.
RemotePluginServerFactory factory =
RemotePluginServerFactory.builder()
.withDefaultPluginName()
.withSyncNode()
.withPluginObserver(new RemotePluginServerObserver())
.usingEventNotificationPool(
Executors.newCachedThreadPool(r -&amp;gt; new Thread(r, &amp;#34;server-pool&amp;#34;)))
.build();
// Register the remote plugin to the smart card service using the factory.
SmartCardService.getInstance().registerPlugin(factory);&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('52', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-52">RemotePluginServerFactory factory =
RemotePluginServerFactoryBuilder.builder(REMOTE_PLUGIN_NAME)
.withSyncNode()
.build();
// Register the remote plugin to the smart card service using the factory.
ObservablePlugin plugin =
(ObservablePlugin) SmartCardServiceProvider.getService().registerPlugin(factory);
// Init the remote plugin observer.
plugin.setPluginObservationExceptionHandler(new ExceptionHandlerImpl());
plugin.addObserver(new RemotePluginServerObserver());&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;ul>
&lt;li>You have to specify the name of the plugin.&lt;/li>
&lt;li>It is no longer necessary to provide a thread pool.&lt;/li>
&lt;li>The exception handler must be provided as for any observable plugin before adding an observer.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;h4 id="local-service-registration">Local service registration&lt;/h4>
&lt;ul>
&lt;li>1.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('54', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-54">// Init the local service using the associated factory.
LocalServiceClientFactory.builder()
.withDefaultServiceName()
.withSyncNode(endpointClient)
.withoutReaderObservation()
.getService();&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>2.+&lt;/li>
&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('55', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-55">// Init the local service factory.
LocalServiceClientFactory factory =
LocalServiceClientFactoryBuilder.builder(LOCAL_SERVICE_NAME)
.withSyncNode(endpointClient)
.build();
// Init the local service using the associated factory.
SmartCardServiceProvider.getService().registerDistributedLocalService(factory);&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;ul>
&lt;li>You have to specify the name of the local service.&lt;/li>
&lt;li>The local service must be registered with the smart card service.&lt;/li>
&lt;li>It behaves like a plugin or reader and also provides an extension to access specific settings.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div></description></item></channel></rss>