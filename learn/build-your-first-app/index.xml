<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Build your first app | Eclipse Keyple</title><link>https://keyple.org/learn/build-your-first-app/</link><atom:link href="https://keyple.org/learn/build-your-first-app/index.xml" rel="self" type="application/rss+xml"/><description>Build your first app</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2020-2023 The Eclipse Keyple® project. All Rights Reserved.</copyright><image><url>https://keyple.org/media/logo.svg</url><title>Build your first app</title><link>https://keyple.org/learn/build-your-first-app/</link></image><item><title>Build your first Java application</title><link>https://keyple.org/learn/build-your-first-app/java-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/build-your-first-app/java-app/</guid><description>&lt;hr>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This quick start describes how to create a ready-to-execute Java command-line application that runs a simple transaction based on
a Calypso Card involving two smart card readers.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>The demonstration application created for this quick start requires:&lt;/p>
&lt;ul>
&lt;li>a Calypso Card (contactless smart card, NFC mobile phone with a Calypso applet or application),&lt;/li>
&lt;li>a Calypso SAM (Secure Access Module).&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;p>We will use three main components of Keyple:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../components-java/core/">Keyple Service Java Library&lt;/a>
which is the base component to which all the others refer,&lt;/li>
&lt;li>&lt;a href="../../components-java/card-extensions/keyple-card-calypso-java-lib/">Keyple Card Calypso&lt;/a>
add-on to handle the commands sent to the Calypso card and the Calypso SAM,&lt;/li>
&lt;li>&lt;a href="../../components-java/standard-reader-plugins/keyple-plugin-pcsc-java-lib/">Keyple Plugin PC/SC&lt;/a>
add-on to provide the ability to manage PC/SC readers.&lt;/li>
&lt;/ul>
&lt;p>In this guide &lt;a href="https://gradle.org/" target="_blank" rel="noopener">Gradle&lt;/a> is used as build automation
tool, but it is easy to transpose these explanations to another tool
such as Maven for example.&lt;/p>
&lt;p>See &lt;a href="../../components-java/overview/configuration-wizard/">here&lt;/a> for the configuration of the dependencies.&lt;/p>
&lt;p>The example can run on any machine: Linux, Windows and macOS. If not
installed in your machine, you will need to download :&lt;/p>
&lt;ul>
&lt;li>Java 1.6+&lt;/li>
&lt;li>&lt;a href="https://gradle.org/install/" target="_blank" rel="noopener">Gradle&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We recommend that you use a Java IDE like
&lt;a href="https://www.eclipse.org/ide/" target="_blank" rel="noopener">Eclipse&lt;/a> or
&lt;a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Intellij IDEA&lt;/a> to create your new
Gradle project.&lt;/p>
&lt;hr>
&lt;h2 id="create-a-gradle-based-empty-project">Create a Gradle-based empty project&lt;/h2>
&lt;p>Create a new Java project and add the following statements to your
&lt;code>build.gradle&lt;/code> file to import the Keyple components into your
project:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('5', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-gradle" id="code-5">plugins {
id &amp;#39;java&amp;#39;
}
repositories {
mavenCentral()
}
dependencies {
// Import CNA APIs
implementation &amp;#39;org.calypsonet.terminal:calypsonet-terminal-reader-java-api:1.2.0&amp;#39;
implementation &amp;#39;org.calypsonet.terminal:calypsonet-terminal-calypso-java-api:1.8.0&amp;#39;
// Import Keyple components
implementation &amp;#39;org.eclipse.keyple:keyple-common-java-api:2.0.0&amp;#39;
implementation &amp;#39;org.eclipse.keyple:keyple-util-java-lib:2.3.0&amp;#39;
implementation &amp;#39;org.eclipse.keyple:keyple-service-java-lib:2.2.1&amp;#39;
implementation &amp;#39;org.eclipse.keyple:keyple-card-calypso-java-lib:2.3.4&amp;#39;
implementation &amp;#39;org.eclipse.keyple:keyple-plugin-pcsc-java-lib:2.1.2&amp;#39;
}&lt;/code>&lt;/pre>
&lt;p>If necessary, also create the usual tree in which the Java code of this
guide will be placed, namely the folders: &lt;code>\src\main\java&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="lets-code">Let&amp;rsquo;s code&lt;/h2>
&lt;p>Now let&amp;rsquo;s see step by step how to create in one single class the
elements that allow a certified reading of data through a Calypso secure
session.&lt;/p>
&lt;p>In a real ticketing application, the organization of the code would
probably be different, but the point here is to show how Keyple makes it
possible to perform very simply operations that normally require a
quantity of code and knowledge that far exceeds what is implemented
here.&lt;/p>
&lt;p>You can either progressively copy each of the small portions of code
that follow or copy the whole class at the bottom of this page.&lt;/p>
&lt;h3 id="create-the-class-skeleton">Create the class skeleton&lt;/h3>
&lt;p>Copy the source code below in a new Java Class named
DemoCardAuthentication.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('6', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-6">import org.calypsonet.terminal.calypso.WriteAccessLevel;
import org.calypsonet.terminal.calypso.card.CalypsoCard;
import org.calypsonet.terminal.calypso.sam.CalypsoSam;
import org.calypsonet.terminal.calypso.transaction.CardSecuritySetting;
import org.calypsonet.terminal.calypso.transaction.CardTransactionManager;
import org.calypsonet.terminal.reader.CardReader;
import org.calypsonet.terminal.reader.selection.CardSelectionManager;
import org.calypsonet.terminal.reader.selection.CardSelectionResult;
import org.eclipse.keyple.card.calypso.CalypsoExtensionService;
import org.eclipse.keyple.core.service.Plugin;
import org.eclipse.keyple.core.service.SmartCardService;
import org.eclipse.keyple.core.service.SmartCardServiceProvider;
import org.eclipse.keyple.plugin.pcsc.PcscPluginFactoryBuilder;
import org.eclipse.keyple.plugin.pcsc.PcscReader;
public class DemoCardAuthentication {
// The names of the readers must be adapted to the actual configuration.
private static final String CARD_READER_NAME = &amp;#34;ASK LoGO 0&amp;#34;;
private static final String SAM_READER_NAME = &amp;#34;Identive CLOUD 2700 R Smart Card Reader 0&amp;#34;;
private static final String AID = &amp;#34;315449432E49434131&amp;#34;; // Keyple test kit profile 1, Application 2
private static final int RECORD_NUMBER_1 = 1;
private static final byte SFI_ENVIRONMENT_AND_HOLDER = (byte) 0x07;
public static void main(String[] args) {
// ...
}
}&lt;/code>&lt;/pre>
&lt;h3 id="set-up-the-pcsc-plugin">Set up the PC/SC plugin&lt;/h3>
&lt;p>The first step to use Keyple is to initialize the plugin and smart card readers.&lt;/p>
&lt;p>In this snippet the PC/SC plugin is registered to the SmartCardService.&lt;/p>
&lt;p>Two readers needs to be connected to the local machine. Change
&amp;ldquo;CARD_READER_NAME&amp;rdquo; and &amp;ldquo;SAM_READER_NAME&amp;rdquo; with the name of your USB readers.&lt;/p>
&lt;p>If you don&amp;rsquo;t know the names of the readers, read how to find them in the &lt;a href="#faq">FAQ&lt;/a>.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-7"> // Get the instance of the SmartCardService
SmartCardService smartCardService = SmartCardServiceProvider.getService();
// Register the PcscPlugin with the SmartCardService, get a generic plugin instance in return
Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build());
// Get and set up the card reader
CardReader cardReader = plugin.getReader(CARD_READER_NAME);
if (cardReader == null) {
throw new IllegalStateException(&amp;#34;Card reader &amp;#34; &amp;#43; CARD_READER_NAME &amp;#43; &amp;#34; not found.&amp;#34;);
}
// Set the card reader type (for ratification management purpose)
plugin.getReaderExtension(PcscReader.class, CARD_READER_NAME).setContactless(true);
if (!cardReader.isCardPresent()) {
throw new IllegalStateException(&amp;#34;No card is present in the reader &amp;#34; &amp;#43; cardReader.getName());
}
// Get and set up the SAM reader
CardReader samReader = plugin.getReader(SAM_READER_NAME);
if (samReader == null) {
throw new IllegalStateException(&amp;#34;SAM reader &amp;#34; &amp;#43; SAM_READER_NAME &amp;#43; &amp;#34; not found.&amp;#34;);
}
if (!samReader.isCardPresent()) {
throw new IllegalStateException(&amp;#34;No SAM is present in the reader &amp;#34; &amp;#43; samReader.getName());
}&lt;/code>&lt;/pre>
&lt;h3 id="set-up-the-calypso-card-extension">Set up the Calypso card extension&lt;/h3>
&lt;p>The Calypso card extension service will provide means to handle cards, SAMs and to manage card transactions.
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-8"> // Get the Calypso card extension service
CalypsoExtensionService calypsoExtensionService = CalypsoExtensionService.getInstance();
// Verify that the extension&amp;#39;s API level is consistent with the current service.
smartCardService.checkCardExtension(calypsoExtensionService);&lt;/code>&lt;/pre>&lt;/p>
&lt;h3 id="select-the-calypso-sam">Select the Calypso SAM&lt;/h3>
&lt;p>Before executing a transaction each smart card should be selected. The
next step is the selection of the Calypso SAM resulting in a
CalypsoSam object.&lt;/p>
&lt;p>It is then combined with the SAM reader to form the SAM resource needed
later within the transaction service.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('9', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-9"> // Select the SAM
CardSelectionManager samSelectionManager = smartCardService.createCardSelectionManager();
samSelectionManager.prepareSelection(calypsoExtensionService.createSamSelection());
CardSelectionResult samSelectionResult =
samSelectionManager.processCardSelectionScenario(samReader);
CalypsoSam calypsoSam = (CalypsoSam) samSelectionResult.getActiveSmartCard();
if (calypsoSam == null) {
throw new IllegalStateException(&amp;#34;The SAM selection failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;h3 id="select-the-calypso-card">Select the Calypso card&lt;/h3>
&lt;p>1st card exchange:&lt;/p>
&lt;p>The Calypso card selection is made using the card application&amp;rsquo;s AID
and results in a CalypsoCard object that will contain all the information extracted
from the Calypso card all along the transaction.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('10', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-10"> // Select the card
CardSelectionManager cardSelectionManager = smartCardService.createCardSelectionManager();
cardSelectionManager.prepareSelection(
calypsoExtensionService.createCardSelection().filterByDfName(AID));
CardSelectionResult cardSelectionResult =
cardSelectionManager.processCardSelectionScenario(cardReader);
CalypsoCard calypsoCard = (CalypsoCard) cardSelectionResult.getActiveSmartCard();
if (calypsoCard == null) {
throw new IllegalStateException(&amp;#34;The card selection failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;h3 id="open-the-calypso-secure-session">Open the Calypso secure session&lt;/h3>
&lt;p>2nd card exchange :&lt;/p>
&lt;p>The secure session opening operated by the CardTransaction service is
combined with the reading of the environment file (SFI=07h).&lt;/p>
&lt;p>The mutual authentication process between Calypso card and Calypso SAM is initiated transparently.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('11', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-11"> // Prepare the security settings used during the Calypso transaction
CardSecuritySetting cardSecuritySetting =
calypsoExtensionService
.createCardSecuritySetting()
.setControlSamResource(samReader, calypsoSam);
// Performs file reads using the card transaction manager in a secure session.
CardTransactionManager cardTransactionManager =
calypsoExtensionService
.createCardTransaction(cardReader, calypsoCard, cardSecuritySetting)
.prepareOpenSecureSession(WriteAccessLevel.DEBIT)
.prepareReadRecord(SFI_ENVIRONMENT_AND_HOLDER, RECORD_NUMBER_1)
.processCommands(false);&lt;/code>&lt;/pre>
&lt;h3 id="close-the-calypso-secure-session">Close the Calypso secure session&lt;/h3>
&lt;p>3rd card exchange:&lt;/p>
&lt;p>Simply close the Calypso secure session&lt;/p>
&lt;p>The mutual authentication is finalized, it includes the authentication
of the data in the read file.&lt;/p>
&lt;p>Note: any technical, cryptographic or content-related incident in the Calypso card
would be signalled by an exception and would interrupt the thread of
execution.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('12', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-12"> // Close the secure session, free the communication channel at the same time
cardTransactionManager.prepareCloseSecureSession().processCommands(true);
System.out.println(
&amp;#34;= #### The Secure Session ended successfully, the card is authenticated and the data read are certified.&amp;#34;);
System.out.println(
&amp;#34;= #### FILE CONTENT = &amp;#34; &amp;#43; calypsoCard.getFileBySfi(SFI_ENVIRONMENT_AND_HOLDER).toString());
System.out.println(&amp;#34;= #### End of the Calypso card processing.&amp;#34;);&lt;/code>&lt;/pre>
&lt;h3 id="unregister-the-plugin">Unregister the plugin&lt;/h3>
&lt;p>Finally unregister the plugin before shutting down the application&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('13', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-13"> // Unregister the plugin before leaving the application
smartCardService.unregisterPlugin(plugin.getName());
System.exit(0);&lt;/code>&lt;/pre>
&lt;p>Find the complete code source &lt;a href="#full-code">below&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="run">Run&lt;/h2>
&lt;ol>
&lt;li>Connect two USB PC/SC Readers.&lt;/li>
&lt;li>Insert the Calypso SAM in the SAM reader.&lt;/li>
&lt;li>Insert the Calypso card in the card reader.&lt;/li>
&lt;li>Run the application.&lt;/li>
&lt;/ol>
&lt;div class="alert alert-note">
&lt;div>
All project dependencies, including Keyple
components, are downloaded during the first run, which can take some
time.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h4 id="how-do-i-find-out-the-names-of-the-readers">How do I find out the names of the readers?&lt;/h4>
&lt;p>To find out the names of the readers connected to your computer, we will
use Keyple with the following class which prints in the console the
number and names of the readers present:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('15', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-15">import org.eclipse.keyple.core.service.Plugin;
import org.eclipse.keyple.core.service.SmartCardService;
import org.eclipse.keyple.plugin.pcsc.PcscPluginFactoryBuilder;
import java.util.Set;
public class ReaderDiscovery {
public static void main(String[] args) {
SmartCardService smartCardService = SmartCardServiceProvider.getService();
Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build());
Set&amp;lt;String&amp;gt; names = plugin.getReaderNames();
System.out.println(names.size() &amp;#43; &amp;#34; readers found.&amp;#34;);
for (String name : names) {
System.out.println(&amp;#39;&amp;#34;&amp;#39; &amp;#43; name &amp;#43; &amp;#39;&amp;#34;&amp;#39;);
}
}
} &lt;/code>&lt;/pre>
&lt;p>The console output should look something like:&lt;/p>
&lt;pre>&lt;code>2 readers found.
&amp;quot;ASK LoGO 0&amp;quot;
&amp;quot;Identive CLOUD 2700 R Smart Card Reader 0&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Identify which reader will be the card (contactless) reader and the SAM
(contact) reader and replace &lt;code>CARD_READER_NAME&lt;/code> and
&lt;code>SAM_READER_NAME&lt;/code> with their values.&lt;/p>
&lt;h4 id="how-to-activate-the-keyples-logs">How to activate the Keyple&amp;rsquo;s logs?&lt;/h4>
&lt;p>As soon as the &lt;code>slf4j&lt;/code> library is imported into the project, Keyple
modules are able to produce logs.
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('16', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-gradle" id="code-16"> // Import logger libs
implementation &amp;#39;org.slf4j:slf4j-api:1.7.32&amp;#39;
implementation &amp;#39;org.slf4j:slf4j-simple:1.7.32&amp;#39;&lt;/code>&lt;/pre>&lt;/p>
&lt;p>However, to take full advantage of the possibilities of this library, it
is necessary to create a &lt;code>simplelogger.properties&lt;/code> file in the
&lt;code>/src/main/resources&lt;/code> folder of the project.&lt;/p>
&lt;p>The self-documented content of this file may be:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('17', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-ini" id="code-17"># SLF4J&amp;#39;s SimpleLogger configuration file
# Simple implementation of Logger that sends all enabled log messages, for all defined loggers, to System.err.
# Default logging detail level for all instances of SimpleLogger.
# Must be one of (&amp;#34;trace&amp;#34;, &amp;#34;debug&amp;#34;, &amp;#34;info&amp;#34;, &amp;#34;warn&amp;#34;, or &amp;#34;error&amp;#34;).
# If not specified, defaults to &amp;#34;info&amp;#34;.
org.slf4j.simpleLogger.defaultLogLevel=debug
# Logging detail level for a SimpleLogger instance named &amp;#34;xxxxx&amp;#34;.
# Must be one of (&amp;#34;trace&amp;#34;, &amp;#34;debug&amp;#34;, &amp;#34;info&amp;#34;, &amp;#34;warn&amp;#34;, or &amp;#34;error&amp;#34;).
# If not specified, the default logging detail level is used.
#org.slf4j.simpleLogger.log.xxxxx=
# Set to true if you want the current date and time to be included in output messages.
# Default is false, and will output the number of milliseconds elapsed since startup.
org.slf4j.simpleLogger.showDateTime=true
# The date and time format to be used in the output messages.
# The pattern describing the date and time format is the same that is used in java.text.SimpleDateFormat.
# If the format is not specified or is invalid, the default format is used.
# The default format is yyyy-MM-dd HH:mm:ss:SSS Z.
org.slf4j.simpleLogger.dateTimeFormat=[HH:mm:ss:SSS]
# Set to true if you want to output the current thread name.
# Defaults to true.
org.slf4j.simpleLogger.showThreadName=true
# Set to true if you want the Logger instance name to be included in output messages.
# Defaults to true.
org.slf4j.simpleLogger.showLogName=false
# Set to true if you want the last component of the name to be included in output messages.
# Defaults to false.
org.slf4j.simpleLogger.showShortLogName=true
org.slf4j.simpleLogger.levelInBrackets=true&lt;/code>&lt;/pre>
&lt;h4 id="why-do-i-see-a-warning-in-the-console-about-illegal-reflexive-access">Why do I see a warning in the console about illegal reflexive access&lt;/h4>
&lt;p>when running the application?&lt;/p>
&lt;p>A known problem on Windows 8/10 platforms causes the smartcard service
to stop when the last reader is removed. This problem prevents a
&amp;ldquo;classic&amp;rdquo; monitoring of connections and disconnections of readers with
the smartcard.io library (Java PC/SC). So for the moment we are using a
workaround based on reflexivity to overcome this problem and allow a
correct monitoring of the readers in the PC/SC plugin. This has the
disadvantage of generating a warning message with recent versions of the
JVM. However, we have not found any problems with this implementation of
the PC/SC plugin so far.&lt;/p>
&lt;h4 id="full-code">Full code&lt;/h4>
&lt;p>Here is the complete code of this quick start in one single block.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('18', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-java" id="code-18">import org.calypsonet.terminal.calypso.WriteAccessLevel;
import org.calypsonet.terminal.calypso.card.CalypsoCard;
import org.calypsonet.terminal.calypso.sam.CalypsoSam;
import org.calypsonet.terminal.calypso.transaction.CardSecuritySetting;
import org.calypsonet.terminal.calypso.transaction.CardTransactionManager;
import org.calypsonet.terminal.reader.CardReader;
import org.calypsonet.terminal.reader.selection.CardSelectionManager;
import org.calypsonet.terminal.reader.selection.CardSelectionResult;
import org.eclipse.keyple.card.calypso.CalypsoExtensionService;
import org.eclipse.keyple.core.service.Plugin;
import org.eclipse.keyple.core.service.SmartCardService;
import org.eclipse.keyple.core.service.SmartCardServiceProvider;
import org.eclipse.keyple.plugin.pcsc.PcscPluginFactoryBuilder;
import org.eclipse.keyple.plugin.pcsc.PcscReader;
public class DemoCardAuthentication {
// The names of the readers must be adapted to the actual configuration.
private static final String CARD_READER_NAME = &amp;#34;ASK LoGO 0&amp;#34;;
private static final String SAM_READER_NAME = &amp;#34;Identive CLOUD 2700 R Smart Card Reader 0&amp;#34;;
private static final String AID = &amp;#34;315449432E49434131&amp;#34;; // Keyple test kit profile 1, Application 2
private static final int RECORD_NUMBER_1 = 1;
private static final byte SFI_ENVIRONMENT_AND_HOLDER = (byte) 0x07;
public static void main(String[] args) {
// Get the instance of the SmartCardService
SmartCardService smartCardService = SmartCardServiceProvider.getService();
// Register the PcscPlugin with the SmartCardService, get a generic plugin instance in return
Plugin plugin = smartCardService.registerPlugin(PcscPluginFactoryBuilder.builder().build());
// Get and set up the card reader
CardReader cardReader = plugin.getReader(CARD_READER_NAME);
if (cardReader == null) {
throw new IllegalStateException(&amp;#34;Card reader &amp;#34; &amp;#43; CARD_READER_NAME &amp;#43; &amp;#34; not found.&amp;#34;);
}
// Set the card reader type (for ratification management purpose)
plugin.getReaderExtension(PcscReader.class, CARD_READER_NAME).setContactless(true);
if (!cardReader.isCardPresent()) {
throw new IllegalStateException(&amp;#34;No card is present in the reader &amp;#34; &amp;#43; cardReader.getName());
}
// Get and set up the SAM reader
CardReader samReader = plugin.getReader(SAM_READER_NAME);
if (samReader == null) {
throw new IllegalStateException(&amp;#34;SAM reader &amp;#34; &amp;#43; SAM_READER_NAME &amp;#43; &amp;#34; not found.&amp;#34;);
}
if (!samReader.isCardPresent()) {
throw new IllegalStateException(&amp;#34;No SAM is present in the reader &amp;#34; &amp;#43; samReader.getName());
}
// Get the Calypso card extension service
CalypsoExtensionService calypsoExtensionService = CalypsoExtensionService.getInstance();
// Verify that the extension&amp;#39;s API level is consistent with the current service.
smartCardService.checkCardExtension(calypsoExtensionService);
// Select the SAM
CardSelectionManager samSelectionManager = smartCardService.createCardSelectionManager();
samSelectionManager.prepareSelection(calypsoExtensionService.createSamSelection());
CardSelectionResult samSelectionResult =
samSelectionManager.processCardSelectionScenario(samReader);
CalypsoSam calypsoSam = (CalypsoSam) samSelectionResult.getActiveSmartCard();
if (calypsoSam == null) {
throw new IllegalStateException(&amp;#34;The SAM selection failed.&amp;#34;);
}
// Select the card
CardSelectionManager cardSelectionManager = smartCardService.createCardSelectionManager();
cardSelectionManager.prepareSelection(
calypsoExtensionService.createCardSelection().filterByDfName(AID));
CardSelectionResult cardSelectionResult =
cardSelectionManager.processCardSelectionScenario(cardReader);
CalypsoCard calypsoCard = (CalypsoCard) cardSelectionResult.getActiveSmartCard();
if (calypsoCard == null) {
throw new IllegalStateException(&amp;#34;The card selection failed.&amp;#34;);
}
// Prepare the security settings used during the Calypso transaction
CardSecuritySetting cardSecuritySetting =
calypsoExtensionService
.createCardSecuritySetting()
.setControlSamResource(samReader, calypsoSam);
// Performs file reads using the card transaction manager in a secure session.
// Close the secure session, free the communication channel at the same time.
CardTransactionManager cardTransactionManager =
calypsoExtensionService
.createCardTransaction(cardReader, calypsoCard, cardSecuritySetting)
.prepareOpenSecureSession(WriteAccessLevel.DEBIT)
.prepareReadRecord(SFI_ENVIRONMENT_AND_HOLDER, RECORD_NUMBER_1)
.prepareCloseSecureSession()
.processCommands(true);
System.out.println(
&amp;#34;= #### The Secure Session ended successfully, the card is authenticated and the data read are certified.&amp;#34;);
System.out.println(
&amp;#34;= #### FILE CONTENT = &amp;#34; &amp;#43; calypsoCard.getFileBySfi(SFI_ENVIRONMENT_AND_HOLDER).toString());
System.out.println(&amp;#34;= #### End of the Calypso card processing.&amp;#34;);
// Unregister the plugin before leaving the application
smartCardService.unregisterPlugin(plugin.getName());
System.exit(0);
}
}&lt;/code>&lt;/pre></description></item><item><title>Build your first Android application</title><link>https://keyple.org/learn/build-your-first-app/android-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/build-your-first-app/android-app/</guid><description>&lt;hr>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The development of an Android application based on Keyple follows the same principles as those exposed in the Java part.&lt;/p>
&lt;p>However, this guide points out the specificities of this environment based on the &lt;strong>Android NFC application&lt;/strong> example provided in the &lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">keyple-java-example&lt;/a> repository.&lt;/p>
&lt;p>We recommend that Android application developers clone this example to better understand how Keyple works on Android.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>The application available in the example repository requires:&lt;/p>
&lt;ul>
&lt;li>a retail Device with NFC powered by android.nfc library (integrated into standard Android SDK),&lt;/li>
&lt;li>Android OS 19+,&lt;/li>
&lt;li>a Calypso card (contactless smart card, NFC mobile phone with a Calypso applet or application).&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;p>It uses three main components of Keyple:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../components-java/core/">Keyple Service Java Library&lt;/a>
which is the base component to which all the others refer,&lt;/li>
&lt;li>&lt;a href="../../components-java/card-extensions/keyple-card-generic-java-lib/">Keyple Card Generic&lt;/a>
add-on to handle the commands sent to the Calypso card,&lt;/li>
&lt;li>&lt;a href="../../components-java/standard-reader-plugins/keyple-plugin-android-nfc-java-lib/">Keyple Plugin Android NFC&lt;/a>
add-on to provide the ability to drive the NFC reader.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://gradle.org/" target="_blank" rel="noopener">Gradle&lt;/a> is used as build automation tool, but it is easy to transpose these explanations to another tool
such as Maven for example.&lt;/p>
&lt;hr>
&lt;h2 id="project-setup">Project setup&lt;/h2>
&lt;p>The dependencies to be imported into the project are accessible with the &lt;a href="../../components-java/overview/configuration-wizard/">configuration wizard&lt;/a>.&lt;/p>
&lt;p>Depending on the nature of the hardware resources required, it is necessary to declare certain permissions in the project manifest file.
In the case of the Android NFC example, access to NFC functions is declared as follows:
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('5', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-xml" id="code-5">&amp;lt;manifest xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&amp;gt;
...
&amp;lt;uses-permission android:name=&amp;#34;android.permission.NFC&amp;#34; /&amp;gt;
&amp;lt;uses-feature android:name=&amp;#34;android.hardware.nfc&amp;#34; android:required=&amp;#34;true&amp;#34; /&amp;gt;
...
&amp;lt;application ...&amp;gt;
...
&amp;lt;activity ... &amp;gt;
...
&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&amp;#34;android.nfc.action.TECH_DISCOVERED&amp;#34; /&amp;gt;
&amp;lt;/intent-filter&amp;gt;
&amp;lt;meta-data
android:name=&amp;#34;android.nfc.action.TECH_DISCOVERED&amp;#34;
android:resource=&amp;#34;@xml/tech_list&amp;#34; /&amp;gt;
&amp;lt;/activity&amp;gt;
&amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;&lt;/code>&lt;/pre>&lt;/p>
&lt;p>You will have to adapt this section according to the reader plugin used.&lt;/p>
&lt;hr>
&lt;h2 id="focus-on-keyple-specific-code">Focus on Keyple specific code&lt;/h2>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('6', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-kotlin" id="code-6">...
abstract class AbstractExampleActivity : ..., CardReaderObserverSpi, CardReaderObservationExceptionHandlerSpi {
...
}&lt;/code>&lt;/pre>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-kotlin" id="code-7">...
class CoreExamplesActivity : AbstractExampleActivity() {
private val CARD_ISO_14443_4 = &amp;#34;ISO_14443_4_CARD&amp;#34;
private lateinit var plugin: Plugin
private lateinit var reader: CardReader
override fun onCreate(savedInstanceState: Bundle?) {
...
// Register AndroidNfc plugin Factory
plugin = SmartCardServiceProvider.getService()
.registerPlugin(AndroidNfcPluginFactoryProvider(this).getFactory())
// Configure Nfc Reader
with(plugin.getReader(AndroidNfcReader.READER_NAME) as ObservableCardReader) {
setReaderObservationExceptionHandler(this@CoreExamplesActivity)
addObserver(this@CoreExamplesActivity)
// with this protocol settings we activate the nfc for ISO1443_4 protocol
(this as ConfigurableCardReader).activateProtocol(
AndroidNfcSupportedProtocols.ISO_14443_4.name, CARD_ISO_14443_4)
reader = this
}
}
override fun onDestroy() {
SmartCardServiceProvider.getService().unregisterPlugin(AndroidNfcPlugin.PLUGIN_NAME)
...
}
override fun onResume() {
...
try {
checkNfcAvailability()
if (intent.action != null &amp;amp;&amp;amp; intent.action == NfcAdapter.ACTION_TECH_DISCOVERED) run {
...
// notify reader that card detection has been launched
(reader as ObservableCardReader).startCardDetection(
ObservableCardReader.DetectionMode.SINGLESHOT)
...
plugin.getReaderExtension(AndroidNfcReader.class, reader.name).processIntent(intent)
configureUseCase1ExplicitSelectionAid()
} else {
...
// enable detection
(reader as ObservableCardReader).startCardDetection(
ObservableCardReader.DetectionMode.SINGLESHOT)
}
} catch (e: IOException) {
...
}
}
...
private fun configureUseCase1ExplicitSelectionAid() {
...
with(reader as ObservableCardReader) {
...
if (isCardPresent) {
val smartCardService = SmartCardServiceProvider.getService()
// Get the generic card extension service
val cardExtension = GenericExtensionService.getInstance()
// Verify that the extension API level is consistent with the current service.
smartCardService.checkCardExtension(cardExtension)
/*
* Setting of an AID based selection (in this example a Calypso REV3 PO)
*
* Select the first application matching the selection AID whatever the card communication
* protocol keep the logical channel open after the selection
*/
val aid = CalypsoClassicInfo.AID_CD_LIGHT_GTML
/*
* Generic selection: configures a CardSelector with all the desired attributes to make
* the selection and read additional information afterwards
*/
val cardSelection = cardExtension.createCardSelection()
.filterByCardProtocol(CARD_ISO_14443_4)
.filterByDfName(aid)
// Create a card selection using the generic card extension.
cardSelectionManager.prepareSelection(cardSelection)
// Provide the Reader with the selection operation to be processed when a card is inserted.
cardSelectionManager.scheduleCardSelectionScenario(
reader as ObservableCardReader,
ObservableCardReader.DetectionMode.SINGLESHOT,
ObservableCardReader.NotificationMode.MATCHED_ONLY)
...
try {
val cardSelectionsResult = cardSelectionManager.processCardSelectionScenario(this)
if (cardSelectionsResult.activeSmartCard != null) {
val matchedCard = cardSelectionsResult.activeSmartCard
...
} else {
// selection failed
...
}
(reader as ObservableCardReader).finalizeCardProcessing()
} catch (e: CardCommunicationException) {
...
} catch (e: ReaderCommunicationException) {
...
}
} else {
// No cards were detected
...
}
...
}
}
...
}&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h4 id="how-to-fix-_more-than-one-file-was-found-with-os-independent-path-meta-infnoticemd_">How to fix &amp;ldquo;&lt;em>More than one file was found with OS independent path &amp;lsquo;META-INF/NOTICE.md&amp;rsquo;&lt;/em>&amp;rdquo;.&lt;/h4>
&lt;p>Add lines below to your :app build.gradle file&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-kotlin" id="code-8">android {
packagingOptions {
exclude &amp;#39;META-INF/NOTICE.md&amp;#39;
}
}&lt;/code>&lt;/pre></description></item><item><title>Build your first C++ application</title><link>https://keyple.org/learn/build-your-first-app/cpp-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/build-your-first-app/cpp-app/</guid><description>&lt;hr>
&lt;div class="alert alert-warning">
&lt;div>
This page is still under construction and may contain inaccurate information.
&lt;/div>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This quick start describes how to create a ready-to-execute command-line application that runs a simple transaction based on
a Calypso Card involving two smart card readers.&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>The demonstration application created for this quick start requires:&lt;/p>
&lt;ul>
&lt;li>a Calypso Card (contactless smart card, NFC mobile phone with a Calypso applet or application),&lt;/li>
&lt;li>a Calypso SAM (Secure Access Module).&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;p>We will use three main components of Keyple:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Keyple Service C++ Library&lt;/strong>
which is the base component to which all the others refer,&lt;/li>
&lt;li>&lt;strong>Keyple Card Calypso C++ Library&lt;/strong>
add-on to handle the commands sent to the Calypso card and the Calypso SAM,&lt;/li>
&lt;li>&lt;strong>Keyple Plugin PC/SC C++ Library&lt;/strong>
add-on to provide the ability to manage PC/SC readers.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info">
&lt;div>
&lt;p>Prerequisites&lt;/p>
&lt;p>Here are the prerequisites to build the keyple components (dynamic libraries):&lt;/p>
&lt;ul>
&lt;li>G++ 6 and higher, MSVC++ 14 (other compilers untested)&lt;/li>
&lt;li>&lt;a href="https://cmake.org/">CMake&lt;/a>&lt;/li>
&lt;li>libpcsclite1 and libpcsclite-dev packages installed (Linux) to build the PC/SC plugin&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;p>In this guide, the Keyple components and application are build under Linux using CMake as build automation tool.&lt;/p>
&lt;hr>
&lt;h2 id="create-the-build-environment">Create the build environment&lt;/h2>
&lt;p>The building of all the necessary components is facilitated by a dedicated &amp;ldquo;meta-project&amp;rdquo; allowing to get all the
components and dependencies in a single step.&lt;/p>
&lt;p>Git checkout the &lt;a href="https://github.com/eclipse/keyple-cpp-meta" target="_blank" rel="noopener">meta project&lt;/a> into a directory of you local disk, then
enter the created directory and execute the following commands:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('3', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-bash" id="code-3">mkdir build
cd build
cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain/gcc-linux.cmake ..
make&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
&lt;code>gcc-linux&lt;/code> may be replaced by one of the build configurations available &lt;a href="https://github.com/eclipse/keyple-cpp-meta/tree/master/toolchain">here&lt;/a>.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="lets-code">Let&amp;rsquo;s code&lt;/h2>
&lt;p>Now let&amp;rsquo;s see step by step how to create in one single class the elements that allow a certified reading of data through
a Calypso secure session.&lt;/p>
&lt;p>In a real ticketing application, the organization of the code would probably be different, but the point here is to show
how Keyple makes it possible to perform very simply operations that normally require a quantity of code and knowledge
that far exceeds what is implemented here.&lt;/p>
&lt;p>You can either progressively copy each of the small portions of code
that follow or copy the whole class at the bottom of this page.&lt;/p>
&lt;h3 id="create-a-directory-dedicated-to-the-application">Create a directory dedicated to the application&lt;/h3>
&lt;p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('5', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-bash" id="code-5">cd ..
mkdir app
cd app&lt;/code>&lt;/pre>
We assume here that the current directory was the previously created &lt;code>build&lt;/code> directory.&lt;/p>
&lt;p>Create a file named &lt;code>CMakeLists.txt&lt;/code> with the following content:
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('6', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-make" id="code-6">SET(CALYPSONET_CALYPSO_DIR &amp;#34;../../calypsonet-terminal-calypso-cpp-api&amp;#34;)
SET(CALYPSONET_CARD_DIR &amp;#34;../../calypsonet-terminal-card-cpp-api&amp;#34;)
SET(CALYPSONET_READER_DIR &amp;#34;../../calypsonet-terminal-reader-cpp-api&amp;#34;)
SET(KEYPLE_CALYPSO_DIR &amp;#34;../../keyple-card-calypso-cpp-lib&amp;#34;)
SET(KEYPLE_COMMON_DIR &amp;#34;../../keyple-common-cpp-api&amp;#34;)
SET(KEYPLE_PLUGIN_DIR &amp;#34;../../keyple-plugin-cpp-api&amp;#34;)
SET(KEYPLE_PCSC_DIR &amp;#34;../../keyple-plugin-pcsc-cpp-lib&amp;#34;)
SET(KEYPLE_SERVICE_DIR &amp;#34;../../keyple-service-cpp-lib&amp;#34;)
SET(KEYPLE_UTIL_DIR &amp;#34;../../keyple-util-cpp-lib&amp;#34;)
SET(KEYPLE_CALYPSO_LIB &amp;#34;keyplecardcalypsocpplib&amp;#34;)
SET(KEYPLE_PCSC_LIB &amp;#34;keyplepluginpcsccpplib&amp;#34;)
SET(KEYPLE_SERVICE_LIB &amp;#34;keypleservicecpplib&amp;#34;)
SET(KEYPLE_UTIL_LIB &amp;#34;keypleutilcpplib&amp;#34;)
INCLUDE_DIRECTORIES(
${CMAKE_CURRENT_SOURCE_DIR}
${CMAKE_CURRENT_SOURCE_DIR}/src/main/common
${CMAKE_CURRENT_SOURCE_DIR}/src/main/spi
${CALYPSONET_CALYPSO_DIR}/src/main
${CALYPSONET_CALYPSO_DIR}/src/main/card
${CALYPSONET_CALYPSO_DIR}/src/main/sam
${CALYPSONET_CALYPSO_DIR}/src/main/transaction
${CALYPSONET_CARD_DIR}/src/main
${CALYPSONET_CARD_DIR}/src/main/spi
${CALYPSONET_READER_DIR}/src/main
${CALYPSONET_READER_DIR}/src/main/selection
${CALYPSONET_READER_DIR}/src/main/selection/spi
${CALYPSONET_READER_DIR}/src/main/spi
${KEYPLE_CALYPSO_DIR}/src/main
${KEYPLE_CARD_DIR}/src/main
${KEYPLE_COMMON_DIR}/src/main
${KEYPLE_PCSC_DIR}/src/main
${KEYPLE_PLUGIN_DIR}/src/main
${KEYPLE_PLUGIN_DIR}/src/main/spi
${KEYPLE_PLUGIN_DIR}/src/main/spi/reader
${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/
${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/insertion
${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/processing
${KEYPLE_PLUGIN_DIR}/src/main/spi/reader/observable/state/removal
${KEYPLE_RESOURCE_DIR}/src/main
${KEYPLE_RESOURCE_DIR}/src/main/spi
${KEYPLE_SERVICE_DIR}/src/main
${KEYPLE_SERVICE_DIR}/src/main/cpp
${KEYPLE_SERVICE_DIR}/src/main/spi
${KEYPLE_STUB_DIR}/src/main
${KEYPLE_UTIL_DIR}/src/main
${KEYPLE_UTIL_DIR}/src/main/cpp
${KEYPLE_UTIL_DIR}/src/main/cpp/exception
${KEYPLE_UTIL_DIR}/src/main/protocol
)
IF(APPLE OR UNIX)
SET(THREAD_LIB pthread)
ELSE()
ENDIF(APPLE OR UNIX)
SET(USECASE1 UseCase1_ExplicitSelectionAid)
SET(USECASE1_STUB ${USECASE1}_Stub)
ADD_EXECUTABLE(${USECASE1_STUB}
${CMAKE_CURRENT_SOURCE_DIR}/src/main/common/CalypsoConstants.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/main/common/StubSmartCardFactory.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/main/${USECASE1}/Main_ExplicitSelectionAid_Stub.cpp)
TARGET_LINK_LIBRARIES(${USECASE1_STUB} ${KEYPLE_CARD_LIB} ${KEYPLE_STUB_LIB} ${KEYPLE_SERVICE_LIB} ${KEYPLE_UTIL_LIB} ${KEYPLE_CALYPSO_LIB} ${THREAD_LIB})&lt;/code>&lt;/pre>&lt;/p>
&lt;h3 id="create-a-directory-for-the-source-code">Create a directory for the source code&lt;/h3>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('7', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-bash" id="code-7">mkdir src
cd src&lt;/code>&lt;/pre>
&lt;h3 id="create-the-class-skeleton">Create the class skeleton&lt;/h3>
&lt;p>Copy the source code below in a new C++ file named &lt;code>DemoCardAuthentication.cpp&lt;/code>&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('8', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-8">#include &amp;#34;CalypsoExtensionService.h&amp;#34;
#include &amp;#34;ConfigurableReader.h&amp;#34;
#include &amp;#34;SmartCardService.h&amp;#34;
#include &amp;#34;SmartCardServiceProvider.h&amp;#34;
#include &amp;#34;ByteArrayUtil.h&amp;#34;
#include &amp;#34;ContactCardCommonProtocol.h&amp;#34;
#include &amp;#34;ContactlessCardCommonProtocol.h&amp;#34;
#include &amp;#34;IllegalStateException.h&amp;#34;
#include &amp;#34;LoggerFactory.h&amp;#34;
#include &amp;#34;StringUtils.h&amp;#34;
#include &amp;#34;PcscPlugin.h&amp;#34;
#include &amp;#34;PcscPluginFactory.h&amp;#34;
#include &amp;#34;PcscPluginFactoryBuilder.h&amp;#34;
#include &amp;#34;PcscReader.h&amp;#34;
#include &amp;#34;PcscSupportedContactlessProtocol.h&amp;#34;
#include &amp;#34;CardResource.h&amp;#34;
#include &amp;#34;CardResourceServiceProvider.h&amp;#34;
#include &amp;#34;CalypsoConstants.h&amp;#34;
#include &amp;#34;ConfigurationUtil.h&amp;#34;
using namespace keyple::card::calypso;
using namespace keyple::core::service;
using namespace keyple::core::service::resource;
using namespace keyple::core::util;
using namespace keyple::core::util::cpp;
using namespace keyple::core::util::cpp::exception;
using namespace keyple::core::util::protocol;
using namespace keyple::plugin::pcsc;
class Main_CardAuthentication_Pcsc {};
static const std::unique_ptr&amp;lt;Logger&amp;gt; logger = LoggerFactory::getLogger(typeid(Main_CardAuthentication_Pcsc));
int main()
{
// ...
}&lt;/code>&lt;/pre>
&lt;h3 id="set-up-the-pcsc-plugin">Set up the PC/SC plugin&lt;/h3>
&lt;p>The first step to use Keyple is to initialize the plugin and smart card readers.&lt;/p>
&lt;p>In this snippet the PC/SC plugin is registered to the SmartCardService.&lt;/p>
&lt;p>Two readers needs to be connected to the local machine. Change
&amp;ldquo;CARD_READER_NAME&amp;rdquo; and &amp;ldquo;SAM_READER_NAME&amp;rdquo; with the name of your USB readers.&lt;/p>
&lt;p>If you don&amp;rsquo;t know the names of the readers, read how to find them in the &lt;a href="#faq">FAQ&lt;/a>.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('9', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-9">// Get the instance of the SmartCardService
std::shared_ptr&amp;lt;SmartCardService&amp;gt; smartCardService = SmartCardServiceProvider::getService();
// Register the PcscPlugin with the SmartCardService, retrieve anc configure the readers
std::shared_ptr&amp;lt;Plugin&amp;gt; plugin = smartCardService-&amp;gt;registerPlugin(PcscPluginFactoryBuilder::builder()-&amp;gt;build());
std::shared_ptr&amp;lt;Reader&amp;gt; cardReader = std::dynamic_pointer_cast&amp;lt;ConfigurableReader&amp;gt;(plugin-&amp;gt;getReader(&amp;#34;CARD_READER_NAME&amp;#34;));
std::shared_ptr&amp;lt;Reader&amp;gt; samReader = std::dynamic_pointer_cast&amp;lt;ConfigurableReader&amp;gt;(plugin-&amp;gt;getReader(&amp;#34;SAM_READER_NAME&amp;#34;));&lt;/code>&lt;/pre>
&lt;h3 id="set-up-the-calypso-card-extension">Set up the Calypso card extension&lt;/h3>
&lt;p>The Calypso card extension service will provide means to handle cards, SAMs and to manage card transactions.
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('10', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-10">// Get the Calypso card extension service
std::shared_ptr&amp;lt;CalypsoExtensionService&amp;gt; cardExtension = CalypsoExtensionService::getInstance();
// Verify that the extension&amp;#39;s API level is consistent with the current service
smartCardService-&amp;gt;checkCardExtension(cardExtension);&lt;/code>&lt;/pre>&lt;/p>
&lt;h3 id="select-the-calypso-sam">Select the Calypso SAM&lt;/h3>
&lt;p>Before executing a transaction each smart card should be selected. The
next step is the selection of the Calypso SAM resulting in a
CalypsoSam object.&lt;/p>
&lt;p>It is then combined with the SAM reader to form the SAM resource needed
later within the transaction service.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('11', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-11">// Select the SAM
std::shared_ptr&amp;lt;CardSelectionManager&amp;gt; samSelectionManager = smartCardService.createCardSelectionManager();
samSelectionManager.prepareSelection(calypsoExtensionService.createSamSelection());
std::shared_ptr&amp;lt;CardSelectionResult&amp;gt; samSelectionResult = samSelectionManager.processCardSelectionScenario(samReader);
std::shared_ptr&amp;lt;CalypsoSam&amp;gt; calypsoSam = std::dynamic_pointer_cast&amp;lt;CalypsoSam&amp;gt; samSelectionResult.getActiveSmartCard();
if (calypsoSam == nullptr) {
throw IllegalStateException(&amp;#34;The SAM selection failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;h3 id="select-the-calypso-card">Select the Calypso card&lt;/h3>
&lt;p>1st card exchange:&lt;/p>
&lt;p>The Calypso card selection is made using the card application&amp;rsquo;s AID
and results in a CalypsoCard object that will contain all the information extracted
from the Calypso card all along the transaction.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('12', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-12">// Select the card
std::shared_ptr&amp;lt;CardSelectionManager&amp;gt; cardSelectionManager = smartCardService.createCardSelectionManager();
cardSelectionManager.prepareSelection(
calypsoExtensionService.createCardSelection().filterByDfName(AID));
std::shared_ptr&amp;lt;CardSelectionResult&amp;gt; cardSelectionResult =
cardSelectionManager.processCardSelectionScenario(cardReader);
std::shared_ptr&amp;lt;CalypsoCard&amp;gt; calypsoCard = std::dynamic_pointer_cast&amp;lt;CalypsoCard&amp;gt; cardSelectionResult.getActiveSmartCard();
if (calypsoCard == nullptr) {
throw IllegalStateException(&amp;#34;The card selection failed.&amp;#34;);
}&lt;/code>&lt;/pre>
&lt;h3 id="open-the-calypso-secure-session">Open the Calypso secure session&lt;/h3>
&lt;p>2nd card exchange :&lt;/p>
&lt;p>The secure session opening operated by the CardTransaction service is
combined with the reading of the environment file (SFI=07h).&lt;/p>
&lt;p>The mutual authentication process between Calypso card and Calypso SAM is initiated transparently.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('13', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-13">// Prepare the security settings used during the Calypso transaction
std::shared_ptr&amp;lt;CardSecuritySetting&amp;gt; cardSecuritySetting =
calypsoExtensionService
.createCardSecuritySetting()
.setControlSamResource(samReader, calypsoSam);
// Performs file reads using the card transaction manager in a secure session.
std::shared_ptr&amp;lt;CardTransactionManager&amp;gt; cardTransactionManager =
calypsoExtensionService
.createCardTransaction(cardReader, calypsoCard, cardSecuritySetting)
.prepareReadRecord(SFI_ENVIRONMENT_AND_HOLDER, RECORD_NUMBER_1)
.processOpening(WriteAccessLevel.DEBIT);&lt;/code>&lt;/pre>
&lt;h3 id="close-the-calypso-secure-session">Close the Calypso secure session&lt;/h3>
&lt;p>3rd card exchange:&lt;/p>
&lt;p>Simply close the Calypso secure session&lt;/p>
&lt;p>The mutual authentication is finalized, it includes the authentication
of the data in the read file.&lt;/p>
&lt;p>Note: any technical, cryptographic or content-related incident in the Calypso card
would be signalled by an exception and would interrupt the thread of
execution.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('14', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-14">// Close the secure session, free the communication channel at the same time
cardTransactionManager.prepareReleaseCardChannel().processClosing();
printf(
&amp;#34;= #### The Secure Session ended successfully, the card is authenticated and the data read are certified.&amp;#34;);
System.out.println(
&amp;#34;\n= #### FILE CONTENT = &amp;#34; &amp;#43; calypsoCard.getFileBySfi(SFI_ENVIRONMENT_AND_HOLDER));
printf(&amp;#34;\n= #### End of the Calypso card processing.&amp;#34;);&lt;/code>&lt;/pre>
&lt;h3 id="unregister-the-plugin">Unregister the plugin&lt;/h3>
&lt;p>Finally unregister the plugin before shutting down the application&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('15', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-15">// Unregister the plugin before leaving the application
smartCardService.unregisterPlugin(plugin.getName());
exit(0);&lt;/code>&lt;/pre>
&lt;p>Find the complete code source &lt;a href="#full-code">below&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="run">Run&lt;/h2>
&lt;ol>
&lt;li>Connect two USB PC/SC Readers.&lt;/li>
&lt;li>Insert the Calypso SAM in the SAM reader.&lt;/li>
&lt;li>Insert the Calypso card in the card reader.&lt;/li>
&lt;li>Run the application.&lt;/li>
&lt;/ol>
&lt;div class="alert alert-note">
&lt;div>
All project dependencies, including Keyple
components, are downloaded during the first run, which can take some
time.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h4 id="how-do-i-find-out-the-names-of-the-readers">How do I find out the names of the readers?&lt;/h4>
&lt;p>To find out the names of the readers connected to your computer, we will
use Keyple with the following class which prints in the console the
number and names of the readers present:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('17', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-17">#include &amp;#34;SmartCardService.h&amp;#34;
#include &amp;#34;SmartCardServiceProvider.h&amp;#34;
#include &amp;#34;PcscPlugin.h&amp;#34;
#include &amp;#34;PcscPluginFactory.h&amp;#34;
#include &amp;#34;PcscPluginFactoryBuilder.h&amp;#34;
#include &amp;#34;PcscReader.h&amp;#34;
using namespace keyple::core::service;
using namespace keyple::plugin::pcsc;
class ReaderDiscovery {};
int main()
{
std::shared_ptr&amp;lt;SmartCardService&amp;gt; smartCardService = SmartCardServiceProvider::getService();
std::shared_ptr&amp;lt;Plugin&amp;gt; plugin = smartCardService-&amp;gt;registerPlugin(PcscPluginFactoryBuilder::builder()-&amp;gt;build());
std::cout &amp;lt;&amp;lt; plugin-&amp;gt;getReaderNames().size() &amp;lt;&amp;lt; &amp;#34; reader(s) found.&amp;#34; &amp;lt;&amp;lt; std::endl;
for (const auto&amp;amp; readerName : plugin-&amp;gt;getReaderNames()) {
std::cout &amp;lt;&amp;lt; &amp;#34;\&amp;#34;&amp;#34; &amp;lt;&amp;lt; readerName &amp;lt;&amp;lt; &amp;#34;\&amp;#34;&amp;#34; &amp;lt;&amp;lt; std::endl;
}
}&lt;/code>&lt;/pre>
&lt;p>The console output should look something like:&lt;/p>
&lt;pre>&lt;code>2 reader(s) found.
&amp;quot;ASK LoGO 0&amp;quot;
&amp;quot;Identive CLOUD 2700 R Smart Card Reader 0&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Identify which reader will be the card (contactless) reader and the SAM
(contact) reader and replace &lt;code>CARD_READER_NAME&lt;/code> and
&lt;code>SAM_READER_NAME&lt;/code> with their values.&lt;/p>
&lt;h4 id="the-program-is-terminated-with-the-samcard-selection-failed">The program is terminated with &amp;lsquo;The SAM/card selection failed&amp;rsquo;&lt;/h4>
&lt;p>Check the presence of the SAM and/or the card. The expected SAM is a Calypso S1 SAM and the expected card must have an
application identifier (DFNAME) corresponding to the AID used.&lt;/p>
&lt;h4 id="the-program-is-terminated-with-an-exception">The program is terminated with an exception&lt;/h4>
&lt;p>The cause is probably an error in the name of one of the two readers or the absence of a card on the contactless reader.&lt;/p>
&lt;p>To better identify the origin of the problem, it is always possible to surround the code with try/catch and display the cause.&lt;/p>
&lt;h4 id="full-code">Full code&lt;/h4>
&lt;p>Here is the complete code of this quick start in one single block.&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('18', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-cpp" id="code-18">#include &amp;#34;CalypsoExtensionService.h&amp;#34;
#include &amp;#34;ConfigurableReader.h&amp;#34;
#include &amp;#34;SmartCardService.h&amp;#34;
#include &amp;#34;SmartCardServiceProvider.h&amp;#34;
#include &amp;#34;ByteArrayUtil.h&amp;#34;
#include &amp;#34;ContactCardCommonProtocol.h&amp;#34;
#include &amp;#34;ContactlessCardCommonProtocol.h&amp;#34;
#include &amp;#34;IllegalStateException.h&amp;#34;
#include &amp;#34;LoggerFactory.h&amp;#34;
#include &amp;#34;StringUtils.h&amp;#34;
#include &amp;#34;PcscPlugin.h&amp;#34;
#include &amp;#34;PcscPluginFactory.h&amp;#34;
#include &amp;#34;PcscPluginFactoryBuilder.h&amp;#34;
#include &amp;#34;PcscReader.h&amp;#34;
#include &amp;#34;PcscSupportedContactlessProtocol.h&amp;#34;
using namespace keyple::card::calypso;
using namespace keyple::core::service;
using namespace keyple::core::service::resource;
using namespace keyple::core::util;
using namespace keyple::core::util::cpp;
using namespace keyple::core::util::cpp::exception;
using namespace keyple::core::util::protocol;
using namespace keyple::plugin::pcsc;
const std::string AID = &amp;#34;315449432E49434131&amp;#34;;
const uint8_t SFI_ENVIRONMENT_AND_HOLDER = 0x07;
const uint8_t RECORD_NUMBER_1 = 1;
class Main_CardAuthentication_Pcsc {};
int main()
{
// Get the instance of the SmartCardService
std::shared_ptr&amp;lt;SmartCardService&amp;gt; smartCardService = SmartCardServiceProvider::getService();
// Register the PcscPlugin with the SmartCardService, retrieve anc configure the readers
std::shared_ptr&amp;lt;Plugin&amp;gt; plugin = smartCardService-&amp;gt;registerPlugin(PcscPluginFactoryBuilder::builder()-&amp;gt;build());
std::shared_ptr&amp;lt;Reader&amp;gt; cardReader = std::dynamic_pointer_cast&amp;lt;ConfigurableReader&amp;gt;(plugin-&amp;gt;getReader(&amp;#34;CARD_READER_NAME&amp;#34;));
std::shared_ptr&amp;lt;Reader&amp;gt; samReader = std::dynamic_pointer_cast&amp;lt;ConfigurableReader&amp;gt;(plugin-&amp;gt;getReader(&amp;#34;SAM_READER_NAME&amp;#34;));
// Get the Calypso card extension service
std::shared_ptr&amp;lt;CalypsoExtensionService&amp;gt; calypsoExtensionService = CalypsoExtensionService::getInstance();
// Verify that the extension&amp;#39;s API level is consistent with the current service
smartCardService-&amp;gt;checkCardExtension(calypsoExtensionService);
// Select the SAM
std::shared_ptr&amp;lt;CardSelectionManager&amp;gt; samSelectionManager = smartCardService-&amp;gt;createCardSelectionManager();
samSelectionManager-&amp;gt;prepareSelection(calypsoExtensionService-&amp;gt;createSamSelection());
std::shared_ptr&amp;lt;CardSelectionResult&amp;gt; samSelectionResult = samSelectionManager-&amp;gt;processCardSelectionScenario(samReader);
std::shared_ptr&amp;lt;CalypsoSam&amp;gt; calypsoSam = std::dynamic_pointer_cast&amp;lt;CalypsoSam&amp;gt;(samSelectionResult-&amp;gt;getActiveSmartCard());
if (calypsoSam == nullptr)
{
throw IllegalStateException(&amp;#34;The SAM selection failed.&amp;#34;);
}
// Select the card
std::shared_ptr&amp;lt;CardSelectionManager&amp;gt; cardSelectionManager = smartCardService-&amp;gt;createCardSelectionManager();
std::shared_ptr&amp;lt;CalypsoCardSelection&amp;gt; cardSelection = calypsoExtensionService-&amp;gt;createCardSelection();
cardSelection-&amp;gt;filterByDfName(AID);
cardSelectionManager-&amp;gt;prepareSelection(cardSelection);
std::shared_ptr&amp;lt;CardSelectionResult&amp;gt; cardSelectionResult = cardSelectionManager-&amp;gt;processCardSelectionScenario(cardReader);
std::shared_ptr&amp;lt;CalypsoCard&amp;gt; calypsoCard = std::dynamic_pointer_cast&amp;lt;CalypsoCard&amp;gt;(cardSelectionResult-&amp;gt;getActiveSmartCard());
if (calypsoCard == nullptr)
{
throw IllegalStateException(&amp;#34;The card selection failed.&amp;#34;);
}
// Prepare the security settings used during the Calypso transaction
std::shared_ptr&amp;lt;CardSecuritySetting&amp;gt; cardSecuritySetting = calypsoExtensionService-&amp;gt;createCardSecuritySetting();
cardSecuritySetting-&amp;gt;setSamResource(samReader, calypsoSam);
// Performs file reads using the card transaction manager in a secure session.
std::shared_ptr&amp;lt;CardTransactionManager&amp;gt; cardTransactionManager = calypsoExtensionService-&amp;gt;createCardTransaction(cardReader, calypsoCard, cardSecuritySetting);
cardTransactionManager-&amp;gt;prepareReadRecord(SFI_ENVIRONMENT_AND_HOLDER, RECORD_NUMBER_1).processOpening(WriteAccessLevel::DEBIT);
// Close the secure session, free the communication channel at the same time
cardTransactionManager-&amp;gt;prepareReleaseCardChannel().processClosing();
printf(&amp;#34;= #### The Secure Session ended successfully, the card is &amp;#34;
&amp;#34;authenticated and the data read are certified.&amp;#34;);
// printf(&amp;#34;\n= #### FILE CONTENT = &amp;#34; &amp;#43;
// calypsoCard-&amp;gt;getFileBySfi(SFI_ENVIRONMENT_AND_HOLDER));
printf(&amp;#34;\n= #### End of the Calypso card processing.&amp;#34;);
}&lt;/code>&lt;/pre></description></item></channel></rss>