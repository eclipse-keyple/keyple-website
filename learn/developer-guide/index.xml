<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer guides | Eclipse Keyple</title><link>https://keyple.org/learn/developer-guide/</link><atom:link href="https://keyple.org/learn/developer-guide/index.xml" rel="self" type="application/rss+xml"/><description>Developer guides</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2020-2023 The Eclipse Keyple® project. All Rights Reserved.</copyright><image><url>https://keyple.org/media/logo.svg</url><title>Developer guides</title><link>https://keyple.org/learn/developer-guide/</link></image><item><title>Reader Plugin Add-on Developer Guide</title><link>https://keyple.org/learn/developer-guide/reader-plugin-add-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/developer-guide/reader-plugin-add-on/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This guide is intended to help developers who want to create a Keyple reader plugin add-on for a specific device.&lt;/p>
&lt;br>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;ol>
&lt;li>Learn the &lt;a href="#plugin-architecture">plugin architecture&lt;/a> concepts&lt;/li>
&lt;li>&lt;a href="#select-predefined-features">Select the predefined features&lt;/a> that meet your need&lt;/li>
&lt;li>&lt;a href="#define-specific-features">Define specific features&lt;/a> (optional)&lt;/li>
&lt;li>&lt;a href="#set-up-dev-environment">Set up the development environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implement-the-solution">Implement the solution&lt;/a>&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2 id="plugin-architecture">Plugin architecture&lt;/h2>
&lt;p>A Keyple reader plugin consists of three objects, a &lt;strong>plugin factory&lt;/strong>, a &lt;strong>plugin&lt;/strong> and a &lt;strong>reader&lt;/strong>, which meet the following two interface specifications:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Common API&lt;/strong>: public contract containing only generic types common to all plugins.&lt;/li>
&lt;li>&lt;strong>Plugin API&lt;/strong>: private contract based on two types of interfaces:
&lt;ul>
&lt;li>&lt;strong>API&lt;/strong> (Application Programming Interface): interface implemented by Keyple Service and directly usable by the plugin code.&lt;/li>
&lt;li>&lt;strong>SPI&lt;/strong> (Service Provider Interface): interface to be implemented by the plugin and directly used by Keyple Service.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The component diagram below illustrates the internal API/SPI links between the plugin and Keyple Service, as well as the public APIs exposed to the application:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/developer-guide/component-dependencies/plugin_api.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;br>
&lt;h2 id="select-predefined-features">Select predefined features&lt;/h2>
&lt;p>The diagram below helps you to determine exactly which interfaces to implement according to the characteristics of the reader:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/developer-guide/design-guides/reader_plugin_activity_diagram.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>XxxPluginFactory&lt;/code>, &lt;code>XxxPlugin&lt;/code> and &lt;code>XxxReader&lt;/code> interfaces must be created.
They are specific to the plugin &lt;code>Xxx&lt;/code> to be created but can remain empty if there is no specific feature.
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="define-specific-features">Define specific features&lt;/h2>
&lt;p>Depending on the characteristics of the reader, it may be necessary to add in the specific APIs configuration methods appropriate to the technical context.&lt;/p>
&lt;p>These features can be exposed at three levels:&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>plugin factory&lt;/strong> (&lt;code>XxxPluginFactory&lt;/code> interface), for the initial configuration of the plugin (e.g. set custom plugin name).&lt;/li>
&lt;li>In the &lt;strong>plugin&lt;/strong> (&lt;code>XxxPlugin&lt;/code> interface), for dynamic configurations that can be applied to all the readers (e.g. put the readers in sleep mode).&lt;br>
The API will then be directly accessible from the application through the &lt;code>getExtension(...)&lt;/code> method of the plugin registered with Keyple Service.&lt;/li>
&lt;li>In the &lt;strong>reader&lt;/strong> (&lt;code>XxxReader&lt;/code> interface), for dynamic configurations specific to each reader (e.g. activate/deactivate a LED).&lt;br>
The API will then be directly accessible from the application through the &lt;code>getReaderExtension(...)&lt;/code> method of the reader provided by the plugin registered with Keyple Service.&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="set-up-dev-environment">Set up dev environment&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
For Java and Android projects, the code should be compliant with &lt;strong>Java 1.6&lt;/strong> in order to address a wide range of applications.
&lt;/div>
&lt;/div>
&lt;p>If the reader plugin add-on is to be integrated into the Eclipse Keyple® project, it must use one of the following project templates:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../media/project-templates/java/keyple-plugin-[READER_PLUGIN_NAME]-java-lib.zip" target="_blank">Java template&lt;/a>: adapt fields &lt;code>[READER_PLUGIN_NAME]&lt;/code>, &lt;code>Xxx&lt;/code>, &lt;code>xxx&lt;/code>, &lt;code>TODO&lt;/code>&lt;/li>
&lt;li>&lt;a href="../../media/project-templates/android/keyple-plugin-[ANDROID_READER_PLUGIN_NAME]-java-lib.zip" target="_blank">Android template&lt;/a>: adapt fields &lt;code>[ANDROID_READER_PLUGIN_NAME]&lt;/code>, &lt;code>Xxx&lt;/code>, &lt;code>xxx&lt;/code>, &lt;code>TODO&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>Before pushing the project to GitHub the first time, you must give write permission to some scripts files via the following commands:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('0', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-ini" id="code-0">git update-index --chmod=&amp;#43;x &amp;#34;gradlew&amp;#34;
git update-index --chmod=&amp;#43;x &amp;#34;scripts/check_version.sh&amp;#34;
git update-index --chmod=&amp;#43;x &amp;#34;scripts/prepare_javadoc.sh&amp;#34;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;p>If examples are proposed, they should be placed in the &lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">keyple-java-example&lt;/a> repository.&lt;/p>
&lt;p>The contribution procedure is described &lt;a href="../../community/contributing/">here&lt;/a>.&lt;/p>
&lt;br>
&lt;h2 id="implement-the-solution">Implement the solution&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
It is important to hide the internal Keyple interfaces of the &lt;strong>Plugin API&lt;/strong> from the application.
&lt;/div>
&lt;/div>
&lt;p>For this purpose, it is suggested to respect the following programming pattern based on the use of:&lt;/p>
&lt;ul>
&lt;li>public interfaces,&lt;/li>
&lt;li>private interfaces adapters (package visibility) accessible from a public provider/builder.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/developer-guide/design-guides/reader_plugin_class_diagram.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-note">
&lt;div>
It is possible to use other alternatives to the factory provider depending on the need.
For example, if the plugin factory needs to expose specific configuration methods, it is recommended to use the builder pattern instead of the provider pattern in order to get a properly initialized factory.
Thus, the factory does not expose any method.
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-common-java-api" target="_blank" rel="noopener">Keyple Common API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-plugin-java-api" target="_blank" rel="noopener">Keyple Plugin API&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Card Extension Add-on Developer Guide</title><link>https://keyple.org/learn/developer-guide/card-extension-add-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/developer-guide/card-extension-add-on/</guid><description>&lt;br>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This guide is intended to help developers who want to create a Keyple card extension add-on for a specific card
technology.&lt;/p>
&lt;br>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;ol>
&lt;li>Learn the &lt;a href="#card-extension-architecture">card extension architecture&lt;/a> concepts&lt;/li>
&lt;li>Take note of the &lt;a href="#minimal-requirements">minimal requirements&lt;/a>&lt;/li>
&lt;li>&lt;a href="#define-the-card-commands">Define the card commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#set-up-dev-environment">Set up the development environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implement-the-solution">Implement the solution&lt;/a>&lt;/li>
&lt;/ol>
&lt;br>
&lt;h2 id="card-extension-architecture">Card extension architecture&lt;/h2>
&lt;p>A Keyple card extension contains a set of objects which meet the following three interface specifications:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Common API&lt;/strong>: public contract including a generic type common to all card extensions.&lt;/li>
&lt;li>&lt;strong>Keypop Reader API&lt;/strong>: public contract provided by the Eclipse Keypop project including two specific
interfaces to be implemented by the card extension and required by the card selection manager.&lt;/li>
&lt;li>&lt;strong>Keypop Card API&lt;/strong>: private contract provided by the Eclipse Keypop project based on two types of
interfaces:
&lt;ul>
&lt;li>&lt;strong>API&lt;/strong> (Application Programming Interface): interface implemented by Keyple Service and directly usable by the
card extension code.&lt;/li>
&lt;li>&lt;strong>SPI&lt;/strong> (Service Provider Interface): interface to be implemented by the card extension and directly used by
Keyple Service.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The component diagram below illustrates the internal API/SPI links between the card extension and Keyple Service, as
well as the public APIs exposed to the application:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/developer-guide/component-dependencies/card_api.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;br>
&lt;h2 id="minimal-requirements">Minimal requirements&lt;/h2>
&lt;p>The table below lists the objects that must be created and indicates the interfaces to be implemented for each of them:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Object&lt;/th>
&lt;th style="text-align:center">Common API&lt;/th>
&lt;th style="text-align:center">Keypop Reader API&lt;/th>
&lt;th style="text-align:center">Keypop Card API&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Card extension service&lt;/td>
&lt;td style="text-align:center">&lt;code>KeypleCardExtension&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Card selection parser&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;code>CardSelectionExtension&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>CardSelectionExtensionSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart card object&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;code>SmartCard&lt;/code> or &lt;code>IsoSmartCard&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>SmartCardSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Card selection request DTO&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;code>CardSelectionRequestSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Card request DTO&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;code>CardRequestSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>APDU request DTO&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;code>ApduRequestSpi&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>In the case where the smart card object has fields of type &lt;code>interface&lt;/code>,
it will then be necessary to define for each of them and recursively a JSON deserializer and register it during the
service initialization with the method &lt;code>JsonUtil.registerTypeAdapter(...)&lt;/code> provided by the
&lt;a href="https://keyple.org/components/core/keyple-util-lib/">Keyple Util&lt;/a> library.&lt;/p>
&lt;p>This will allow the transport of this object through the network when using the Keyple Distributed solution.&lt;/p>
&lt;/div>
&lt;/div>
&lt;br>
&lt;h2 id="define-the-card-commands">Define the card commands&lt;/h2>
&lt;p>The card extension takes part in the communication with the card in two ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>implicitly&lt;/strong>, when the card is being selected, which is done directly by the application via the Keyple Service
selection manager;&lt;/li>
&lt;li>&lt;strong>explicitly&lt;/strong>, when the card has been selected, on request of the application, by direct use of the APIs exposed by
the Card API.&lt;/li>
&lt;/ul>
&lt;p>For explicit communication, the card extension must require the application to provide a reference to a &lt;code>CardReader&lt;/code> of
the Reader API.
This can then be cast internally to a &lt;code>ProxyReaderApi&lt;/code> of the Card API through which it will be possible to transmit
card commands.&lt;/p>
&lt;p>Each card extension is free to define the APIs it considers relevant to perform card transactions.&lt;/p>
&lt;br>
&lt;h2 id="set-up-dev-environment">Set up dev environment&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
For Java and Android projects, the code should be compliant with &lt;strong>Java 1.6&lt;/strong> in order to address a wide range of
applications.
&lt;/div>
&lt;/div>
&lt;p>If the card extension add-on is to be integrated into the Eclipse Keyple® project, it must use the following project
template:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../../media/project-templates/java/keyple-card-[CARD_EXTENSION_NAME]-java-lib.zip" target="_blank">Java
template&lt;/a>: adapt fields &lt;code>[CARD_EXTENSION_NAME]&lt;/code>, &lt;code>Xxx&lt;/code>, &lt;code>xxx&lt;/code>, &lt;code>TODO&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning">
&lt;div>
&lt;p>Before pushing the project to GitHub the first time, you must give write permission to some scripts files via the
following commands:&lt;/p>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyCodeContentToClipboard('0', this);">Copy&lt;/button>&lt;/div>
&lt;pre>&lt;code class="language-ini" id="code-0">git update-index --chmod=&amp;#43;x &amp;#34;gradlew&amp;#34;
git update-index --chmod=&amp;#43;x &amp;#34;scripts/check_version.sh&amp;#34;
git update-index --chmod=&amp;#43;x &amp;#34;scripts/prepare_javadoc.sh&amp;#34;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;p>If examples are proposed, they should be placed in
the &lt;a href="https://github.com/eclipse/keyple-java-example" target="_blank" rel="noopener">keyple-java-example&lt;/a> repository.&lt;/p>
&lt;p>The contribution procedure is described &lt;a href="../../community/contributing/">here&lt;/a>.&lt;/p>
&lt;br>
&lt;h2 id="implement-the-solution">Implement the solution&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
It is important to hide the internal interfaces of the &lt;strong>Keypop Card API&lt;/strong> from the application.
&lt;/div>
&lt;/div>
&lt;p>For this purpose, it is suggested to respect the following programming pattern based on the use of:&lt;/p>
&lt;ul>
&lt;li>public interfaces,&lt;/li>
&lt;li>private interfaces adapters (package visibility) not accessible from a public service.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="../../media/learn/developer-guide/design-guides/card_extension_class_diagram.svg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://eclipse.github.io/keyple-common-java-api" target="_blank" rel="noopener">Keyple Common API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-reader-api/" target="_blank" rel="noopener">Keypop Reader API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eclipse-keypop.github.io/keypop-website/apis/keypop-card-api/" target="_blank" rel="noopener">Keypop Card API&lt;/a>&lt;/li>
&lt;/ul>
&lt;br>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://keyple.org/components/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>